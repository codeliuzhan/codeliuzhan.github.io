<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>PL/SQL基础</title>
      <link href="2021/05/31/plsql-ji-chu-0531/"/>
      <url>2021/05/31/plsql-ji-chu-0531/</url>
      
        <content type="html"><![CDATA[<h1 id="PL-SQL基础"><a href="#PL-SQL基础" class="headerlink" title="PL/SQL基础"></a>PL/SQL基础</h1><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>今天第二阶段开始了，PL/SQL的东西也开始了，学了一天，除了关键字，其他的和Java、C、C++一模一样，今天就打印几个东西，记录一下吧。</p><h4 id="1-打印：Hello-Oracle！"><a href="#1-打印：Hello-Oracle！" class="headerlink" title="1.打印：Hello Oracle！"></a>1.打印：Hello Oracle！</h4><pre class=" language-shell"><code class="language-shell">declarebegin  dbms_output.put_line('hello oracle');exception  end;begin  dbms_output.put_line('hello oracle');end;</code></pre><h4 id="2-打印：员工SMITH的薪资是800元-月"><a href="#2-打印：员工SMITH的薪资是800元-月" class="headerlink" title="2.打印：员工SMITH的薪资是800元/月"></a>2.打印：员工SMITH的薪资是800元/月</h4><pre class=" language-shell"><code class="language-shell">begin  dbms_output.put_line('员工SMITH的薪资是800元/月');end;</code></pre><h4 id="3-打印：SALES部门总共有6个人"><a href="#3-打印：SALES部门总共有6个人" class="headerlink" title="3.打印：SALES部门总共有6个人"></a>3.打印：SALES部门总共有6个人</h4><pre class=" language-shell"><code class="language-shell">begin  dbms_output.put_line('SALES部门总共有6个人');end;</code></pre><h4 id="4-打印如下对白："><a href="#4-打印如下对白：" class="headerlink" title="4.打印如下对白："></a>4.打印如下对白：</h4><p>海绵宝宝：你好，派大星。<br>派大星：你好，海绵宝宝。</p><pre class=" language-shell"><code class="language-shell">begin  dbms_output.put_line('海绵宝宝：你好，派大星。');  dbms_output.put_line('派大星：你好，海绵宝宝。');end;</code></pre><p>5.打印一个 ‘♥’</p><pre class=" language-shell"><code class="language-shell">      ******       ******    **********   **********  ************* ************* ***************************** ***************************** *****************************  ***************************    ***********************      *******************        ***************          ***********            *******              ***               * </code></pre><pre class=" language-shell"><code class="language-shell">begin  dbms_output.put_line('      ******       ******');  dbms_output.put_line('    **********   **********');  dbms_output.put_line('  ************* *************');  dbms_output.put_line(' *****************************');  dbms_output.put_line(' *****************************');  dbms_output.put_line(' *****************************');  dbms_output.put_line('  ***************************');  dbms_output.put_line('    ***********************');  dbms_output.put_line('      *******************');  dbms_output.put_line('          ***********');  dbms_output.put_line('            *******');  dbms_output.put_line('              ***');  dbms_output.put_line('               *');end;</code></pre><p>在PL/SQL程序中，DML操作可以直接运行。</p><h3 id="创建一张表备份EMP数据，然后编写PL-SQL程序"><a href="#创建一张表备份EMP数据，然后编写PL-SQL程序" class="headerlink" title="创建一张表备份EMP数据，然后编写PL/SQL程序"></a>创建一张表备份EMP数据，然后编写PL/SQL程序</h3><p>1）清理EMP表中10号部门数据–DELETE<br>2）从备份表中把10号部门数据恢复–INSERT<br>3）调整30号部门的薪资为原来的两倍–UPDATE</p><p>注意：DML操作需要在程序中运行COMMIT命令才能自动提交！</p><pre class=" language-shell"><code class="language-shell">create table emp_bak0531 as select * from emp;select * from emp_bak0531;</code></pre><pre class=" language-shell"><code class="language-shell">begin  begin    delete from emp_bak0531 where deptno = 10;    dbms_output.put_line('EMP表中10号部门数据已删除');    commit;  end;  begin    insert into emp      select * from emp_bak0531 where deptno = 10;    dbms_output.put_line('EMP表中10号部门数据已恢复');    commit;  end;  begin    update emp set sal = sal * 2 where deptno = 30;    dbms_output.put_line('EMP表中30号部门工资已修改');    commit;  end;end;select * from emp;</code></pre><h3 id="编写PL-SQL"><a href="#编写PL-SQL" class="headerlink" title="编写PL/SQL"></a>编写PL/SQL</h3><p>1）备份EMP表<br>2）清空EMP表<br>3）从备份表中恢复EMP表数据</p><pre class=" language-shell"><code class="language-shell">begin  --step1备份EMP表  begin    execute immediate 'create table emp_bak10531 as select * from emp';    dbms_output.put_line('备份EMP表');  end;  commit;  --step2清空EMP表  begin    execute immediate 'truncate table emp';    dbms_output.put_line('清空EMP表');  end;  commit;  --step3从备份表中恢复EMP表数据  begin    execute immediate 'insert into emp select * from emp_bak10531';    dbms_output.put_line('从备份表中恢复EMP表数据');  end;  commit;end;</code></pre><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>无论是声明变量、常量还是游标等各种声明内容，声明基本都是由两部分组成：名称和类型，类似于建表语句中声明每一个字段，每个量要有自己的名字（也称标识符），同时还要有自己的属性（含数据类型与精度）。</p><p>定义变量，赋予‘今天天气怎么样’，打印变量<br>再次赋值变量‘今天天儿不错’，再次打印</p><pre class=" language-shell"><code class="language-shell">declarev_a varchar2(200);v_b varchar2(200);begin  v_a:= '今天天气怎么样?';  v_b:= '今天天儿不错';  dbms_output.put_line(v_a);  dbms_output.put_line(v_b);end;</code></pre><p>声明一个变量，赋予内容：INSERT INTO EMP(EMPNO,SAL) VALUES(1234,1000);<br>打印变量中的内容，然后将变量交由EXECUTE来执行</p><pre class=" language-shell"><code class="language-shell">declarev_a varchar2(200);begin  v_a:= 'INSERT INTO EMP(EMPNO,SAL) VALUES(1234,1000)';  dbms_output.put_line(v_a);  execute immediate v_a;  commit;end;select * from emp;</code></pre><p>声明一个变量，赋予内容：INSERT INTO EMP(EMPNO,ENAME) VALUES(1235,’PEIQI’);<br>打印变量中的内容，然后将变量交由EXECUTE来执行</p><pre class=" language-shell"><code class="language-shell">declarev_a varchar2(200);begin  v_a:= 'INSERT INTO EMP(EMPNO,ENAME) VALUES(1235,''PEIQI'')';  dbms_output.put_line(v_a);  execute immediate v_a;  commit;end;select * from emp;</code></pre><p>声明一个变量1，给这个变量1赋予一个员工姓名（随便整个）<br>再写一个变量2，用来组成一条删除某姓名员工的SQL<br>写一个EXECUTE 命令  执行变量2</p><h5 id="第一种方法"><a href="#第一种方法" class="headerlink" title="第一种方法"></a>第一种方法</h5><pre class=" language-shell"><code class="language-shell">declarev_ename varchar2(200);v_sql varchar2(200);begin  v_ename := '''SCOTT''';  v_sql := 'delete from emp where ename = ' || v_ename;  dbms_output.put_line(v_ename);  dbms_output.put_line(v_sql);  execute immediate v_sql;  commit;end;select * from emp;</code></pre><h5 id="第二种方法"><a href="#第二种方法" class="headerlink" title="第二种方法"></a>第二种方法</h5><pre class=" language-shell"><code class="language-shell">declarev_ename varchar2(200);v_sql varchar2(200);begin  v_ename := 'WARD';  v_sql := 'delete from emp where ename = ' || '''' || v_ename || '''';  dbms_output.put_line(v_ename);  dbms_output.put_line(v_sql);  execute immediate v_sql;  commit;end;select * from emp;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据第二阶段 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oracle第二十四天</title>
      <link href="2021/05/21/oracle-di-er-shi-si-tian/"/>
      <url>2021/05/21/oracle-di-er-shi-si-tian/</url>
      
        <content type="html"><![CDATA[<h1 id="Oracle第二十四天"><a href="#Oracle第二十四天" class="headerlink" title="Oracle第二十四天"></a>Oracle第二十四天</h1><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>记录今天学的同义词和DCL(权限)和TCL(事务)，下午讲的Oracle体系结构就不写了，明天写</p><h3 id="语言分类"><a href="#语言分类" class="headerlink" title="语言分类"></a>语言分类</h3><p><img src="https://i.loli.net/2021/05/21/MUD7aBvlFbWhj6G.png" alt="1.png"></p><h4 id="同义词"><a href="#同义词" class="headerlink" title="同义词"></a>同义词</h4><h4 id="私有同义词："><a href="#私有同义词：" class="headerlink" title="私有同义词："></a>私有同义词：</h4><p>sys给scott授权</p><pre class=" language-shell"><code class="language-shell">grant create synonym to scott;</code></pre><p>给sc创建私有同义词</p><pre class=" language-shell"><code class="language-shell">create synonym s for sc;select * from s;</code></pre><pre class=" language-shell"><code class="language-shell">创建：CREATE SYNONYM         删除：DROP SYNONYM</code></pre><h4 id="公有同义词："><a href="#公有同义词：" class="headerlink" title="公有同义词："></a>公有同义词：</h4><pre class=" language-shell"><code class="language-shell">创建：CREATE PUBLIC SYNONYM  删除：DROP PUBLIC SYNONYM</code></pre><p>sys用户给scott用户创建公共权限</p><pre class=" language-shell"><code class="language-shell">grant create public synonym to scott;</code></pre><p>给students创建公共同义词</p><pre class=" language-shell"><code class="language-shell">create public synonym stu for students;select * from stu;</code></pre><p>创建：</p><pre class=" language-shell"><code class="language-shell">公有同义词：CREATE PUBLIC SYNONYM S_NAME FOR TBNAME;私有同义词：CREATE SYNONYM S_NAME FOR TBNAME;</code></pre><p>赋予某表的查询权限给PUBLIC组：</p><pre class=" language-shell"><code class="language-shell">GRANT SELECT ON USER.TB_NAME TO PUBLIC;grant select on scott.emp to public;</code></pre><p>赋予某表的查询权限给某用户：</p><pre class=" language-shell"><code class="language-shell">GRANT SELECT ON USER.TB_NAME TO USER_NAME;grant select on scott.sc to liuzhan;select * from liuzhan.sc;</code></pre><p>删除<br>公有同义词：</p><pre class=" language-shell"><code class="language-shell">DROP PUBLIC SYNONYM S_NAME;drop public synonym stu;</code></pre><p>私有同义词：</p><pre class=" language-shell"><code class="language-shell">DROP SYNONYM S_NAME;drop synonym scott.sc;</code></pre><h4 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h4><p>1.公有同义词在创建完成后需要赋予原对象的查询权限给PUBLIC组，<br>否则不含有原对象查询权限的用户无法使用该公有同义词<br>2.公有同义词使用时，直接使用同义词即可；私有同义词使用时必须加上”用户名.”</p><h3 id="DCL"><a href="#DCL" class="headerlink" title="DCL"></a>DCL</h3><p>注：以下操作请使用SYS或其他管理员用户登录<br>创建用户同时设置密码：</p><pre class=" language-shell"><code class="language-shell">CREATE USER USER_NAME IDENTIFIED BY PASSWORD;create user liuzhan identified by liuzhan;</code></pre><h3 id="注意：-1"><a href="#注意：-1" class="headerlink" title="注意："></a>注意：</h3><p>1.用户名不区分大小写，在创建、删除、登录用户时可以任意使用大小写；<br>密码严格区分大小写，无论在创建用户、修改密码还是登录时都要注意<br>2.此时仅仅是在数据库中注册了用户，但没有任何权限，甚至登录数据库的权限都没有</p><p>为用户添加权限：</p><pre class=" language-shell"><code class="language-shell">GRANT PRIVILEGE TO USER_NAME;grant privilege to liuzhan;</code></pre><p>为用户添加创建会话（连接数据库）的权限</p><pre class=" language-shell"><code class="language-shell">GRANT CREATE SESSION TO USER_NAME; --仅能连接数据库grant create session to liuzhan;</code></pre><p>为用户添加查询某表的权限(所有者用户执行)</p><pre class=" language-shell"><code class="language-shell">GRANT SELECT ON USER1.TB_NAME TO USER2;grant select on scott.emp to liuzhan;</code></pre><p>liuzhan用户下查询emp</p><pre class=" language-shell"><code class="language-shell">select * from scott.emp;</code></pre><p>新用户下创建表格试试</p><pre class=" language-shell"><code class="language-shell">create table s1(sno number); --权限不足</code></pre><p>为用户添加基础连接角色CONNECT和基础资源角色RESOURCE</p><pre class=" language-shell"><code class="language-shell">GRANT CONNECT,RESOURCE TO USER_NAME;grant connect,resource to liuzhan;</code></pre><p>CONNECT：该角色具有连接数据库的权限<br>RESOURCE：该角色具有数据库的基本角色，包括查询对象、部分对象的创建修改删除</p><p>测试connect，resource权限(以liuzhan用户登录)</p><pre class=" language-shell"><code class="language-shell">create table s2(sno number); --成功--建立约束成功alter table s2 add constraint pk_sno primary key(sno); </code></pre><h4 id="注意：-2"><a href="#注意：-2" class="headerlink" title="注意："></a>注意：</h4><p>1.每个用户下有自己各自的内容，互相之间不能直接访问，管理员用户可以直接访问其他用户的内容<br>2.普通用户间可以通过赋予权限实现互相访问</p><p>为用户添加管理员角色DBA</p><pre class=" language-shell"><code class="language-shell">GRANT DBA TO USER_NAME;--sys用户登录授权grant dba to liuzhan;</code></pre><p>DBA：数据库管理员，拥有数据库的最高权限</p><p>测试liuzhan用户给别的用户授权</p><pre class=" language-shell"><code class="language-shell">--全部授权成功create user liu identified by liu;grant connect,resource to liu;</code></pre><pre class=" language-shell"><code class="language-shell">--liu账户创建表格create table liu(liu number); --执行成功</code></pre><p>注意：<br>5.管理员用户之间可以互相收回</p><p>数据字典：</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM DBA_USERS; --使用管理员查-所有用户</code></pre><h4 id="注意：-3"><a href="#注意：-3" class="headerlink" title="注意："></a>注意：</h4><p>以管理员身份查询<br>在数据字典中，所有用户的用户名都是以大写格式存储的，查询时要注意</p><h3 id="DCL角色"><a href="#DCL角色" class="headerlink" title="DCL角色"></a>DCL角色</h3><p>定义：<br>带有一系列权限的集合。</p><p>作用：<br>用户被赋予某角色，相当于同时被赋予了该角色下的所有权限</p><p>分类：<br>系统角色：数据库自带角色<br>自定义角色：用户根据自身实际需求，自行创建的角色</p><p>创建角色：</p><pre class=" language-shell"><code class="language-shell">CREATE ROLE ROLE_NAME;</code></pre><p>以sys账户创建</p><pre class=" language-shell"><code class="language-shell">create role list_lz;</code></pre><p>赋予角色权限</p><pre class=" language-shell"><code class="language-shell">grant connect,resource to list_lz;</code></pre><p>将角色赋予某用户</p><pre class=" language-shell"><code class="language-shell">create user lz identified by lz;grant list_lz to lz;</code></pre><p>删除角色：</p><pre class=" language-shell"><code class="language-shell">DROP ROLE ROLE_NAME;drop role list_lz;</code></pre><p>给用户赋予角色或从用户收回角色：与赋予权限或收回权限的语法一致</p><h4 id="查询用户拥有的权限："><a href="#查询用户拥有的权限：" class="headerlink" title="查询用户拥有的权限："></a>查询用户拥有的权限：</h4><p>对象权限：如查询数据、增加数据、删除数据等</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM DBA_TAB_PRIVS T WHERE T.GRANTEE='USERNAME'/'ROLENAME';</code></pre><p>系统权限：如创建表、删除索引、连接数据库等</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM DBA_SYS_PRIVS WHERE T.GRANTEE='USERNAME'/'ROLENAME';  </code></pre><h4 id="注意：-4"><a href="#注意：-4" class="headerlink" title="注意："></a>注意：</h4><p>1.通过角色赋予给用户的权限，不能通过【查询某用户具有的权限】查到;<br>只有直接赋予给用户的权限，才能通过【查询某用户具有的权限】查到<br>2.想要确定某个用户到底有什么权限，一方面需要直接查询该用户下有哪些权限，<br>另一方面需要查询该用户下所拥有的的角色具有什么权限<br>3.想要赋予权限给用户，可以直接将该权限赋予给用户，或将具有该权限的角色赋予给用户</p><p>查询某用户下具有的所有对象权限：</p><pre class=" language-shell"><code class="language-shell">SELECT T.PRIVILEGE, T.OWNER, T.TABLE_NAME  FROM DBA_TAB_PRIVS T WHERE T.GRANTEE = 'USER_NAME'UNIONSELECT T.PRIVILEGE, T.OWNER, T.TABLE_NAME  FROM DBA_TAB_PRIVS T WHERE T.GRANTEE IN (SELECT GRANTED_ROLE                       FROM DBA_ROLE_PRIVS T                      WHERE T.GRANTEE = ' USER_NAME ');</code></pre><p>查询某用户下具有的所有系统权限：</p><pre class=" language-shell"><code class="language-shell">SELECT T.PRIVILEGE  FROM DBA_SYS_PRIVS T WHERE T.GRANTEE = 'USER_NAME'UNIONSELECT T.PRIVILEGE  FROM DBA_SYS_PRIVS T WHERE T.GRANTEE IN (SELECT GRANTED_ROLE                       FROM DBA_ROLE_PRIVS T                      WHERE T.GRANTEE = ' USER_NAME ');</code></pre><h4 id="用户、角色与权限的关系"><a href="#用户、角色与权限的关系" class="headerlink" title="用户、角色与权限的关系"></a>用户、角色与权限的关系</h4><p>用户：数据库的使用者，比如SYS、SCOTT<br>权限：指能否在数据库中做某种操作，比如创建表、查询数据<br>角色：带有一系列权限的集合，拥有角色，即拥有该角色下所有的权限，比如CONNECT,RESOURCE,DBA</p><p>在做权限管理时，可直接将某权限赋予给某个用户，若某些权限需要经常赋予给用户，可直接建立一个包含这些权限的角色，直接赋予角色即可达到赋予众多权限的目的。</p><h3 id="权限图"><a href="#权限图" class="headerlink" title="权限图"></a>权限图</h3><p><img src="https://i.loli.net/2021/05/21/boL7yeiqKHcgz9E.png" alt="2.png"></p><h3 id="TCL语句-事务"><a href="#TCL语句-事务" class="headerlink" title="TCL语句(事务)"></a>TCL语句(事务)</h3><p>事务：<br>为了完成某项业务（任务、操作），由一系列看得见的SQL和看不见的后台进程组成的一系列逻辑工作单元。</p><p>整个事务在处理过程中一直处于未提交状态，直到全部过程执行成功才可以被提交，若中间某步出现错误，<br>则整个事务会全部回滚到事务执行之前的状态并报错。</p><p>事务的四个属性（统称ACID）<br>1.原子性：事务是一个整体的工作单元，要么全部执行，要么全部取消。某一步执行失败，则全部回滚。<br>2.一致性：所有相关数据必须保持状态一致，以保持数据的完整性，若事务执行成功，所有相关数据全部变为新状态，若失败，所有相关数据处于原始状态。<br>3.隔离性：当前事务在进行数据修改时，其他事务只能查看修改之前的状态，等到当前事务执行结束（提交后），数据的修改才能被看到。<br>4.持久性：事务提交后，所做的修改就会永久保存，直到下一次事务来改变它。</p><p>TCL关键词：</p><pre class=" language-shell"><code class="language-shell">COMMIT;  --事务提交ROLLBACK;  --事务回滚SAVEPOINT; --保存点 --在接下来的DML操作可能有风险的情况下在DML过程中使用</code></pre><h4 id="保存点语法："><a href="#保存点语法：" class="headerlink" title="保存点语法："></a>保存点语法：</h4><p>设立保存点：SAVEPOINT SP_NAME;<br>回滚到某保存点：ROLLBACK TO SAVEPOINT SP_NAME;</p><h4 id="事务的提交和回滚："><a href="#事务的提交和回滚：" class="headerlink" title="事务的提交和回滚："></a>事务的提交和回滚：</h4><p>显示提交：由COMMIT决定是否提交当前事务，例如DML语句中的 INSERT UPDATE DELETE ;<br>隐式提交：一旦整个事务执行成功，ORACLE会自动提交该事务，例如：CREATE ALTER DROP GRANT REVOKE ;<br>自动回滚：一旦事务进行过程中出现任何错误，ORACLE会自动回滚当前事务。</p>]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据第一阶段 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oracle与Excel合璧插入多条数据</title>
      <link href="2021/05/19/oracle-cha-ru-duo-tiao-shu-ju-de-sheng-huo-xiao-miao-zhao/"/>
      <url>2021/05/19/oracle-cha-ru-duo-tiao-shu-ju-de-sheng-huo-xiao-miao-zhao/</url>
      
        <content type="html"><![CDATA[<h3 id="Oracle中使用Excel插入多条数据"><a href="#Oracle中使用Excel插入多条数据" class="headerlink" title="Oracle中使用Excel插入多条数据"></a>Oracle中使用Excel插入多条数据</h3><h4 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h4><p>先把需要的数据复制到Excel中<br><img src="https://i.loli.net/2021/05/18/XDfT1CJSeu7wV6x.png" alt="1.PNG"></p><h4 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h4><p>将不需要的数据替换成空格<br>替换窗口（control + F）<br><img src="https://i.loli.net/2021/05/18/NPmqShZRBLQMKbl.png" alt="2.PNG"></p><h4 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h4><p>在数据选项卡中选择分列<br><img src="https://i.loli.net/2021/05/18/YhCA9O61Wfr3eyi.png" alt="3.PNG"></p><h4 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h4><p>弹出对话框<br><img src="https://i.loli.net/2021/05/18/yjdPbqIUCXugWYw.png" alt="4.PNG"></p><h4 id="第五步"><a href="#第五步" class="headerlink" title="第五步"></a>第五步</h4><p>选择以空格分列，下一步<br><img src="https://i.loli.net/2021/05/18/QWFwGEqOkxPUyAi.png" alt="5.PNG"></p><h4 id="第六步"><a href="#第六步" class="headerlink" title="第六步"></a>第六步</h4><p>选择文本，下一步<br><img src="https://i.loli.net/2021/05/18/OCjx6A9qPrzUpBo.png" alt="6.PNG"></p><h4 id="第七步"><a href="#第七步" class="headerlink" title="第七步"></a>第七步</h4><p>分类成功，在数据列前面插入新的一列<br><img src="https://i.loli.net/2021/05/18/qX1GOtsNbZHku9W.png" alt="7.PNG"></p><h4 id="第八步"><a href="#第八步" class="headerlink" title="第八步"></a>第八步</h4><p>将插入语句放在新插入的表格中<br><img src="https://i.loli.net/2021/05/18/bSRaBv7M1eYVmwt.png" alt="8.PNG"></p><h4 id="第九步"><a href="#第九步" class="headerlink" title="第九步"></a>第九步</h4><p>使用CONCATENATE函数将表格中单列的数据合并在一起，使用’,’会出现问题<br><img src="https://i.loli.net/2021/05/18/AiZv6eCln9RqMdr.png" alt="9.PNG"></p><h4 id="第十步"><a href="#第十步" class="headerlink" title="第十步"></a>第十步</h4><p>使用下面的符号代替<br><img src="https://i.loli.net/2021/05/18/8RZsB5WkgUFn4ra.png" alt="10.PNG"></p><h4 id="第十一步"><a href="#第十一步" class="headerlink" title="第十一步"></a>第十一步</h4><p>多个列，双击<br><img src="https://i.loli.net/2021/05/18/VLxeiMt5nhwI4JG.png" alt="11.PNG"></p><h4 id="第十二步"><a href="#第十二步" class="headerlink" title="第十二步"></a>第十二步</h4><p>将]替换为’<br><img src="https://i.loli.net/2021/05/18/f6QvxSOnADIrcy1.png" alt="12.PNG"></p><h4 id="第十三步"><a href="#第十三步" class="headerlink" title="第十三步"></a>第十三步</h4><p>将[替换为’<br><img src="https://i.loli.net/2021/05/18/hqw1KejASvu2nUH.png" alt="13.PNG"></p><h4 id="第十四步"><a href="#第十四步" class="headerlink" title="第十四步"></a>第十四步</h4><p>替换完成后，直接复制粘贴，粘贴文本！<br><img src="https://i.loli.net/2021/05/18/UyFgCezo1dOiS9l.png" alt="14.PNG"></p>]]></content>
      
      
      <categories>
          
          <category> 生活小妙招 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小妙招 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oracle第二十三天</title>
      <link href="2021/05/19/oracle-di-er-shi-san-tian/"/>
      <url>2021/05/19/oracle-di-er-shi-san-tian/</url>
      
        <content type="html"><![CDATA[<h1 id="Oracle第二十三天"><a href="#Oracle第二十三天" class="headerlink" title="Oracle第二十三天"></a>Oracle第二十三天</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天的内容接昨天的序列笔记，下午讲了索引，听完之后直接死亡了o(╯□╰)o</p><h4 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h4><p>所谓CACHE值，指的是在最小最大范围之内，一次循环所能生成的最多的序列号的个数</p><h5 id="特别说明："><a href="#特别说明：" class="headerlink" title="特别说明："></a>特别说明：</h5><pre class=" language-shell"><code class="language-shell">--循环序列在创建时，缓存值限定在：每次循环产生的序列号个数以内，--非循环序列缓存值设定没有限定，但实际缓存受所剩序列号影响。CREATE SEQUENCE SEQ_aaSTART WITH 2INCREMENT BY 3MINVALUE 1MAXVALUE 10CACHE 3CYCLE ; SELECT SEQ_aa.NEXTVAL FROM DUAL;</code></pre><pre class=" language-shell"><code class="language-shell">2 5 81 4 7 101 4 7 10</code></pre><pre class=" language-shell"><code class="language-shell">CREATE SEQUENCE SEQ_BBSTART WITH 2INCREMENT BY 3MINVALUE 1MAXVALUE 10CACHE 5CYCLE ; SELECT SEQ_BB.NEXTVAL FROM DUAL;---ERROR</code></pre><pre class=" language-shell"><code class="language-shell">CREATE SEQUENCE SEQ_DDSTART WITH 2INCREMENT BY 3MINVALUE 1MAXVALUE 10CACHE 2; SELECT SEQ_DD.NEXTVAL FROM DUAL;</code></pre><p>循环序列第二次循环的起始值：递增序列以最小值开始，递减序列以最大值开始<br>（start with 为启动序号，只决定第一次循环的第一个值）</p><pre class=" language-shell"><code class="language-shell">CREATE SEQUENCE SEQ_EESTART WITH 10INCREMENT BY -3MINVALUE 1MAXVALUE 10NOCACHECYCLE ;SELECT SEQ_EE.NEXTVAL FROM DUAL;</code></pre><pre class=" language-shell"><code class="language-shell">CREATE SEQUENCE SEQ_FFSTART WITH 8INCREMENT BY -3MINVALUE 1MAXVALUE 10NOCACHECYCLE ;SELECT SEQ_FF.NEXTVAL FROM DUAL;</code></pre><p>修改语法：</p><pre class=" language-shell"><code class="language-shell">ALTER SEQUENCE SEQ_NAME CYCLE; --修改循环ALTER SEQUENCE SEQ_RR MAXVALUE 20;ALTER SEQUENCE SEQ_RR CYCLE;CREATE SEQUENCE SEQ_RRSTART WITH 2INCREMENT BY 3MINVALUE 1MAXVALUE 10CACHE 2; SELECT SEQ_RR.NEXTVAL FROM DUAL;ALTER SEQUENCE SEQ_ NAME INCREMENT BY 3; --修改涨幅</code></pre><p>ALTER SEQUENCE SEQ_RR INCREMENT BY 2; </p><h5 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h5><p>序列的选项中，无法直接调整初始值，只能删除后重建</p><h4 id="删除语法："><a href="#删除语法：" class="headerlink" title="删除语法："></a>删除语法：</h4><pre class=" language-shell"><code class="language-shell">DROP SEQUENCE SEQ_ NAME;DROP SEQUENCE SEQ_RR;</code></pre><p>1.CACHE值小于CYCLE值（缓存序号个数小于每次产生序号的个数）<br>2.未设置起始值时，默认递增序列从最小值开始，递减序列从最大值开始<br>3.涨幅必须是非零整数</p><pre class=" language-shell"><code class="language-shell">CREATE SEQUENCE SEQ_QQSTART WITH 2INCREMENT BY 0.3MINVALUE 1MAXVALUE 10CACHE 2; --ERROR</code></pre><p>4.若要指定起始值，起始值必须在最小值与最大值之间</p><p>5.若未指定最大值和最小值 递增时：最小值是1 最大值是10^27 递减时：最小值是-10^27 最大值是 -1</p><p>6.ABS(INCREMNET)&lt;=ABS(MAXVALUE-MINVALUE)</p><pre class=" language-shell"><code class="language-shell">CREATE SEQUENCE SEQ_QQSTART WITH 2INCREMENT BY 10MINVALUE 1MAXVALUE 10CACHE 2;--ERROR</code></pre><p>7.缓存值尽量设置大一些，系统不忙时缓存序列号</p><pre class=" language-shell"><code class="language-shell">--默认的涨幅为 1CREATE SEQUENCE SEQ_TT;SELECT SEQ_TT.NEXTVAL FROM DUAL;</code></pre><p>起始值为1，涨幅为1，最小值为1，最大值为10^27，缓存20个的非循环递增序列</p><pre class=" language-shell"><code class="language-shell">CREATE TABLE XUESHENG(SNO NUMBER,SNAME VARCHAR2(20));CREATE SEQUENCE SEQ_XS;INSERT INTO XUESHENG values(SEQ_XS.NEXTVAL,'C')SELECT * FROM XUESHENG;CREATE SEQUENCE SEQ_XS1;SELECT SEQ_XS1.NEXTVAL FROM DUAL; --10  5   [4]   +1ALTER SEQUENCE SEQ_XS1 INCREMENT BY -6;ALTER SEQUENCE SEQ_XS1 INCREMENT BY 1;</code></pre><hr><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><h3 id="1-B-TREE索引-BALANCE-TREE"><a href="#1-B-TREE索引-BALANCE-TREE" class="headerlink" title="1.B-TREE索引  BALANCE-TREE"></a>1.B-TREE索引  BALANCE-TREE</h3><p>（ORACLE的默认索引类型，工作中最常见、使用范围最广的索引）</p><p>语法：</p><pre class=" language-shell"><code class="language-shell">CREATE INDEX IND_NAME ON TB_NAME(COL_NAME);</code></pre><p>适用场景：列基数比较大的时候使用（行业、身高）<br>列基数：该列不重复数据的个数   COUNT(DISTINCT COL)</p><pre class=" language-shell"><code class="language-shell">SELECT DISTINCT JOB FROM EMP;</code></pre><p>根块：索引的顶级块，指向下一节点<br>分支块：包含下一节点的信息，指向下一分支块或者是叶块<br>叶块：存放索引的入口数据</p><pre class=" language-shell"><code class="language-shell">CREATE INDEX IND_EMPSAL ON EMP(SAL);SELECT * FROM EMP WHERE SAL>2500;</code></pre><h4 id="2-位图索引-（位图-ROWID"><a href="#2-位图索引-（位图-ROWID" class="headerlink" title="2.位图索引 （位图+ROWID)"></a>2.位图索引 （位图+ROWID)</h4><p>说明：位图索引在创建时，会扫描整张表，为索引列的每个取值建立一个不重复的位图（BITMAP）来描述该取值</p><p>语法：</p><pre class=" language-shell"><code class="language-shell">CREATE BITMAP INDEX IND_NAME ON TB_NAME(COL_NAME);</code></pre><pre class=" language-shell"><code class="language-shell">create BITMAP INDEX IND_EMPDEPTNO ON EMP(DEPTNO);SELECT * FROM EMP WHERE DEPTNO=10;</code></pre><p>适用场景：列基数比较小的时候使用（性别、婚姻状况）</p><h4 id="3-反向键索引（简称：反向索引）"><a href="#3-反向键索引（简称：反向索引）" class="headerlink" title="3.反向键索引（简称：反向索引）"></a>3.反向键索引（简称：反向索引）</h4><p>说明：可以视作一种特殊的B-TREE索引，存储索引列的反向值</p><p>背景：为防止B-TREE索引在某叶上数据量占比过高而使用的一种索引</p><p>语法：</p><pre class=" language-shell"><code class="language-shell">CREATE INDEX IND_NAME ON TB_NAME(COL_NAME) REVERSE;</code></pre><pre class=" language-shell"><code class="language-shell">CREATE INDEX IND_EMPMGR ON EMP(MGR) REVERSE;</code></pre><p>适用场景：原始数据分支不明显但反向数据分支明显的列（身高：集中在一米七一米八）</p><h4 id="4-基于函数的索引"><a href="#4-基于函数的索引" class="headerlink" title="4.基于函数的索引"></a>4.基于函数的索引</h4><p>说明：可以视作一种特殊的B-TREE索引，存储函数处理后的数据<br>背景：在某个字段上以原值建立了索引，但是在筛选时在该字段上经常加函数，导致索引无法生效<br>语法：</p><pre class=" language-shell"><code class="language-shell">CREATE INDEX IND_NAME ON TB_NAME(FUNCTION(COL_NAME));</code></pre><p>适用场景：对某列进行筛选时经常需要配合函数使用（例如查找姓名中的首字母）</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM EMP  WHERE ENAME='SMITH';CREATE INDEX IND_EMPENAME ON EMP(ENAME);SELECT * FROM EMP WHERE UPPER(ENAME)='SMITH';SELECT EMP.*,upper(ename)FROM EMPCREATE INDEX IND_EMP_UPPENAME ON EMP(UPPER(ENAME));</code></pre><h3 id="二、按唯一性（索引列中的数据是否有重复值）"><a href="#二、按唯一性（索引列中的数据是否有重复值）" class="headerlink" title="二、按唯一性（索引列中的数据是否有重复值）"></a>二、按唯一性（索引列中的数据是否有重复值）</h3><h4 id="1-唯一索引-–索引列中不可能出现重复值"><a href="#1-唯一索引-–索引列中不可能出现重复值" class="headerlink" title="1.唯一索引     –索引列中不可能出现重复值"></a>1.唯一索引     –索引列中不可能出现重复值</h4><p>语法：</p><pre class=" language-shell"><code class="language-shell">CREATE UNIQUE INDEX IND_NAME ON TB_NAME(COL_NAME);CREATE UNIQUE INDEX IND_EMPENAME ON EMP(ENAME);drop index ind_empename;</code></pre><pre class=" language-shell"><code class="language-shell">CREATE UNIQUE INDEX IND_EMPJOB ON EMP(JOB);--ERRORINSERT INTO EMP (EMPNO,ENAME)VALUES(5555,'SMITH');--违反唯一约束条件CREATE UNIQUE INDEX IND_EMPENAME1 ON EMP(upper(ENAME));CREATE UNIQUE INDEX IND_EMPENAME2 ON EMP(ename) reverse;create  unique bitmap index ind_empjob on emp(job);--error</code></pre><h4 id="注意点："><a href="#注意点：" class="headerlink" title="注意点："></a>注意点：</h4><p>1）B-TREE索引可以建立唯一索引，位图索引不能建立唯一索引<br>2）如果在某列上建立了唯一约束或主键约束，ORACLE会自动在该列上建立一个同名的唯一索引</p><pre class=" language-shell"><code class="language-shell">ALTER TABLE EMP ADD CONSTRAINT UN_EMP_ENAME UNIQUE (ENAME);DROP INDEX UN_EMP_ENAME;</code></pre><h4 id="2-非唯一索引-–索引列中可能出现重复值"><a href="#2-非唯一索引-–索引列中可能出现重复值" class="headerlink" title="2.非唯一索引 –索引列中可能出现重复值"></a>2.非唯一索引 –索引列中可能出现重复值</h4><p>语法：</p><pre class=" language-shell"><code class="language-shell">CREATE INDEX IND_NAME ON TB_NAME(COL_NAME);</code></pre><h3 id="三、按列的个数（索引覆盖的列的个数）"><a href="#三、按列的个数（索引覆盖的列的个数）" class="headerlink" title="三、按列的个数（索引覆盖的列的个数）"></a>三、按列的个数（索引覆盖的列的个数）</h3><h4 id="1-单列索引-–基于一个列建立的索引"><a href="#1-单列索引-–基于一个列建立的索引" class="headerlink" title="1.单列索引  –基于一个列建立的索引"></a>1.单列索引  –基于一个列建立的索引</h4><p>语法：</p><pre class=" language-shell"><code class="language-shell">CREATE INDEX IND_NAME ON TB_NAME(COL_NAME);</code></pre><h4 id="2-复合索引-也称为联合索引）-–基于两个或两个以上列建立的索引"><a href="#2-复合索引-也称为联合索引）-–基于两个或两个以上列建立的索引" class="headerlink" title="2.复合索引(也称为联合索引） –基于两个或两个以上列建立的索引"></a>2.复合索引(也称为联合索引） –基于两个或两个以上列建立的索引</h4><p>语法：</p><pre class=" language-shell"><code class="language-shell">CREATE INDEX IND_NAME ON TB_NAME(COL_NAME1,COL_NAME2...);</code></pre><pre class=" language-shell"><code class="language-shell">CREATE  INDEX IND_EMP_ENAMEDEPTNO1 ON EMP(DEPTNO,ENAME);CREATE  INDEX IND_EMP_ENAMEDEPTNO  ON EMP(ENAME,DEPTNO);SELECT * FROM EMP WHERE DEPTNO=10 AND ENAME='SMITH';</code></pre><h3 id="思考："><a href="#思考：" class="headerlink" title="思考："></a>思考：</h3><p>1.为什么不建议在WHERE筛选中出现隐式转换？</p><ol><li>可能会导致索引失效</li><li>隐式转换可能会产生非预期的效果</li><li>查询效率变低</li></ol><pre class=" language-shell"><code class="language-shell">select * from emp where EMPNO='7369'ALTER TABLE EMP ADD TEL VARCHAR2(5);select * from emp where TEL=1;CREATE INDEX IND_EMPTEL ON EMP(TEL);</code></pre><h4 id="2-索引是越多越好吗？"><a href="#2-索引是越多越好吗？" class="headerlink" title="2.索引是越多越好吗？"></a>2.索引是越多越好吗？</h4><ol><li>数据量小的表不需要索引</li><li>数据变更需要维护索引，更多的索引需要的维护成本更多</li><li>更多的索引需要更多的空间来存储</li></ol><p>对于含有空值的列，<br>如果经常在查询时查询非空值，建议在该列上建立索引；<br>如果经常在查询时查询空值，建议在该列上建立基于函数的索引。</p><pre class=" language-shell"><code class="language-shell">CREATE INDEX IND_EMP_COMM ON emp(COMM);SELECT * FROM DEPT WHERE COMM=300;SELECT * FROM EMP WHERE COMM IS NULL;CREATE INDEX IND_EMP_NVLCOMM ON EMP(NVL(COMM,-1));SELECT * FROM EMP WHERE NVL(COMM,-1)=-1;</code></pre><p>13.对于一般的B-TREE索引，通配符出现在搜索词的首位时不会引用索引</p><pre class=" language-shell"><code class="language-shell">CREATE INDEX IND_EMPENAME ON EMP(ENAME);SELECT * FROM EMP WHERE ENAME LIKE 'S%';</code></pre><p>14.在索引列上使用&lt;&gt; !=号时，或对空值进行判断时，索引不会生效</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM EMP WHERE ENAME<>'SMITH';</code></pre><h4 id="索引的删除"><a href="#索引的删除" class="headerlink" title="索引的删除"></a>索引的删除</h4><p>语法：</p><pre class=" language-shell"><code class="language-shell">DROP INDEX IND_NAME;</code></pre><h4 id="禁用索引的语法："><a href="#禁用索引的语法：" class="headerlink" title="禁用索引的语法："></a>禁用索引的语法：</h4><pre class=" language-shell"><code class="language-shell">ALTER INDEX IND_NAME UNUSABLE;ALTER INDEX IND_EMPENAME UNUSABLE;SELECT * FROM EMP WHERE ENAME='SMITH';</code></pre><h4 id="重建索引的语法："><a href="#重建索引的语法：" class="headerlink" title="重建索引的语法："></a>重建索引的语法：</h4><pre class=" language-shell"><code class="language-shell">ALTER INDEX IND_NAME REBUILD;ALTER INDEX IND_EMPENAME REBUILD;</code></pre><h5 id="注意！"><a href="#注意！" class="headerlink" title="注意！"></a>注意！</h5><p>【插入完成后统一维护索引】比【一边插入一边维护】的速度要快</p><h3 id="索引数据字典"><a href="#索引数据字典" class="headerlink" title="索引数据字典"></a>索引数据字典</h3><p>所有索引</p><pre class=" language-shell"><code class="language-shell">SELECT INDEX_NAME,     --索引名称       INDEX_TYPE,     --索引类型       TABLE_NAME,     --表名       UNIQUENESS,     --是否唯一       STATUS,         --索引状态  VALID 可用的 UNUSABLE 不可用的       TABLESPACE_NAME,--表空间       LOGGING         --是否记录日志  FROM USER_INDEXES WHERE 1=1   AND INDEX_NAME = 'IND_EMPENAME'   AND TABLE_NAME = 'EMP';</code></pre><p>索引列</p><pre class=" language-shell"><code class="language-shell">SELECT INDEX_NAME,   --索引名称       TABLE_NAME,   --表名       COLUMN_NAME,  --列名       COLUMN_POSITION, --字段在索引中的位置       DESCEND       --排序方式  默认ASC  FROM USER_IND_COLUMNS WHERE INDEX_NAME ='IND_EMP_UPPERENAME';CREATE INDEX IND_EMP_ENAMEJOB ON EMP(ENAME,JOB);</code></pre><pre class=" language-shell"><code class="language-shell">CREATE INDEX IND_EMP_UPPERENAME ON EMP(UPPER(ENAME));</code></pre><p>索引函数</p><pre class=" language-shell"><code class="language-shell">SELECT INDEX_NAME,       TABLE_NAME,       COLUMN_EXPRESSION  FROM USER_IND_EXPRESSIONS WHERE INDEX_NAME ='IND_EMP_UPPERENAME';</code></pre>]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据第一阶段 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oracle第二十二天</title>
      <link href="2021/05/18/oracle-di-22-tian/"/>
      <url>2021/05/18/oracle-di-22-tian/</url>
      
        <content type="html"><![CDATA[<h1 id="Oracle第二十二天"><a href="#Oracle第二十二天" class="headerlink" title="Oracle第二十二天"></a>Oracle第二十二天</h1><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>今天上午讲了视图，下午讲了序列的一点点内容</p><h3 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h3><p>语法</p><pre class=" language-shell"><code class="language-shell">CREATE [OR REPLACE] VIEW V_viewname [(别名1,别名2...)] AS  SQL语句[WITH CHECK OPTION]  --检查  --可读写视图[WITH READ ONLY] ;  --只读</code></pre><p>基表：视图的来源表</p><h4 id="视图举例："><a href="#视图举例：" class="headerlink" title="视图举例："></a>视图举例：</h4><p>创建一个视图，内容包含员工信息表中20号部门员工的工号、姓名和工资。 </p><pre class=" language-shell"><code class="language-shell">SELECT EMPNO,ENAME,SAL FROM EMP WHERE DEPTNO = 20;         CREATE VIEW V_EMP20 AS SELECT EMPNO,ENAME,SAL FROM EMP WHERE DEPTNO = 20;      SELECT * FROM V_EMP20; </code></pre><p>创建一个表，内容包含员工信息表中20号部门员工的工号、姓名和工资。</p><pre class=" language-shell"><code class="language-shell">CREATE TABLE EMP20 AS SELECT EMPNO,ENAME,SAL FROM EMP WHERE DEPTNO = 20;SELECT * FROM EMP20;</code></pre><p>删除基表数据，对比视图与表格的区别</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM EMP WHERE ENAME = 'SMITH';DELETE FROM EMP WHERE ENAME = 'SMITH';SELECT * FROM EMP;SELECT * FROM V_EMP20;</code></pre><p>通过视图插入内容，对比视图与基表的结果</p><pre class=" language-shell"><code class="language-shell">INSERT INTO V_EMP20 VALUES(1111,'JS',4400);</code></pre><p>创建一个视图，内容包含员工信息表中20号部门员工的工号、姓名、工资和部门编号。</p><pre class=" language-shell"><code class="language-shell">CREATE VIEW V_EMP21 AS SELECT EMPNO,ENAME,SAL,DEPTNO FROM EMP WHERE DEPTNO = 20 WITH CHECK OPTION;SELECT * FROM V_EMP21;</code></pre><p>通过对视图插入数据内容，对比视图和基表的结果</p><pre class=" language-shell"><code class="language-shell">INSERT INTO V_EMP21 VALUES(4444,'JAVA',4500,20);SELECT * FROM EMP;SELECT * FROM V_EMP21;</code></pre><p>通过删除、修改视图内（有、无）数据内容，对比视图和基表的结果</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM V_EMP21;--删除SELECT * FROM EMP;DELETE FROM V_EMP21 WHERE EMPNO = 4444;--修改UPDATE V_EMP21 SET SAL = 3400 WHERE EMPNO = 7566;</code></pre><pre class=" language-shell"><code class="language-shell">UPDATE EMP SET SAL = 10000 WHERE EMPNO = 7788;SELECT * FROM EMP;SELECT * FROM V_EMP21;</code></pre><p>该视图是基于一个表建立起来的，查询语句中不含函数表达式和分组。<br>1）可以通过对视图中含有的数据进行增删改来达到对基表的增删改；<br>2）对于增加数据，视图本身没有限制，新增的数据只需符合基表的要求（如主键外键）即可。若新增的数据符合视图的定义，则会同时体现在视图和基表上，若不符合视图的定义，新增数据仅会体现在基表上；<br>3）若添加了WITH CHECK OPTION参数，新增的数据必须要符合视图定义的要求;仍可以通过对视图中含有的数据对基表的数据进行删除和修改：<br>4）若添加了WITH READ ONLY参数，该视图只能查询，不能增删改</p><hr><h3 id="序列"><a href="#序列" class="headerlink" title="序列"></a>序列</h3><p>定义：<br>序列是ORACLE提供的一组能够自动增长的序号。<br>常常用来生成每条数据的唯一标识。</p><p>权限要求：GRANT CREATE SEQUENCE TO SCOTT;</p><p>创建语法：</p><pre class=" language-shell"><code class="language-shell"></code></pre><p>CREATE SEQUENCE 序列名称 (SEQ_NAME)<br>[START WITH N ]–初始序号 ；不指定初始值时递增：默认MINVALUE  递减：默认MAXVALUE<br>[INCREMENT BY N] –增长幅度  N为正 递增  N为负  递减<br>[MINVALUE N | NOMINVALUE] –最小值 N | 无最小值<br>[MAXVALUE N | NOMAXVALUE] –最大值 N | 无最大值<br>[CACHE N | NOCACHE] –缓存 N个序号 | 无缓存    默认缓存20个序号  –尽量设置大一点的值<br>[CYCLE | NOCYCLE ;]–循环 达到极值时是否从新循环生成序号</p><p>从一数到十</p><pre class=" language-shell"><code class="language-shell">1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10CREATE SEQUENCE SEQ_ASTART WITH 1INCREMENT BY 1;</code></pre><p>值当前值：CURRVAL<br>下一个值：NEXTVAL</p><h4 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h4><p>1）第一次使用CURRVAL必须先使用一次NEXTVAL<br>1）第一次使用NEXTVAL得到的是序列中的起始值</p><pre class=" language-shell"><code class="language-shell">SELECT SEQ_A.CURRVAL FROM DUAL;SELECT SEQ_A.NEXTVAL FROM DUAL;</code></pre><pre class=" language-shell"><code class="language-shell">CREATE SEQUENCE SEQ_BSTART WITH 1INCREMENT BY 1MINVALUE 1MAXVALUE 10;SELECT SEQ_B.NEXTVAL FROM DUAL;</code></pre><p>最大值与最小值设置，只是给序列框定一个大概的范围，范围内数值不一定全部产生</p><pre class=" language-shell"><code class="language-shell">CREATE SEQUENCE SEQ_CSTART WITH 1INCREMENT BY 2MINVALUE 1MAXVALUE 10;SELECT SEQ_C.NEXTVAL FROM DUAL;CREATE SEQUENCE SEQ_DSTART WITH 10INCREMENT BY -2MINVALUE 2MAXVALUE 20;SELECT SEQ_D.NEXTVAL FROM DUAL;CREATE SEQUENCE SEQ_ESTART WITH 100INCREMENT BY -2MINVALUE 2MAXVALUE 20;---开始值在最小值与最大值之间</code></pre><p>未设置起始值时，递增序列以最小值作为起始值，递减序列以最大值作为起始值</p><pre class=" language-shell"><code class="language-shell">CREATE SEQUENCE SEQ_RINCREMENT BY -2MINVALUE 2MAXVALUE 20;SELECT SEQ_R.NEXTVAL FROM DUAL;CREATE SEQUENCE SEQ_SINCREMENT BY 1MINVALUE 2MAXVALUE 20;SELECT SEQ_S.NEXTVAL FROM DUAL;</code></pre><p>无最大最小值设置/缺省时，递增序列默认最小值：1；递减序列默认最大值：-1；</p><pre class=" language-shell"><code class="language-shell">CREATE SEQUENCE SEQ_FINCREMENT BY -2;SELECT SEQ_F.NEXTVAL FROM DUAL;</code></pre><h1 id="the-end"><a href="#the-end" class="headerlink" title="the end"></a>the end</h1><h2 id="blog-from-codeliuzhan-cn"><a href="#blog-from-codeliuzhan-cn" class="headerlink" title="blog from codeliuzhan.cn"></a>blog from codeliuzhan.cn</h2>]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据第一阶段 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oracle第二十一天</title>
      <link href="2021/05/17/oracle-di-er-shi-yi-tian/"/>
      <url>2021/05/17/oracle-di-er-shi-yi-tian/</url>
      
        <content type="html"><![CDATA[<h1 id="Oeacle第二十一天-2021-05-17"><a href="#Oeacle第二十一天-2021-05-17" class="headerlink" title="Oeacle第二十一天 2021/05/17"></a>Oeacle第二十一天 2021/05/17</h1><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>上午讲了几种约束，下午讲了注释、默认值什么杂七杂八的东西，上周讲的其他约束放在上一篇了</p><hr><h4 id="非空约束"><a href="#非空约束" class="headerlink" title="非空约束"></a>非空约束</h4><p>在已经建好表的基础上建立或取消非空约束</p><pre class=" language-shell"><code class="language-shell">ALTER TABLE TB_NAME MODIFY COL_NAME NOT NULL; --不允许为空ALTER TABLE TB_NAME MODIFY COL_NAME NULL;     --允许为空</code></pre><pre class=" language-shell"><code class="language-shell">alter table emp MODIFY ENAME NOT NULL;SELECT * FROM EMP FOR UPDATE;INSERT INTO EMP (EMPNO,ENAME,SAL) VALUES(8888,'',5)</code></pre><p>在建表的同时建立约束</p><pre class=" language-shell"><code class="language-shell">CREATE TABLE TB_NAME (COL_NAME1 COL_TYPE NOT NULL, COL_NAME2 COL_TYPE,...COL_NAMEN COL_TYPE);</code></pre><pre class=" language-shell"><code class="language-shell">CREATE TABLE XS(SNO NUMBER not null,SNAME VARCHAR2(20),age number);insert into XS VALUES(1,'A',15);SELECT * FROM XS;insert into XS(SNO,SNAME) VALUES(1,'A');</code></pre><pre class=" language-shell"><code class="language-shell">CREATE TABLE TB_NAME (COL_NAME1 COL_TYPE CONSTRAINT CONSTR_NAME NOT NULL, COL_NAME2 COL_TYPE,...COL_NAMEN COL_TYPE);</code></pre><pre class=" language-shell"><code class="language-shell">CREATE TABLE XS(SNO NUMBER CONSTRAINT NN_XS_SNO NOT NULL,SNAME VARCHAR2(20),age number);insert into XS VALUES(1,'A',15);insert into XS(SNAME) VALUES('A');</code></pre><h5 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h5><ol><li>非空约束的建立语法中只有行级约束，没有表级约束</li></ol><h4 id="主键约束"><a href="#主键约束" class="headerlink" title="主键约束"></a>主键约束</h4><p>建表后建立约束</p><pre class=" language-shell"><code class="language-shell">ALTER TABLE TB_NAME ADD CONSTRAINT CONSTR_NAME PRIMARY KEY (COL_NAME);ALTER TABLE XS ADD CONSTRAINT PK_XS_SNO PRIMARY KEY(SNO);</code></pre><pre class=" language-shell"><code class="language-shell">CREATE TABLE XS(SNO NUMBER ,SNAME VARCHAR2(20),age number);</code></pre><pre class=" language-shell"><code class="language-shell">INSERT INTO XS (SNO,SNAME,AGE)VALUES(1,'A',15);INSERT INTO XS (SNO,SNAME,AGE)VALUES(1,'B',15);INSERT INTO XS (SNO,SNAME,AGE)VALUES('','B',15);</code></pre><p>建表时建立约束<br>1.</p><pre class=" language-shell"><code class="language-shell">CREATE TABLE TB_NAME (COL_NAME1 COL_TYPE PRIMARY KEY, --行级约束，无约束名称，sys546546COL_NAME2 COL_TYPE,...COL_NAMEN COL_TYPE);</code></pre><pre class=" language-shell"><code class="language-shell">CREATE TABLE XS(SNO NUMBER PRIMARY KEY,SNAME VARCHAR2(20),age number);</code></pre><p>2.</p><pre class=" language-shell"><code class="language-shell">CREATE TABLE TB_NAME (COL_NAME1 COL_TYPE CONSTRAINT CONSTR_NAME PRIMARY KEY, COL_NAME2 COL_TYPE,...COL_NAMEN COL_TYPE);</code></pre><pre class=" language-shell"><code class="language-shell">CREATE TABLE XS(SNO NUMBER CONSTRAINT PK_XS_SNO PRIMARY KEY,SNAME VARCHAR2(20),age number);INSERT INTO XS (SNO,SNAME,AGE)VALUES(1,'A',15);INSERT INTO XS (SNO,SNAME,AGE)VALUES(1,'B',15);INSERT INTO XS (SNO,SNAME,AGE)VALUES('','B',15);</code></pre><p>3.</p><pre class=" language-shell"><code class="language-shell">CREATE TABLE TB_NAME (COL_NAME1 COL_TYPE,COL_NAME2 COL_TYPE,...COL_NAMEN COL_TYPE,CONSTRAINT CONSTR_NAME PRIMARY KEY (COL_NAME) );</code></pre><pre class=" language-shell"><code class="language-shell">CREATE TABLE XS(SNO NUMBER ,SNAME VARCHAR2(20),age number,CONSTRAINT PK_XS_SNOSNAME PRIMARY KEY (SNO,SNAME));</code></pre><pre class=" language-shell"><code class="language-shell">INSERT INTO XS (SNO,SNAME,AGE)VALUES(1,'A',15);INSERT INTO XS (SNO,SNAME,AGE)VALUES(1,'A',15);INSERT INTO XS (SNO,SNAME,AGE)VALUES(2,'A',15);</code></pre><h5 id="注意：-1"><a href="#注意：-1" class="headerlink" title="注意："></a>注意：</h5><ol><li>一个表中只能存在一个主键约束</li><li>建立了主键约束的字段，会自动建立一个唯一索引</li></ol><h4 id="检查约束"><a href="#检查约束" class="headerlink" title="检查约束"></a>检查约束</h4><pre class=" language-shell"><code class="language-shell">CREATE TABLE XS(SNO NUMBER ,SNAME VARCHAR2(20),age number);</code></pre><p>4.1建表后设立检查约束</p><pre class=" language-shell"><code class="language-shell">ALTER TABLE TB_NAME ADD CONSTRAINT CONSTR_NAME CHECK (CONDITION);ALTER TABLE XS ADD CONSTRAINT CK_XS_AGE CHECK (AGE>18);ALTER TABLE XS ADD CONSTRAINT CK_XS_SNO CHECK (SNO<=40);</code></pre><pre class=" language-shell"><code class="language-shell">SELECT * FROM XS;INSERT INTO XS (SNO,SNAME,AGE)VALUES(1,'A',15);INSERT INTO XS (SNO,SNAME,AGE)VALUES(1,'A',19);INSERT INTO XS (SNO,SNAME)VALUES(41,'A');INSERT INTO XS (SNO,SNAME,AGE)VALUES(41,'A',19);INSERT INTO XS (SNO,SNAME,AGE)VALUES(40,'ABCD',19);ALTER TABLE XS ADD CONSTRAINT CK_XS_SNAME CHECK (LENGTH(SNAME)<=4);ALTER TABLE XS ADD CONSTRAINT CK_XS_SNO CHECK (SNO<=40 and age>18);</code></pre><p>4.2建表时设立检查约束<br>1.</p><pre class=" language-shell"><code class="language-shell">CREATE TABLE TB_NAME (COL_NAME1 COL_TYPE CHECK(CONDITION), COL_NAME2 COL_TYPE,...COL_NAMEN COL_TYPE );</code></pre><pre class=" language-shell"><code class="language-shell">CREATE TABLE XS(SNO NUMBER CHECK (SNO<=40),SNAME VARCHAR2(20) ,age number CHECK (AGE>18));INSERT INTO XS (SNO,SNAME,AGE)VALUES(1,'A',15);INSERT INTO XS (SNO,SNAME,AGE)VALUES(1,'A',19);INSERT INTO XS (SNO,SNAME)VALUES(1,'A');INSERT INTO XS (SNO,SNAME,AGE)VALUES(41,'A',19);SELECT * FROM XS;</code></pre><p>2.</p><pre class=" language-shell"><code class="language-shell">CREATE TABLE TB_NAME (COL_NAME1 COL_TYPE CONSTRAINT CONSTR_NAME CHECK (CONDITION), --行级约束COL_NAME2 COL_TYPE,...COL_NAMEN COL_TYPE );</code></pre><pre class=" language-shell"><code class="language-shell">CREATE TABLE XS(SNO NUMBER CONSTRAINT CK_XS_SNO CHECK (SNO<=40),SNAME VARCHAR2(20) ,age number CONSTRAINT CK_XS_AGE CHECK (AGE>18));</code></pre><p>3.</p><pre class=" language-shell"><code class="language-shell">CREATE TABLE TB_NAME (COL_NAME1 COL_TYPE,COL_NAME2 COL_TYPE,...COL_NAMEN COL_TYPE,CONSTRAINT CONSTR_NAME CHECK (CONDITION) );</code></pre><pre class=" language-shell"><code class="language-shell">CREATE TABLE XS(SNO NUMBER ,SNAME VARCHAR2(20) ,age number,CONSTRAINT CK_XS_SNOAGE CHECK (SNO<=40 AND AGE >18));</code></pre><h5 id="注意：-2"><a href="#注意：-2" class="headerlink" title="注意："></a>注意：</h5><p>1.条件中不允许写子查询</p><pre class=" language-shell"><code class="language-shell">CREATE TABLE sc1(SNO NUMBER constraint ck_sc1_sno check (sno in(select sno from xs)),CNO NUMBER,SCORE number);</code></pre><p>2.行级约束只能针对当前的列，不能引用其他列的检查条件，表级约束没有此限制<br>3.检查约束针对的是非空值，即空值不受检查约束限制</p><h4 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h4><pre class=" language-shell"><code class="language-shell">CREATE TABLE XS(SNO NUMBER CONSTRAINT PK_XS_SNO PRIMARY KEY ,SNAME VARCHAR2(20) ,age number );INSERT INTO XS(sno) values(1);</code></pre><pre class=" language-shell"><code class="language-shell">CREATE TABLE sc1(SNO NUMBER,CNO NUMBER,SCORE number);</code></pre><p>5.1建表后添加外键约束</p><pre class=" language-shell"><code class="language-shell">ALTER TABLE TB_NAME ADD CONSTRAINT CONSTR_NAME FOREIGN KEY  (COL_NAME)  REFERENCES MAIN_TB_NAME(PK_COL_NAME OR UN_COL_NAME);</code></pre><pre class=" language-shell"><code class="language-shell">ALTER TABLE SC1 ADD CONSTRAINT FK_SC1_SNO FOREIGN KEY (SNO) REFERENCES XS(SNO);insert into sc1(sno) values (1);insert into sc1(sno) values (2);delete from xs where sno=1;</code></pre><p>建表时添加外键约束<br>1.</p><pre class=" language-shell"><code class="language-shell">CREATE TABLE TB_NAME (COL_NAME1 COL_TYPE REFERENCES MAIN_TB_NAME (PK_COL_NAME OR UN_COL_NAME), COL_NAME2 COL_TYPE,...COL_NAMEN COL_TYPE);</code></pre><pre class=" language-shell"><code class="language-shell">CREATE TABLE sc1(SNO NUMBER references xs(sno),CNO NUMBER,SCORE number);</code></pre><pre class=" language-shell"><code class="language-shell">CREATE TABLE TB_NAME (COL_NAME1 COL_TYPE CONSTRAINT CONSTR_NAME REFERENCES MAIN_TB_NAME (PK_COL_NAME OR UN_COL_NAME), COL_NAME2 COL_TYPE,...COL_NAMEN COL_TYPE );</code></pre><pre class=" language-shell"><code class="language-shell">CREATE TABLE sc1(SNO NUMBER constraint fk_sc1_sno references xs(sno),CNO NUMBER,SCORE number);</code></pre><p>3.</p><pre class=" language-shell"><code class="language-shell">CREATE TABLE TB_NAME (COL_NAME1 COL_TYPE,COL_NAME2 COL_TYPE,...COL_NAMEN COL_TYPE,CONSTRAINT CONSTR_NAME FOREIGN KEY (COL_NAME) REFERENCES MAIN_TB_NAME (PK_COL_NAME OR UN_COL_NAME)  );</code></pre><pre class=" language-shell"><code class="language-shell">CREATE TABLE sc1(SNO NUMBER ,CNO NUMBER,SCORE number,constraint fk_sc1_sno foreign key (sno) references xs(sno));</code></pre><h5 id="注意：-3"><a href="#注意：-3" class="headerlink" title="注意："></a>注意：</h5><ol><li>以当前表作为子表，用来获取取值范围的另一张表作为主表来说，外键约束是建立在子表上的，而非主表</li><li>外键针对的是非空值，即空值不受外键约束限制</li><li>想要在子表上建立外键约束指向主表的字段，主表上被指定的字段必须是建立过主键约束或唯一约束</li><li>子表中若存在主表中不存在的数据，则试图建立外键时会失败</li><li>子表中想要插入或修改数据，处理后的数据必须存在于主表中，否则会处理失败</li><li>主表中已存在于子表中的内容，想要删除或修改时必须先删除或修改对应的子表内容，否则会处理失败</li></ol><h4 id="约束-删除"><a href="#约束-删除" class="headerlink" title="约束-删除"></a>约束-删除</h4><p>通用语法：</p><pre class=" language-shell"><code class="language-shell">ALTER TABLE TB_NAME DROP CONSTRAINT CONSTR_NAME;ALTER TABLE SC1 DROP CONSTRAINT FK_SC1_SNO;</code></pre><p>非空约束自己独特的删除方式</p><pre class=" language-shell"><code class="language-shell">ALTER TABLE  TB_NAME MODIFY COL_NAME NULL;</code></pre><pre class=" language-shell"><code class="language-shell">CREATE TABLE XS(SNO NUMBER CONSTRAINT NN_XS_SNO NOT NULL,SNAME VARCHAR2(20),age number);INSERT INTO XS(SNAME)VALUES('A')ALTER TABLE XS DROP CONSTRAINT NN_XS_SNO;</code></pre><pre class=" language-shell"><code class="language-shell">ALTER TABLE XS MODIFY SNO NULL;</code></pre><h4 id="约束-重命名"><a href="#约束-重命名" class="headerlink" title="约束-重命名"></a>约束-重命名</h4><pre class=" language-shell"><code class="language-shell">ALTER TABLE TB_NAME RENAME CONSTRAINT OLD_NAME TO NEW_NAME;</code></pre><pre class=" language-shell"><code class="language-shell">CREATE TABLE XS(SNO NUMBER CONSTRAINT PK_XS_SNO PRIMARY KEY ,SNAME VARCHAR2(20),age number);</code></pre><pre class=" language-shell"><code class="language-shell">ALTER TABLE XS RENAME CONSTRAINT PK_XS_SNO TO PK_XS_SNO1; </code></pre><p>禁用的语法</p><pre class=" language-shell"><code class="language-shell">ALTER TABLE TB_NAME DISABLE CONSTRAINT CONSTR_NAME;ALTER TABLE XS DISABLE CONSTRAINT PK_XS_SNO1;INSERT INTO XS (SNO) VALUES(1);INSERT INTO XS (SNAME) VALUES('A');</code></pre><p>激活的语法</p><pre class=" language-shell"><code class="language-shell">ALTER TABLE TB_NAME ENABLE CONSTRAINT CONSTR_NAME;ALTER TABLE XS ENABLE CONSTRAINT PK_XS_SNO1;</code></pre><h4 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h4><p>1.因为约束的存在，数据库进行DML操作时会额外花费时间用来做数据的验证，<br>且约束不能为查询带来效率上的提升，所以约束的地位渐渐被代码验证的方式所取代。<br>2.使用CREATE TABLE TB_NAME AS SELECT …语法建立一张表时，除了非空，其他的约束都会被忽视。</p><hr><h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><p>定义：<br>对表本身或表中的每个字段添加一段解释说明，使得初次接触该表的开发人员能尽快了解该表。</p><h5 id="体现："><a href="#体现：" class="headerlink" title="体现："></a>体现：</h5><ol><li>表结构描述中、VIEW窗口</li><li>查询结果某行数据纵向展示时</li></ol><h4 id="注释-表"><a href="#注释-表" class="headerlink" title="注释-表"></a>注释-表</h4><p>创建注释：</p><pre class=" language-shell"><code class="language-shell">COMMENT ON TABLE TB_NAME IS '新的注释内容';COMMENT ON TABLE EMP IS '员工信息表';COMMENT ON TABLE EMP IS 员工信息表;--必须以字符串形式显示</code></pre><p>修改注释：</p><pre class=" language-shell"><code class="language-shell">COMMENT ON TABLE TB_NAME IS '新的注释内容';COMMENT ON TABLE EMP IS '员工表';</code></pre><p>删除注释：</p><pre class=" language-shell"><code class="language-shell">COMMENT ON TABLE TB_NAME IS '';COMMENT ON TABLE EMP IS '';COMMENT ON TABLE EMP IS null;--必须以字符串形式显示COMMENT ON TABLE EMP IS '员工的信息表';</code></pre><h4 id="注释-列"><a href="#注释-列" class="headerlink" title="注释-列"></a>注释-列</h4><p>创建注释：</p><pre class=" language-shell"><code class="language-shell">COMMENT ON COLUMN TB_NAME.COL_NAME IS '注释内容';COMMENT ON COLUMN EMP.EMPNO IS '员工编号';COMMENT ON COLUMN EMP.ename IS '员工姓名';COMMENT ON COLUMN EMP.MGR IS '上级领导编号';</code></pre><p>修改注释：</p><pre class=" language-shell"><code class="language-shell">COMMENT ON COLUMN TB_NAME.COL_NAME IS '新的注释内容';COMMENT ON COLUMN EMP.ename IS '姓名';select * FROM EMP;</code></pre><p>删除注释：</p><pre class=" language-shell"><code class="language-shell">COMMENT ON COLUMN TB_NAME.COL_NAME IS '';COMMENT ON COLUMN EMP.ename IS '';</code></pre><h4 id="注意点："><a href="#注意点：" class="headerlink" title="注意点："></a>注意点：</h4><p>1.注释内容是字符型的，注意加英文单引号<br>2.删除注释时用的‘’不能替换为NULL<br>3.添加注释时只能一个一个添加<br>4.使用CREATE TABLE TB_NAME AS SELECT … 创建表时注释会被忽略</p><pre class=" language-shell"><code class="language-shell">CREATE TABLE EMP5 AS SELECT * FROM EMP;SELECT * FROM EMP5;</code></pre><h4 id="注释-数据字典"><a href="#注释-数据字典" class="headerlink" title="注释-数据字典"></a>注释-数据字典</h4><pre class=" language-shell"><code class="language-shell">SELECT * FROM USER_TAB_COMMENTS WHERE TABLE_NAME='EMP'; --表注释信息SELECT * FROM USER_COL_COMMENTS WHERE TABLE_NAME='EMP'; --列注释信息SELECT * FROM USER_TAB_COMMENTS WHERE TABLE_NAME=‘’; --查询表注释信息</code></pre><h4 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h4><p>定义：<br>在某个字段未插入数据的情况下，自动为其插入固定值，这个固定值即默认值。</p><h5 id="注意：-4"><a href="#注意：-4" class="headerlink" title="注意："></a>注意：</h5><p>默认值会在插入数据时未指定该字段内容时生效，若指定该字段插入数据为空值，则默认值设定不会生效<br>默认值的数据类型需与对应字段数据类型相同</p><p>建表时设置默认值的语法:</p><pre class=" language-shell"><code class="language-shell">CREATE TABLE TB_NAME (COL_NAME1 COL_TYPE DEFAULT DEFAULT_VALUE ,COL_NAME2 COL_TYPE DEFAULT DEFAULT_VALUE ,COL_NAME3 COL_TYPE DEFAULT DEFAULT_VALUE ,...COL_NAMEn COL_TYPE DEFAULT DEFAULT_VALUE );</code></pre><p>创建学生表STUD（SNO,SNAME,SEX,RXRQ）分别设置默认值</p><pre class=" language-shell"><code class="language-shell">create TABLE XS(SNO NUMBER DEFAULT 0,SNAME VARCHAR2(20) DEFAULT 'ZHANGSAN',RXSJ DATE DEFAULT SYSDATE);SELECT * FROM XS FOR UPDATE;</code></pre><pre class=" language-shell"><code class="language-shell"></code></pre><p>create TABLE XS(<br>SNO NUMBER DEFAULT ‘A’,<br>SNAME VARCHAR2(20) DEFAULT ‘ZHANGSAN’,<br>RXSJ DATE DEFAULT SYSDATE);–ERROR</p><p>目前而言比较完整的建表语句：</p><pre class=" language-shell"><code class="language-shell">CREATE TABLE TB_NAME (COL_NAME1 COL_TYPE DEFAULT DEFAULT_VALUE CONS_TYPE ,COL_NAME2 COL_TYPE DEFAULT DEFAULT_VALUE CONS_TYPE ,COL_NAME3 COL_TYPE DEFAULT DEFAULT_VALUE CONS_TYPE ,...COL_NAMEn COL_TYPE DEFAULT DEFAULT_VALUE CONS_TYPE );</code></pre><p>创建学生表STUD（SNO,SNAME,SEX,RXRQ）分别设置默认值，将SNO设置为主键，姓名设置为非空；</p><pre class=" language-shell"><code class="language-shell">CREATE TABLE XS(SNO NUMBER DEFAULT 0 CONSTRAINT PK_XS_SNO PRIMARY KEY, SNAME VARCHAR2(20) DEFAULT 'A' NOT NULL, SEX VARCHAR2(20) DEFAULT '男' CONSTRAINT CK_XS_SEX CHECK (SEX='男' OR SEX='女'), RXRQ DATE DEFAULT TRUNC(SYSDATE));SELECT * FROM XS FOR UPDATE;</code></pre><p>已建表后默认值的语法：</p><pre class=" language-shell"><code class="language-shell">CREATE TABLE XS(SNO NUMBER , SNAME VARCHAR2(20), SEX VARCHAR2(20), RXRQ DATE );</code></pre><p>添加默认值：</p><pre class=" language-shell"><code class="language-shell">ALTER TABLE TB_NAME MODIFY COL_NAME DEFAULT DEFAULT_VALUE;alter TABLE XS MODIFY RXRQ DEFAULT TRUNC(SYSDATE);</code></pre><p>修改默认值：</p><pre class=" language-shell"><code class="language-shell">ALTER TABLE TB_NAME MODIFY COL_NAME DEFAULT NEW_DEFAULT_VALUE;alter TABLE XS MODIFY RXRQ DEFAULT TO_DATE('2021-05-16','YYYY-MM-DD');</code></pre><p>删除默认值：</p><pre class=" language-shell"><code class="language-shell">ALTER TABLE TB_NAME MODIFY COL_NAME DEFAULT NULL;alter TABLE XS MODIFY RXRQ DEFAULT NULL;alter TABLE XS MODIFY RXRQ DEFAULT '';SELECT * FROM XS FOR UPDATE;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据第一阶段 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oracle第二十天</title>
      <link href="2021/05/16/oracle-di-er-shi-tian/"/>
      <url>2021/05/16/oracle-di-er-shi-tian/</url>
      
        <content type="html"><![CDATA[<h1 id="Oracle第二十天-DML、DDL和序列"><a href="#Oracle第二十天-DML、DDL和序列" class="headerlink" title="Oracle第二十天 DML、DDL和序列"></a>Oracle第二十天 DML、DDL和序列</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天讲了DDL的语句和DML的merge语句相关的知识点，下午讲了一点序列，以此记录</p><h4 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h4><pre class=" language-shell"><code class="language-shell"> MERGE INTO TB_NAME A --目标表 USING DATA_SOURCE B --数据源 --表、视图、子查询    ON (CONDITION) --关联条件：  WHEN MATCHED THEN --如果能匹配上UPDATE  --对目标表中的旧数据进行更新   SET A.COL1 = B.COL1,A.COL2 = B.COL2 ... WHERE CONDITION –更新条件-以关联条件成立为前提DELETE  --对目标表中的旧数据进行删除 WHERE CONDITION --删除条件-以更新条件成立为前提  WHEN NOT MATCHED THENINSERT (A.COL1,A.COL2....)VALUES (B.COL1,B.COL2....) --将数据源中的新数据插入到目标表 WHERE CONDITION; --插入条件-以关联条件不成立为前提</code></pre><p>测试表：</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM GCURRENT; --当前商品信息SELECT * FROM GCHANGE;  --商品变动信息</code></pre><p>测试内容：<br>1.同时进行了更新和插入的操作（最常用）<br>已有商品更新价格，新商品上架</p><pre class=" language-shell"><code class="language-shell"> merge INTO GCURRENT A USING GCHANGE B    ON (A.GID=B.GID)  WHEN MATCHED THENUPDATE   SET A.PRICE=B.PRICE  WHEN NOT MATCHED THEN INSERT (A.GID,A.GNAME,A.PRICE,A.GCOST,A.GTYPE)VALUES (B.GID,B.GNAME,B.PRICE,B.GCOST,B.GTYPE)</code></pre><p>2.仅更新<br>已有商品更新价格</p><pre class=" language-shell"><code class="language-shell">MERGE INTO GCURRENT AUSING GCHANGE B   ON (A.GID=B.GID) WHEN MATCHED THEN UPDATE   SET A.PRICE=B.PRICE</code></pre><p>3.仅插入<br>新商品上架</p><pre class=" language-shell"><code class="language-shell">MERGE INTO GCURRENT AUSING GCHANGE B   ON (A.GID=B.GID) WHEN NOT MATCHED THENINSERT (A.GID,A.GNAME,A.PRICE,A.GCOST,A.GTYPE)VALUES (B.GID,B.GNAME,B.PRICE,B.GCOST,B.GTYPE)SELECT * FROM GCURRENT; --当前商品信息SELECT * FROM GCHANGE; </code></pre><p>4.在做插入或更新时可以加入条件（彼此互不影响）<br>已达到更新日期的旧商品变更价格，新商品上架，未达到更新日期的不做任何变动</p><pre class=" language-shell"><code class="language-shell">MERGE INTO GCURRENT AUSING GCHANGE B   ON (A.GID=B.GID) WHEN MATCHED THEN UPDATE   SET A.PRICE=B.PRICEWHERE UPDATE_DT<=TO_CHAR(TO_DATE('2020-11-10','YYYY-MM-DD'),'YYYY-MM-DD')WHEN NOT MATCHED THENINSERT (A.GID,A.GNAME,A.PRICE,A.GCOST,A.GTYPE)VALUES (B.GID,B.GNAME,B.PRICE,B.GCOST,B.GTYPE)WHERE UPDATE_DT<=TO_CHAR(SYSDATE,'YYYY-MM-DD')</code></pre><p>5.在MERGE中使用删除的操作<br>用变动表更新商品表，更新时要根据日期来决定是否更新，另外删除标识为Y的商品下架</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM GCURRENT; --当前商品信息SELECT * FROM GCHANGE; </code></pre><pre class=" language-shell"><code class="language-shell">MERGE INTO GCURRENT AUSING GCHANGE B   ON (A.GID=B.GID) WHEN MATCHED THEN UPDATE   SET A.PRICE=B.PRICEWHERE UPDATE_DT<=TO_CHAR(/*TO_DATE('2020-11-10','YYYY-MM-DD')*/SYSDATE,'YYYY-MM-DD')DELETE WHERE DEL_FLAG='Y'</code></pre><pre class=" language-shell"><code class="language-shell">MERGE INTO GCURRENT AUSING GCHANGE B   ON (A.GID=B.GID) WHEN MATCHED THEN UPDATE   SET A.PRICE=B.PRICE/*WHERE UPDATE_DT<=TO_CHAR(\*TO_DATE('2020-11-10','YYYY-MM-DD')*\SYSDATE,'YYYY-MM-DD')*/DELETE WHERE DEL_FLAG='Y'</code></pre><h5 id="MERGE语法的优势："><a href="#MERGE语法的优势：" class="headerlink" title="MERGE语法的优势："></a>MERGE语法的优势：</h5><ol><li>可以同时满足增、删、改的要求，而不必分开书写多个SQL</li><li>可以依据目标表原有数据的情况作出改动<h5 id="劣势："><a href="#劣势：" class="headerlink" title="劣势："></a>劣势：</h5></li><li>增、删、改的合并以及需要判断原表内容，导致运行负担的增加</li><li>暂时无法单独满足删除的要求</li></ol><p>1.对数据源的任何修改，都需要经过提交才能最终生效，提交前若是对所做的修改不满意，<br>可通过回滚来取消修改。若未提交，则做出的修改仅能在当前窗口临时生效，其他会话窗口<br>查不到当前的修改。</p><p>2.无论什么类型的何种DML操作，在操作过程中都会产生回滚日志，以用于操作的回滚或数<br>据的恢复。日志的生成可通过代码指令或参数设置来取消，但该操作非常危险，一旦数据库<br>运行出现错误，若是缺少相应的日志，数据就有可能会丢失。</p><hr><h3 id="DDL"><a href="#DDL" class="headerlink" title="DDL"></a>DDL</h3><h4 id="建表"><a href="#建表" class="headerlink" title="建表"></a>建表</h4><p>基本语法：</p><pre class=" language-shell"><code class="language-shell">CREATE TABLE TB_NAME (COL_NAME1 COL_TYPE,COL_NAME2 COL_TYPE,....COL_NAME3 COL_TYPE);</code></pre><p>特殊语法：</p><pre class=" language-shell"><code class="language-shell">CREATE TABLE TB_NAME AS SELECT ... ;</code></pre><p>–创建一张新表（员工信息及部门名称，部门地址）</p><pre class=" language-shell"><code class="language-shell">CREATE TABLE AA AS SELECT EMP.*,DNAME,LOC FROM EMP JOIN DEPT ON EMP.DEPTNO=DEPT.DEPTNOSELECT * FROM AA;</code></pre><p>–创建表格同时插入员工编号，员工姓名（大写），员工薪资奖金合计值</p><pre class=" language-shell"><code class="language-shell">CREATE TABLE AB AS SELECT EMPNO,UPPER(ENAME) AS UP_ENAME,SAL+NVL(COMM,0) AS SALCOMM FROM EMP;SELECT * FROM AC;CREATE TABLE AC AS SELECT EMPNO,UPPER(ENAME) AS UP_ENAME,SAL+NVL(COMM,0) AS SALCOMM FROM EMP WHERE 1=0;</code></pre><h4 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h4><ol><li>该语法用于基于某查询建立新表，查询结果会作为新表的数据一并插入到表中；</li><li>如果仅是复制某表的表结构，不要数据，可在SELECT语句中添加WHERE 1=0条件；</li><li>如果SELECT子句中出现函数、常量等非原始字段，要为该列添加别名。</li></ol><h4 id="建立备份表的方法："><a href="#建立备份表的方法：" class="headerlink" title="建立备份表的方法："></a>建立备份表的方法：</h4><p>1.获取原表的建表语句，修改表名后执行，再将数据从原表中查询出来插入到备份表中；</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM EMP</code></pre><p>建表语句：表名—右键—VIEW—VIEW SQL<br>插入数据语句：查询结果—右键—Export Results—Sql file—导出为SQL文件 (适用于数据量少)<br>2.执行执行CREATE TABLE 备份表 AS SELECT * FROM 原表;</p><pre class=" language-shell"><code class="language-shell">CREATE TABLE EMP6 AS SELECT * FROM EMP;SELECT * FROM EMP6;--适用于数据量多</code></pre><p>备份表的命名规范：<br>原表名_BAK日期<br>（日期指进行备份操作的日期或者是数据的日期）</p><h4 id="建表的一些注意点"><a href="#建表的一些注意点" class="headerlink" title="建表的一些注意点"></a>建表的一些注意点</h4><p>1）每一个列必须要紧跟一个字段属性<br>2）同一表中，列与列之间是不能重名的<br>3）同一个用户下不能出现重复的表名<br>4）不同表下列名可以重复，不同用户下表名可以重复<br>5）每个表都有所属的一个用户</p><hr><h3 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h3><p>约束</p><pre class=" language-shell"><code class="language-shell">insert INTO EMP (EMPNO,ENAME,DEPTNO) VALUES (5555,'A',50);</code></pre><p>按照约束效果的不同分为以下五种（括号内为命名前缀）<br>1.唯一约束（UN_）<br>字段中不能出现重复的非空数据<br>2.非空约束（NN_）<br>字段中不能出现空值<br>3.主键约束（PK_）<br>字段中既不能出现空值，又不能出现重复值<br>4.检查约束（CK_）<br>自定义约束内容（类似于WHERE中的条件）<br>5.外键约束（FK_）<br>字段的取值范围取决于另一张表的某字段</p><p>根据约束建立时是否随同字段一同声明分为行级约束与表级约束<br>行级约束：<br>声明字段名与字段属性的同时，紧随其后直接声明约束<br>表级约束：<br>所有的字段与字段属性声明结束后，再单独声明约束</p><h4 id="建立约束的注意点："><a href="#建立约束的注意点：" class="headerlink" title="建立约束的注意点："></a>建立约束的注意点：</h4><ol><li>同一用户下不能出现重复的约束名</li><li>表删除时，该表下的所有约束也会一并删除</li><li>若表中某字段上已存在违反约束的数据，则约束不能顺利建立</li><li>约束可以在表建完后再单独建立</li><li>一个约束可以建在一个字段上，也可建立在多个字段上</li></ol><p>1.唯一约束<br>1.1已经建完表后建立约束的语法：</p><pre class=" language-shell"><code class="language-shell">ALTER TABLE TB_NAME ADD CONSTRAINT CONSTR_NAME UNIQUE(COL_NAME);ALTER TABLE EMP ADD CONSTRAINT UN_EMP_ENAME1 UNIQUE (ENAME);</code></pre><pre class=" language-shell"><code class="language-shell">INSERT INTO EMP(EMPNO,ENAME) VALUES (4445,'')ALTER TABLE EMP DROP CONSTRAINT UN_EMP_ENAME;SELECT * FROM EMP FOR UPDATE;</code></pre><p>1.2建表的同时，将约束一并建立的语法<br>1.</p><pre class=" language-shell"><code class="language-shell">CREATE TABLE TB_NAME (COL_NAME1 COL_TYPE UNIQUE, --行级约束  （系统自动分配约束名称）COL_NAME2 COL_ TYPE,...COL_NAMEN COL_ TYPE );</code></pre><pre class=" language-shell"><code class="language-shell">CREATE TABLE XS(SNO NUMBER UNIQUE,SNAME VARCHAR2(20));INSERT INTO XS VALUES(1,'A');</code></pre><p>2.</p><pre class=" language-shell"><code class="language-shell">CREATE TABLE TB_NAME (COL_NAME1 COL_TYPE CONSTRAINT CONSTR_NAME UNIQUE, COL_NAME2 COL_TYPE,...COL_NAMEN COL_TYPE );</code></pre><pre class=" language-shell"><code class="language-shell">CREATE TABLE XS(SNO NUMBER CONSTRAINT UN_XS_SNO UNIQUE,SNAME VARCHAR2(20));INSERT INTO XS VALUES(1,'A');</code></pre><p>3.</p><pre class=" language-shell"><code class="language-shell">CREATE TABLE TB_NAME (COL_NAME1 COL_TYPE,COL_NAME2 COL_TYPE,...COL_NAMEN COL_TYPE,CONSTRAINT CONSTR_NAME UNIQUE(COL_NAME1) );</code></pre><pre class=" language-shell"><code class="language-shell">CREATE TABLE XS(SNO NUMBER ,SNAME VARCHAR2(20),CONSTRAINT UN_XS_SNO UNIQUE (SNO));INSERT INTO XS VALUES(1,'A');</code></pre><pre class=" language-shell"><code class="language-shell">CREATE TABLE XS(SNO NUMBER ,SNAME VARCHAR2(20),CONSTRAINT UN_XS_SNO1 UNIQUE (SNO,SNAME));INSERT INTO XS VALUES(2,'A');INSERT INTO XS VALUES(1,'B');INSERT INTO XS VALUES(2,'');SELECT * FROM XS;</code></pre><h4 id="注意：-1"><a href="#注意：-1" class="headerlink" title="注意："></a>注意：</h4><ol><li>若是唯一约束建立在多个字段上，以这些字段内容的组合是否重复来作为是否违反唯一约束的标准</li><li>建立了唯一约束的字段上会自动建立一个唯一索引</li><li>唯一约束针对的是非空数据，即允许有多个空值存在</li></ol>]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据第一阶段 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oracle第十九天</title>
      <link href="2021/05/13/oracle-di-shi-jiu-tian/"/>
      <url>2021/05/13/oracle-di-shi-jiu-tian/</url>
      
        <content type="html"><![CDATA[<h1 id="Oracle第十九天-DML"><a href="#Oracle第十九天-DML" class="headerlink" title="Oracle第十九天 DML"></a>Oracle第十九天 DML</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>中间跳了四天准备考试，今天学习了关于DML的知识点，关于ISNERT,UPDATE等</p><p>语法：</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM TB_NAME FOR UPDATE; --全局修改SELECT * FROM TB_NAME WHERE CONDITION FOR UPDATE; --部分修改</code></pre><p>语句执行后，目标表的状态即由不可解锁转为可解锁状态，<br>同时【提交】和【回滚】按钮开放，此时可以通过查询结果上方的小锁对表解锁，<br>解锁后可直接在查询结果中进行修改，修改结束后点击绿色对勾表示修改完成，<br>再点击小锁使表回到锁定状态，最后点击【提交】按钮使修改生效或点击【回滚】按钮取消刚才的修改。</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM EMP FOR UPDATE;SELECT * FROM EMP WHERE ENAME='SMITH' FOR UPDATE;</code></pre><h4 id="应用场景："><a href="#应用场景：" class="headerlink" title="应用场景："></a>应用场景：</h4><p>1.测试时为了验证代码的准确性，小范围临时修改数据，一般验证结束后需要再改回；<br>2.生产环境非常小的修改，不值得重新跑批程序；（一般很少）<br>3.客户通过EXCEL表格提供少量数据，要求导入到数据库中，可通过该方法直接复制粘贴到表中。<br>总之：范围小、数据少、临时（非常规）</p><h5 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h5><ol><li>操作简单；</li><li>可以同时满足增、删、改三方面的需求。</li></ol><h5 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h5><ol><li>所做操作不能留下痕迹，不方便后续回顾；</li><li>同时对大量数据操作时会有崩溃的危险；</li><li>必须依赖特定的数据库操作工具。</li></ol><h4 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h4><p>1.单条数据的插入-录入确定内容</p><pre class=" language-shell"><code class="language-shell">INSERT INTO TB_NAME (COL_LIST) VALUES (DATA_LIST);INSERT INTO EMP (SAL,ENAME,EMPNO) VALUES (1235,'PEIQI',5);SELECT * FROM EMP;INSERT INTO EMP VALUES (1236,'PEIQI','A',15,SYSDATE,25,5,10);COMMIT;</code></pre><h4 id="语法1注意点："><a href="#语法1注意点：" class="headerlink" title="语法1注意点："></a>语法1注意点：</h4><p>1.该语法每次仅能插入一条数据；<br>2.指定插入的数据可与表结构在数量或顺序上不一致，此时字段列表必须与数据列表在列数、顺序、属性、内容上完全一致，否则会报错；<br>3.若插入的数据在列数、顺序、属性、内容上与表结构完全一致，可在语句中省略字段列表；<br>4.相较于手动插入数据，语法1能够同时承受的数据插入会更多，但不会多出太多，且还是会有崩溃的危险。若数据量较多建议改到命令窗口执行且中间多穿插’【COMMIT; 】命令。</p><h4 id="语法：2-多条数据的插入-插入查询结果"><a href="#语法：2-多条数据的插入-插入查询结果" class="headerlink" title="语法：2.多条数据的插入-插入查询结果"></a>语法：2.多条数据的插入-插入查询结果</h4><pre class=" language-shell"><code class="language-shell">INSERT INTO TB_NAME (COL_LIST)SELECT …;</code></pre><p>–创建 部门信息统计表（DEPTNO,DNAME,DCOUNT,部门人数DSALSUM部门薪资总计）并插入数据</p><pre class=" language-shell"><code class="language-shell">CREATE TABLE BUXXTJB( DEPTNO NUMBER,DNAME VARCHAR2(20),DCOUNT NUMBER,DSALSUM NUMBER);SELECT * FROM BUXXTJB;INSERT INTO BUXXTJB(DEPTNO,DNAME,DCOUNT,DSALSUM)SELECT D.DEPTNO,DNAME,COUNT(1) AS DCOUNT,SUM(SAL) AS 部门薪资总计  from emp E JOIN DEPT D ON E.DEPTNO=D.DEPTNO GROUP BY D.DEPTNO,DNAME</code></pre><p>–创建学生成绩信息统计表（SNO,SNAME,CNOCT,AVG_SC）</p><pre class=" language-shell"><code class="language-shell">CREATE TABLE ABC(SNO VARCHAR2(20),SNAME VARCHAR2(20),CNOCT NUMBER,AVG_SC NUMBER);SELECT * FROM ABC;INSERT INTO ABC (SNO,SNAME,CNOCT,AVG_SC)SELECT S.SNO,SNAME,COUNT(1),AVG(SCORE) FROM STUDENT S JOIN SC    ON S.SNO=SC.SNOGROUP BY S.SNO,SNAME</code></pre><p>–创建课程成绩信息统计表（CNO,CNAME,SNOCT,AVG_SC）</p><pre class=" language-shell"><code class="language-shell">CREATE TABLE AA(CNO VARCHAR2(20),CNAME VARCHAR2(20),SNOCT NUMBER,AVG_SC NUMBER);INSERT INTO AASELECT C.CNO,CNAME,COUNT(SNO),AVG(SCORE)  FROM COURSE C  JOIN SC     ON C.CNO=SC.CNO GROUP BY C.CNO,CNAMESELECT * FROM AA</code></pre><pre class=" language-shell"><code class="language-shell"></code></pre><h5 id="语法2注意点："><a href="#语法2注意点：" class="headerlink" title="语法2注意点："></a>语法2注意点：</h5><ol><li>该语法能够支持同时插入多条数据，数据量的多少取决于后边的查询部分；</li><li>插入数据的列数、顺序、属性、内容完全取决于查询部分；</li><li>指定插入的数据可与表结构在列数或顺序上不一致，<br>此时字段列表必须与数据列表在列数、顺序、属性、内容上完全一致，否则会报错；</li><li>若插入的数据在列数、顺序、属性、内容上与表结构完全一致，可在语句中省略字段列表；</li><li>查询部分可以是完全独立的一部分，所有语法规则完全遵循查询的语法，也因为如此，<br>该语法非常灵活，可通过改变查询部分来改变最终插入的数据。<pre class=" language-shell"><code class="language-shell">SELECT * FROM AA WHERE 1=0;</code></pre></li></ol><h5 id="如何查看表结构"><a href="#如何查看表结构" class="headerlink" title="如何查看表结构"></a>如何查看表结构</h5><p>  1）通过右键菜单DESCRIBE描述来查看<br>  2）SELECT * 直接查询该表<br>  3）通过右键菜单VIEW查看和EDIT编辑来查看表结构<br>  4）在COMMAND WINDOW中 DESC TB_NAME 回车<br>  5）在CMD窗口中连接SQLPLUS DESC TB_NAME 回车</p><h5 id="语法1应用场景："><a href="#语法1应用场景：" class="headerlink" title="语法1应用场景："></a>语法1应用场景：</h5><ol><li>少量确定数据的临时插入；</li><li>程序中少量固定数据的频繁插入。</li></ol><h5 id="语法2应用场景："><a href="#语法2应用场景：" class="headerlink" title="语法2应用场景："></a>语法2应用场景：</h5><p>工作中所有的固定化程序中，无论数据量的大小。</p><p>注：语法2是所有数据插入中效率最快的方法，<br>即便数据量非常大时也会出现效率低的情况，但是相比起来，前两种方法效率会更低。</p><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><p>语法：</p><pre class=" language-shell"><code class="language-shell">DELETE FROM TB_NAME; --全部数据的删除DELETE FROM TB_NAME WHERE CONDITION; --有条件的数据删除</code></pre><p>–删除10号部门的员工</p><pre class=" language-shell"><code class="language-shell">delete FROM EMP WHERE DEPTNO=10SELECT * FROM EMP WHERE DEPTNO=10</code></pre><p>–删除销售部SALES的员工</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM DEPTSELECT * FROM EMPSELECT DEPTNO FROM DEPT WHERE DNAME='SALES'DELETE FROM EMP WHERE DEPTNO=(SELECT DEPTNO FROM DEPT WHERE DNAME='SALES')SELECT * FROM EMP</code></pre><h5 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h5><ol><li>执行删除时，删除语句最好由查询语句变更得到，提交前一定要先确认好删除结果；</li><li>WHERE子句与查询中的WHERE子句用法完全一致。</li></ol><p>数据的插入思想：先删后插-防止数据重复插入<br>举例：<br>建一张表（包含姓名、部门名称、岗位、薪资、工作地点），并多次插入对应数据</p><pre class=" language-shell"><code class="language-shell">CREATE TABLE CCC(ENAME VARCHAR2(20),DNAME VARCHAR2(20),JOB VARCHAR2(20),SAL NUMBER ,LOCC VARCHAR2(20)); DELETE FROM CCC;INSERT INTO CCCSELECT ENAME,DNAME,JOB,SAL,LOC  FROM EMP E JOIN DEPT D ON E.DEPTNO=D.DEPTNO;SELECT * FROM CCC;</code></pre><p>员工薪资信息表每个月更新。<br>建一张表（包括部门名称、人数、薪资合计、平均薪资），并多次插入对应数据。</p><pre class=" language-shell"><code class="language-shell">CREATE TABLE DDD(DNAME VARCHAR2(20),CT NUMBER,S_SAL NUMBER,A_SAL NUMBER);INSERT INTO DDD(DNAME,CT,S_SAL)SELECT DNAME,COUNT(1),SUM(SAL)/*,AVG(SAL)*/  FROM EMP E JOIN DEPT D ON E.DEPTNO=D.DEPTNO GROUP BY DNAME; SELECT * FROM DDD;</code></pre><h5 id="语法：-1"><a href="#语法：-1" class="headerlink" title="语法："></a>语法：</h5><pre class=" language-shell"><code class="language-shell">UPDATE TB_NAME SET COL1 = EXPR1 [,COL2 = EXPR2,....] [WHERE CONDITION];</code></pre><p>–将SMITH调整为40号部门的经理，薪资为3500</p><pre class=" language-shell"><code class="language-shell">UPDATE EMP SET DEPTNO=40,JOB='MANAGER',SAL=3500 WHERE ENAME='SMITH'SELECT * FROM EMP</code></pre><p>–将smith的薪资调整为与FORD的薪资相同</p><pre class=" language-shell"><code class="language-shell">UPDATE EMP SET SAL=(SELECT SAL FROM EMP WHERE ENAME='FORD') WHERE ENAME='SMITH'</code></pre><p>–将所有人的ENAME变更为小写</p><pre class=" language-shell"><code class="language-shell">UPDATE EMP SET ENAME=LOWER(ENAME)</code></pre><h4 id="注意：-1"><a href="#注意：-1" class="headerlink" title="注意："></a>注意：</h4><ol><li>更新后的结果可以是某个固定内容，或是函数处理后的结果，或是运算，或是子查询（单行单列）；</li><li>更新时等号左边是待更新的字段，右边是更新后的结果，顺序不要写反了。</li></ol><p>疑问：<br>1.若是将两个字段对调，是写一个语句同时更新，还是写两个语句分别更新？</p><pre class=" language-shell"><code class="language-shell">UPDATE EMP SET JOB=ENAME,ENAME=JOB;SELECT * FROM EMPUPDATE EMP SET ENAME=JOB;</code></pre><p>2.能否根据不同的条件更新为不同的结果？<br>–销售人员涨薪400，非销售人员涨薪1000</p><pre class=" language-shell"><code class="language-shell">UPDATE EMP SET SAL= CASE WHEN JOB='SALESMAN' THEN SAL+400                         ELSE SAL+1000 END;</code></pre><p>3.使用UPDATE将所有列都更新为空值，是否等同于删除该行数据</p><pre class=" language-shell"><code class="language-shell">UPDATE EMP5 SET EMPNO='',ENAME=NULL,JOB='',MGR='',HIREDATE='',SAL='',COMM='',DEPTNO='' WHERE ENAME='SMITH';SELECT EMP5.*,ROWID FROM EMP5;--AAATSOAAEAAAADTAACDELETE FROM EMP5 WHERE ENAME='SMITH'</code></pre>]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据第一阶段 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oracle42道致命题</title>
      <link href="2021/05/11/zhi-ming-42-ti/"/>
      <url>2021/05/11/zhi-ming-42-ti/</url>
      
        <content type="html"><![CDATA[<h2 id="表连接和子查询的一些练习题"><a href="#表连接和子查询的一些练习题" class="headerlink" title="表连接和子查询的一些练习题"></a>表连接和子查询的一些练习题</h2><pre class=" language-shell"><code class="language-shell">CREATE TABLE students--学生表(sno VARCHAR(10) NOT NULL,--学生编号 sname VARCHAR(20) NOT NULL,--学生姓名ssex VARCHAR(20) NOT NULL,--性别sbirthday VARCHAR(20),--出生日期class VARCHAR(5));--班级CREATE TABLE courses--课程表                (cno VARCHAR(5) NOT NULL,--课程编号 cname VARCHAR(20) NOT NULL,--课程姓名 tno VARCHAR(20) NOT NULL);--教师编号CREATE TABLE scores--成绩表(sno VARCHAR(5) NOT NULL,--学生编号 cno VARCHAR(20) NOT NULL,--课程编号 score NUMERIC(10, 1) NOT NULL);--成绩CREATE TABLE teachers --教师表(tno VARCHAR(5) NOT NULL, --教师编号tname VARCHAR(20) NOT NULL, --教师姓名tsex VARCHAR(20) NOT NULL, --教师性别tbirthday VARCHAR(20) NOT NULL, --教师出生日期prof VARCHAR(20), --教师职位depart VARCHAR(20) NOT NULL);--教师工作单位插入数据INSERT INTO STUDENTS (SNO,SNAME,SSEX,SBIRTHDAY,CLASS) VALUES (108 ,'曾华' ,'男' ,'1977-09-01',95033);INSERT INTO STUDENTS (SNO,SNAME,SSEX,SBIRTHDAY,CLASS) VALUES (105 ,'匡明' ,'男' ,'1975-10-02',95031);INSERT INTO STUDENTS (SNO,SNAME,SSEX,SBIRTHDAY,CLASS) VALUES (107 ,'王丽' ,'女' ,'1976-01-23',95033);INSERT INTO STUDENTS (SNO,SNAME,SSEX,SBIRTHDAY,CLASS) VALUES (101 ,'李军' ,'男' ,'1976-02-20',95033);INSERT INTO STUDENTS (SNO,SNAME,SSEX,SBIRTHDAY,CLASS) VALUES (109 ,'王芳' ,'女' ,'1975-02-10',95031);INSERT INTO STUDENTS (SNO,SNAME,SSEX,SBIRTHDAY,CLASS) VALUES (103 ,'陆君' ,'男' ,'1974-06-03',95031);INSERT INTO COURSES(CNO,CNAME,TNO)VALUES ('3-105' ,'计算机导论',825);INSERT INTO COURSES(CNO,CNAME,TNO)VALUES ('3-245' ,'操作系统' ,804);INSERT INTO COURSES(CNO,CNAME,TNO)VALUES ('6-166' ,'数据电路' ,856);INSERT INTO COURSES(CNO,CNAME,TNO)VALUES ('9-888' ,'高等数学' ,100);INSERT INTO COURSES(CNO,CNAME,TNO)VALUES ('6-106' ,'数据库基础' ,825);INSERT INTO SCORES(SNO,CNO,score)VALUES (103,'3-245',86);INSERT INTO SCORES(SNO,CNO,score)VALUES (105,'3-245',75);INSERT INTO SCORES(SNO,CNO,score)VALUES (109,'3-245',68);INSERT INTO SCORES(SNO,CNO,score)VALUES (103,'3-105',92);INSERT INTO SCORES(SNO,CNO,score)VALUES (105,'3-105',88);INSERT INTO SCORES(SNO,CNO,score)VALUES (109,'3-105',76);INSERT INTO SCORES(SNO,CNO,score)VALUES (101,'3-105',64);INSERT INTO SCORES(SNO,CNO,score)VALUES (107,'3-105',91);INSERT INTO SCORES(SNO,CNO,score)VALUES (108,'3-105',78);INSERT INTO SCORES(SNO,CNO,score)VALUES (101,'6-166',85);INSERT INTO SCORES(SNO,CNO,score)VALUES (107,'6-106',79);INSERT INTO SCORES(SNO,CNO,score)VALUES (108,'6-166',81);INSERT INTO TEACHERS(TNO,TNAME,TSEX,TBIRTHDAY,PROF,DEPART) VALUES (804,'李诚','男','1958-12-02','副教授','计算机系');INSERT INTO TEACHERS(TNO,TNAME,TSEX,TBIRTHDAY,PROF,DEPART) VALUES (856,'张旭','男','1969-03-12','讲师','电子工程系');INSERT INTO TEACHERS(TNO,TNAME,TSEX,TBIRTHDAY,PROF,DEPART) VALUES (825,'王萍','女','1972-05-05','助教','计算机系');INSERT INTO TEACHERS(TNO,TNAME,TSEX,TBIRTHDAY,PROF,DEPART) VALUES (831,'刘冰','女','1977-08-14','助教','电子工程系');commit;select * from students;select * from courses; select * from scores;select * from teachers;</code></pre><p>试题<br>1、 查询Student表中的所有记录的Sname、Ssex和Class列。</p><pre class=" language-shell"><code class="language-shell">SELECT SNAME,SSEX,CLASS FROM STUDENTS;</code></pre><p>2、 查询教师所有的单位。即不重复的Depart列.*</p><pre class=" language-shell"><code class="language-shell">SELECT DISTINCT DEPART FROM TEACHERS;</code></pre><p>3、 查询Student表的所有记录。</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM STUDENTS;</code></pre><p>4、 查询Score表中成绩在60到80之间的所有记录，包含60,80。</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM SCORES WHERE SCORE BETWEEN 60 AND 80;</code></pre><p>5、 查询Score表中成绩为85，86或88的记录。</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM SCORES WHERE SCORE IN(85,86,88);</code></pre><p>6、 查询StudenSt表中“95031”班或性别为“女”的同学记录。</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM STUDENTS WHERE CLASS='95031' OR SSEX='女';</code></pre><p>7、 以class降序查询Student表的所有记录。</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM STUDENTS ORDER BY CLASS DESC;</code></pre><p>8、 以Cno升序、score降序查询ScoreS表的所有记录。</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM SCORES ORDER BY CNO ASC,SCORE DESC;</code></pre><p>9、 查询“95031”班的学生人数。</p><pre class=" language-shell"><code class="language-shell">SELECT COUNT(1) AS 人数 FROM STUDENTS WHERE CLASS='95031'</code></pre><p>10、查询Score表中的最高分的学生学号和课程号。</p><pre class=" language-shell"><code class="language-shell">SELECT SNO,CNO FROM SCORES WHERE SCORE =(SELECT MAX(SCORE) FROM SCORES)</code></pre><p>11、查询‘3-105’号课程的平均分。</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM SCORES;SELECT AVG(SCORE) FROM SCORES WHERE CNO='3-105';</code></pre><p>12、查询Score表中至少有5名学生选修的并以3开头的课程的平均分数</p><pre class=" language-shell"><code class="language-shell">SELECT AVG(SCORE)  FROM SCORES WHERE CNO LIKE'3%' GROUP BY CNOHAVING COUNT(1) >=5</code></pre><p>13、查询最低分大于70，最高分小于90的Sno列。</p><pre class=" language-shell"><code class="language-shell">SELECT SNO  FROM SCORES GROUP BY SNOHAVING MIN(SCORE)>70 AND MAX(SCORE)<90;SELECT * FROM SCORES;</code></pre><p>14、查询所有学生的Sname、Cno和score列。</p><pre class=" language-shell"><code class="language-shell">SELECT SNAME,CNO,SCORE  FROM STUDENTS S  JOIN SCORES SC    ON S.SNO=SC.SNO</code></pre><p>15、查询所有学生的Sno、Cname和score列。</p><pre class=" language-shell"><code class="language-shell">SELECT SNO,CNAME,SCORE  FROM SCORES SC  JOIN COURSES C    ON SC.CNO=C.CNO</code></pre><p>16、查询每个班级的平均分。</p><pre class=" language-shell"><code class="language-shell">SELECT CLASS,ROUND(AVG(score),2) AS AVG_SC  FROM STUDENTS S  JOIN SCORES SC    ON S.SNO=SC.SNO GROUP BY CLASS</code></pre><p>17、查询“95033”班的各科课程的平均分。</p><pre class=" language-shell"><code class="language-shell">SELECT CNO,AVG(SCORE)  FROM STUDENTS S  JOIN SCORES SC    ON S.SNO=SC.SNO AND S.CLASS='95033' GROUP BY CNO;</code></pre><p>–查询“95033”班所选的课程的平均分。</p><pre class=" language-shell"><code class="language-shell">SELECT CNO  FROM STUDENTS S   JOIN SCORES SC    ON S.SNO=SC.SNO AND S.CLASS='95033'SELECT * FROM STUDENTS;SELECT * FROM SCORES;SELECT AVG(SCORE),CNO  FROM SCORES WHERE CNO IN(SELECT CNO                FROM STUDENTS S                 JOIN SCORES SC                  ON S.SNO=SC.SNO AND S.CLASS='95033') GROUP BY CNO</code></pre><p>18、假设使用如下命令建立了一个grade表：</p><pre class=" language-shell"><code class="language-shell">create table grades(  low number(3,0),  upp number(3),  rank char(2));insert into grades values(90,100,'A');insert into grades values(80,89,'B');insert into grades values(70,79,'C');insert into grades values(60,69,'D');insert into grades values(0,59,'E');commit;select * from grades; </code></pre><p>现查询所有同学的Sno、Cno和rank列。</p><pre class=" language-shell"><code class="language-shell">SELECT SNO,CNO,RANK  FROM SCORES SC  JOIN GRADES G    ON SC.SCORE BETWEEN LOW AND UPP ;</code></pre><p>19、查询选修“3-105”课程的学生成绩高于“109”号同学3-105成绩的所有同学的记录。</p><pre class=" language-shell"><code class="language-shell">SELECT SCORE FROM SCORES WHERE SNO='109' AND CNO='3-105'SELECT S.*  FROM STUDENTS S  JOIN SCORES SC    ON S.SNO=SC.SNO   AND CNO='3-105'   AND SCORE>(SELECT SCORE FROM SCORES WHERE SNO='109' AND CNO='3-105')</code></pre><p>20、查询score中选学一门以上课程的同学中分数为不是自己的最高分成绩的记录。</p><pre class=" language-shell"><code class="language-shell">SELECT SC.*  FROM SCORES SC  JOIN(SELECT SNO,MAX(SCORE) AS MAX_SC FROM SCORES GROUP BY SNO HAVING COUNT(1)>1) SC1    ON SC.SNO=SC1.SNO WHERE SCORE<>MAX_SC;</code></pre><pre class=" language-shell"><code class="language-shell">SELECT *  FROM (SELECT SCORES.*,               ROW_NUMBER() OVER(PARTITION BY SNO ORDER BY SCORE DESC) AS RN          FROM SCORES) WHERE RN > 1</code></pre><p>21、查询和学号为107的同学同年出生的所有学生的Sno、Sname和Sbirthday列。</p><pre class=" language-shell"><code class="language-shell">SELECT SNO,SNAME,SBIRTHDAY  FROM STUDENTS WHERE SUBSTR(SBIRTHDAY,1,4)=(SELECT SUBSTR(SBIRTHDAY,1,4) FROM STUDENTS WHERE SNO='107')</code></pre><p>22、查询“张旭“教师任课的学生成绩。</p><pre class=" language-shell"><code class="language-shell">SELECT SC.*  FROM TEACHERS T  JOIN COURSES C    ON T.TNO=C.TNO  JOIN SCORES SC    ON C.CNO=SC.CNO WHERE TNAME='张旭'</code></pre><p>23、查询选修人数超过5人的课程，显示教师信息</p><pre class=" language-shell"><code class="language-shell">SELECT T.TNO,TNAME  FROM SCORES SC  JOIN COURSES C    ON SC.CNO=C.CNO  JOIN TEACHERS T    ON C.TNO=T.TNO GROUP BY T.TNO,TNAME HAVING COUNT(1)>5;</code></pre><pre class=" language-shell"><code class="language-shell">SELECT C.CNO  FROM SCORES SC  JOIN COURSES C    ON SC.CNO=C.CNO  JOIN TEACHERS T    ON C.TNO=T.TNO GROUP BY C.CNO HAVING COUNT(1)>5; </code></pre><p>24、查询95033班和95031班全体学生的记录。</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM STUDENTS WHERE CLASS IN('95031','95033');</code></pre><p>25、查询存在有85分以上成绩的课程Cno.</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM SCORES WHERE SCORE>85;</code></pre><p>26、查询出“计算机系“教师所教课程的成绩表。</p><pre class=" language-shell"><code class="language-shell">SELECT sc.*  FROM TEACHERS T  JOIN COURSES C    ON T.TNO=C.TNO  JOIN SCORES SC    ON C.CNO=SC.CNO WHERE DEPART ='计算机系'</code></pre><p>27、查询所有教师和同学的name、sex和birthday.</p><pre class=" language-shell"><code class="language-shell">SELECT SNAME,SSEX,SBIRTHDAY FROM STUDENTSUNION ALLSELECT TNAME,TSEX,TBIRTHDAY FROM TEACHERS;</code></pre><p>28、查询所有“女”教师和“女”同学的name、sex和birthday.</p><pre class=" language-shell"><code class="language-shell">SELECT SNAME,SSEX,SBIRTHDAY FROM STUDENTS WHERE SSEX='女'UNION ALLSELECT TNAME,TSEX,TBIRTHDAY FROM TEACHERS WHERE TSEX='女';</code></pre><p>29、查询成绩比该课程平均成绩低的同学的成绩表。</p><pre class=" language-shell"><code class="language-shell">SELECT CNO,AVG(SCORE) FROM SCORES GROUP BY CNOSELECT *  FROM SCORES SC  JOIN (SELECT CNO,AVG(SCORE) AS AVG_SC FROM SCORES GROUP BY CNO) SC1    ON SC.CNO=SC1.CNO WHERE SCORE<AVG_SC</code></pre><p>30、查询所有任课教师的Tname和Depart(不包含未讲课的教师)</p><pre class=" language-shell"><code class="language-shell">SELECT DISTINCT Tname,Depart  FROM TEACHERS T  JOIN COURSES C    ON T.TNO=C.TNO  JOIN SCORES SC    ON SC.CNO=C.CNO</code></pre><p>31  查询所有未讲课的教师的Tname和Depart. </p><pre class=" language-shell"><code class="language-shell">SELECT T.*  FROM TEACHERS T  LEFT JOIN COURSES C    ON T.TNO=C.TNO  LEFT JOIN SCORES SC    ON SC.CNO=C.CNO WHERE SC.SCORE IS NULL</code></pre><p>32、查询至少有2名男生的班号。</p><pre class=" language-shell"><code class="language-shell">SELECT CLASS FROM STUDENTS WHERE SSEX='男' GROUP BY CLASS HAVING COUNT(1)>1;</code></pre><p>33、查询Student表中不姓“王”的同学记录。</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM STUDENTS WHERE SNAME NOT LIKE'王%';</code></pre><p>34、查询StudentS表中每个学生的姓名和年龄。</p><pre class=" language-shell"><code class="language-shell">SELECT SNAME,TO_CHAR(SYSDATE,'YYYY')-SUBSTR(SBIRTHDAY,1,4) AS 年龄 FROM STUDENTS</code></pre><p>35、查询Student表中最大和最小的Sbirthday日期值。</p><pre class=" language-shell"><code class="language-shell">SELECT TO_DATE(MAX(SBIRTHDAY),'YYYY-MM-DD'),TO_DATE(MIN(SBIRTHDAY),'YYYY-MM-DD') FROM STUDENTS;</code></pre><p>36、以班号和年龄从大到小的顺序查询Student表中的全部记录。</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM STUDENTS ORDER BY CLASS DESC,TO_CHAR(SYSDATE,'YYYY')-SUBSTR(SBIRTHDAY,1,4) DESC;</code></pre><p>37、查询“男”教师及其所上的课程。</p><pre class=" language-shell"><code class="language-shell">SELECT C.*  FROM TEACHERS T  JOIN COURSES C    ON T.TNO=C.TNO WHERE TSEX='男'</code></pre><p>38、查询最高分同学的Sno、Cno和score列。</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM SCORES WHERE SCORE=(SELECT MAX(SCORE) FROM SCORES)</code></pre><p>39、查询和“李军”同性别的所有同学的Sname.</p><pre class=" language-shell"><code class="language-shell">SELECT SNAME FROM STUDENTS WHERE SSEX=(SELECT SSEX FROM STUDENTS WHERE SNAME='李军') and SNAME<>'李军'</code></pre><p>40、查询和“李军”同性别并同班的同学Sname.</p><pre class=" language-shell"><code class="language-shell">SELECT SNAME FROM STUDENTS WHERE (SSEX,class) IN(SELECT SSEX,CLASS FROM STUDENTS WHERE SNAME='李军') and SNAME<>'李军'</code></pre><p>41、查询所有选修“计算机导论”课程的“男”同学的成绩表</p><pre class=" language-shell"><code class="language-shell">SELECT SC.*  FROM STUDENTS S  JOIN SCORES SC    ON S.SNO=SC.SNO  JOIN COURSES C    ON C.CNO=SC.CNO WHERE SSEX='男'   AND CNAME='计算机导论';</code></pre>]]></content>
      
      
      <categories>
          
          <category> Oracle习题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Oracle习题库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oracle33道死亡习题</title>
      <link href="2021/05/11/si-wang-33-ti/"/>
      <url>2021/05/11/si-wang-33-ti/</url>
      
        <content type="html"><![CDATA[<h2 id="表连接和子查询及简单查询死亡33道题"><a href="#表连接和子查询及简单查询死亡33道题" class="headerlink" title="表连接和子查询及简单查询死亡33道题"></a>表连接和子查询及简单查询死亡33道题</h2><h3 id="建表"><a href="#建表" class="headerlink" title="建表"></a>建表</h3><pre class=" language-shell"><code class="language-shell">create table student(sno varchar2(20) primary key,sname varchar2(30),sage number(2),ssex varchar2(5));create table teacher(tno varchar2(10) primary key,tname varchar2(20));create table course(cno varchar2(10),cname varchar2(30),tno varchar2(20),constraint pk_course primary key (cno,tno));create table sc(sno varchar2(10),cno varchar2(10),score number(5,2),constraint pk_sc primary key (sno,cno));/*******初始化学生表的数据******/insert into student values ('S001','张三',23,'男');insert into student values ('S002','李四',23,'男');insert into student values ('S003','吴鹏',25,'男');insert into student values ('S004','琴沁',20,'女');insert into student values ('S005','王丽',20,'女');insert into student values ('S006','李波',21,'男');insert into student values ('S007','刘玉',21,'男');insert into student values ('S008','萧蓉',21,'女');insert into student values ('S009','陈萧晓',23,'女');insert into student values ('S010','陈美',22,'女');commit;/******************初始化教师表***********************/insert into teacher values ('T001', '刘阳');insert into teacher values ('T002', '谌燕');insert into teacher values ('T003', '胡明星');commit;/***************初始化课程表****************************/insert into course values ('C001','J2SE','T002');insert into course values ('C002','Java Web','T002');insert into course values ('C003','SSH','T001');insert into course values ('C004','Oracle','T001');insert into course values ('C005','SQL SERVER 2005','T003');insert into course values ('C006','C#','T003');insert into course values ('C007','JavaScript','T002');insert into course values ('C008','DIV+CSS','T001');insert into course values ('C009','PHP','T003');insert into course values ('C010','EJB3.0','T002');commit;/***************初始化成绩表***********************/insert into SC values ('S001','C001',78.9);insert into SC values ('S002','C001',80.9);insert into SC values ('S003','C001',81.9);insert into SC values ('S004','C001',60.9);insert into SC values ('S001','C002',82.9);insert into SC values ('S002','C002',72.9);insert into SC values ('S003','C002',81.9);insert into SC values ('S001','C003','59');commit;SELECT * FROM student;SELECT * FROM sc;SELECT * FROM course;SELECT * FROM teacher;</code></pre><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>1、同时选学了c001和c002课程的学生中，c001分数比c002分数高的学生</p><pre class=" language-shell"><code class="language-shell">SELECT *  FROM (SELECT * FROM SC WHERE CNO='C001') T  JOIN (SELECT * FROM SC WHERE CNO='C002') T2    ON T.SNO=T2.SNO WHERE T.SCORE>T2.SCORE</code></pre><p>2、查询平均成绩大于60分的同学的学号和平均成绩；</p><pre class=" language-shell"><code class="language-shell">SELECT SNO,AVG(SCORE)  FROM SC GROUP BY SNOHAVING AVG(SCORE)>60;</code></pre><p>3、查询所有同学的学号、姓名、选课数、总成绩；</p><pre class=" language-shell"><code class="language-shell">SELECT S.SNO,SNAME,COUNT(CNO),SUM(SCORE)  FROM STUDENT S  LEFT JOIN SC    ON S.SNO=SC.SNO GROUP BY S.SNO,SNAME</code></pre><p>4、查询姓“刘”的老师的个数；</p><pre class=" language-shell"><code class="language-shell">SELECT COUNT(1) FROM TEACHER WHERE TNAME LIKE '刘%';</code></pre><p>5、查询没学过“谌燕”老师课的同学的学号、姓名；</p><pre class=" language-shell"><code class="language-shell">SELECT *  FROM STUDENT S  LEFT JOIN SC    ON S.SNO=SC.SNO  LEFT JOIN COURSE C    ON SC.CNO=C.CNO  LEFT JOIN TEACHER T    ON C.TNO=T.TNO WHERE TNAME='谌燕'select * from STUDENT WHERE SNO NOT IN(SELECT S.sno                                          FROM STUDENT S                                          LEFT JOIN SC                                            ON S.SNO=SC.SNO                                          LEFT JOIN COURSE C                                            ON SC.CNO=C.CNO                                          LEFT JOIN TEACHER T                                            ON C.TNO=T.TNO                                         WHERE TNAME='谌燕')</code></pre><p>6、查询学过“c001”并且也学过编号“c002”课程的同学的学号、姓名；</p><pre class=" language-shell"><code class="language-shell">SELECT S.SNO,SNAME  FROM (SELECT * FROM SC WHERE CNO='C001') T  JOIN (SELECT * FROM SC WHERE CNO='C002') T2    ON T.SNO=T2.SNO  JOIN STUDENT S    ON T.SNO=S.SNO</code></pre><p>7、查询学过“谌燕”老师所教的所有课的同学的学号、姓名；</p><pre class=" language-shell"><code class="language-shell">SELECT *  FROM TEACHER T  JOIN COURSE C    ON T.TNO=C.TNO WHERE TNAME='谌燕'--4SELECT *  FROM TEACHER T  JOIN COURSE C    ON T.TNO=C.TNO  JOIN SC    ON SC.CNO=C.CNO WHERE TNAME='谌燕'--2SELECT S.SNO  FROM STUDENT S  JOIN SC    ON SC.SNO=S.SNO  JOIN COURSE C    ON SC.CNO=C.CNO  JOIN TEACHER T    ON T.TNO=C.TNOWHERE TNAME='谌燕'GROUP BY S.SNOHAVING COUNT(1)=(SELECT count(DISTINCT C.CNO)                    FROM TEACHER T                    JOIN COURSE C                      ON T.TNO=C.TNO                    JOIN SC                      ON SC.CNO=C.CNO                   WHERE TNAME='谌燕')</code></pre><p>8、查询课程编号“c002”的成绩比课程编号“c001”课程低的所有同学的学号、姓名；</p><pre class=" language-shell"><code class="language-shell"> SELECT *  FROM (SELECT * FROM SC WHERE CNO='C001') T  JOIN (SELECT * FROM SC WHERE CNO='C002') T2    ON T.SNO=T2.SNO  JOIN STUDENT S    ON S.SNO=T.SNO WHERE T.SCORE>T2.SCORE</code></pre><p>9、查询所有课程成绩都小于60 分的同学的学号、姓名；</p><pre class=" language-shell"><code class="language-shell">SELECT *  FROM STUDENT S  JOIN SC    ON SC.SNO=S.SNO  RIGHT JOIN COURSE C    ON C.CNO=SC.CNO WHERE SCORE<60SELECT S.SNO,SNAME  FROM STUDENT S  JOIN SC    ON S.SNO=SC.SNO GROUP BY S.SNO,SNAMEHAVING MAX(SCORE)<60</code></pre><p>10、查询没有学全所有课的同学的学号、姓名；</p><pre class=" language-shell"><code class="language-shell">SELECT COUNT(1) FROM COURSE;--所有课程数SELECT COUNT(DISTINCT CNO) FROM SC ;--已经开课的课程数SELECT S.SNO,SNAME  FROM STUDENT S  LEFT JOIN SC    ON S.SNO=SC.SNO GROUP BY S.SNO,SNAMEHAVING COUNT(CNO)<(SELECT COUNT(DISTINCT CNO) FROM SC)</code></pre><p>11、查询至少有一门课   与  学号为“s001”的同学所学相同    的同学的学号和姓名；</p><pre class=" language-shell"><code class="language-shell">SELECT CNO FROM SC WHERE SNO='S001'SELECT SNO FROM SC WHERE CNO IN(SELECT CNO FROM SC WHERE SNO='S001')SELECT SNO, SNAME  FROM STUDENT WHERE SNO IN       (SELECT SNO          FROM SC         WHERE CNO IN (SELECT CNO FROM SC WHERE SNO = 'S001'))                  SELECT DISTINCT S.*  FROM STUDENT S  JOIN SC     ON S.SNO=SC.SNOWHERE CNO IN(SELECT CNO FROM SC WHERE SNO = 'S001')</code></pre><p>12、查询各科成绩最高和最低的分：以如下形式显示：课程ID，最高分，最低分</p><pre class=" language-shell"><code class="language-shell">SELECT CNO AS CID,MAX(SCORE) as 最高分,MIN(SCORE) as 最低分 FROM SC GROUP BY CNO</code></pre><p>13、按各科平均成绩从低到高和及格率的百分数从高到低顺序<br>及格率：大于60分的人数/总人数（选课总人数）</p><pre class=" language-shell"><code class="language-shell">SELECT CNO,AVG(SCORE) AS B,       SUM(CASE WHEN SCORE>=60 THEN 1 ELSE 0 END)/COUNT(1) *100 ||'%' AS A  FROM SC GROUP BY CNO ORDER BY B ASC,A DESC; SELECT * FROM SC FOR UPDATE;</code></pre><p>14、查询不同老师所教不同课程平均分从高到低显示；</p><pre class=" language-shell"><code class="language-shell">SELECT T.TNO,C.CNO,AVG(SCORE) AS A  FROM TEACHER T  JOIN COURSE C    ON C.TNO=T.TNO  JOIN SC    ON SC.CNO=C.CNO GROUP BY T.TNO,C.CNO ORDER BY A DESC</code></pre><p>15、统计各科目各分数段人数:课程ID,课程名称,[100-85],[85-70],[70-60],[ &lt;60]（）</p><pre class=" language-shell"><code class="language-shell">SELECT  C.CNO,CNAME,        SUM(CASE WHEN SCORE>=85 THEN 1 ELSE 0 END) AS "[100-85]",        SUM(CASE WHEN SCORE>=70 AND SCORE<85 THEN 1 ELSE 0 END) AS "[85-70]",        SUM(CASE WHEN SCORE>=60 AND SCORE<70 THEN 1 ELSE 0 END) AS "[70-60]",        SUM(CASE WHEN SCORE<60 THEN 1 ELSE 0 END) AS "[<60]"  FROM COURSE C  JOIN SC    ON C.CNO=SC.CNO GROUP BY C.CNO,CNAME</code></pre><p>16、查询各科成绩前三名的记录:(不考虑成绩并列情况)</p><pre class=" language-shell"><code class="language-shell">SELECT *FROM (SELECT SC.*,ROW_NUMBER()OVER(PARTITION BY CNO ORDER BY SCORE DESC) AS RN FROM SC)WHERE RN<=3;</code></pre><p>17、查询每门课程被选修的学生数，显示课程编号，课程名，选修人数</p><pre class=" language-shell"><code class="language-shell">SELECT C.CNO,CNAME,COUNT(SNO)  FROM SC RIGHT JOIN COURSE C    ON SC.CNO=C.CNO GROUP BY C.CNO,CNAME</code></pre><p>18、查询出只选修了一门课程的全部学生的学号和姓名</p><pre class=" language-shell"><code class="language-shell">SELECT S.SNO,SNAME  FROM STUDENT S  JOIN SC    ON S.SNO=SC.SNO GROUP BY S.SNO,SNAMEHAVING COUNT(1)=1;</code></pre><p>19、查询男生、女生人数</p><pre class=" language-shell"><code class="language-shell">SELECT SSEX,COUNT(1) FROM STUDENT GROUP BY SSEX</code></pre><p>20、查询同名同性学生名单，并统计同名同性人数</p><pre class=" language-shell"><code class="language-shell">SELECT SNAME,COUNT(1)  FROM STUDENT GROUP BY SSEX,SNAME</code></pre><p>21、查询每门课程的平均成绩，结果按平均成绩升序排列，平均成绩相同时，按课程号降序排</p><pre class=" language-shell"><code class="language-shell">SELECT CNO,AVG(SCORE) AS A FROM SC GROUP BY CNO ORDER BY A ASC,CNO DESC;</code></pre><p>22、查询平均成绩大于75 的所有学生的学号、姓名和平均成绩</p><pre class=" language-shell"><code class="language-shell">SELECT S.SNO,SNAME,AVG(SCORE)  FROM STUDENT S  JOIN SC    ON S.SNO=SC.SNO GROUP BY S.SNO,SNAMEHAVING AVG(SCORE)>75</code></pre><p>23、查询课程名称为“SSH”，且分数低于60 的学生姓名和分数</p><pre class=" language-shell"><code class="language-shell">SELECT S.SNO,SNAME  FROM STUDENT S  JOIN SC    ON S.SNO=SC.SNO  JOIN COURSE C    ON C.CNO=SC.CNO WHERE CNAME='SSH' AND SCORE<60;</code></pre><p>24、查询有不及格成绩的课程编号及课程名称，并按课程号从大到小排列</p><pre class=" language-shell"><code class="language-shell">SELECT C.CNO,CNAME  FROM COURSE C  JOIN SC    ON SC.CNO=C.CNO WHERE SCORE<60 ORDER BY C.CNO DESC;</code></pre><p>25、查询课程编号为c001 且课程成绩在80 分以上的学生的学号和姓名</p><pre class=" language-shell"><code class="language-shell">SELECT S.SNO,SNAME  FROM STUDENT S  JOIN SC    ON SC.SNO=S.SNO   AND SC.CNO='C001' AND SCORE>80</code></pre><p>26、求选了课程的学生人数</p><pre class=" language-shell"><code class="language-shell">SELECT COUNT(DISTINCT SNO) FROM SC;</code></pre><p>27、查询选修“谌燕”老师所授课程的学生中，成绩最高的学生姓名及其成绩()</p><pre class=" language-shell"><code class="language-shell">SELECT SNAME,SCOREFROM (      SELECT S.*,C.*,SC.*,T.*,ROW_NUMBER()OVER(ORDER BY SCORE DESC) AS RN         FROM STUDENT S        JOIN SC          ON S.SNO=SC.SNO        JOIN COURSE C          ON C.CNO=SC.CNO        JOIN TEACHER T          ON T.TNO=C.TNO       WHERE TNAME='谌燕') WHERE RN=1;</code></pre><p>28、查询各个课程及相应的选修人数</p><pre class=" language-shell"><code class="language-shell">SELECT CNO,COUNT(1) FROM SC GROUP BY CNO</code></pre><p>29、查询每门功课成绩最好的前两名</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM (SELECT SC.*,ROW_NUMBER()OVER(PARTITION BY CNO ORDER BY SCORE DESC) AS EN FROM SC)WHERE EN<=2</code></pre><p>30、检索至少选修两门课程的学生学号</p><pre class=" language-shell"><code class="language-shell">SELECT SNO FROM SC GROUP BY SNO HAVING COUNT(1)>=2 </code></pre><p>31、查询全部学生都选修的课程的课程号和课程名</p><pre class=" language-shell"><code class="language-shell">SELECT SC.CNO,CNAME  FROM COURSE C  LEFT JOIN SC     ON C.CNO=SC.CNO GROUP BY SC.CNO,CNAMEHAVING COUNT(SC.SNO)=(SELECT COUNT(DISTINCT SNO) FROM SC);SELECT * FROM SC</code></pre><p>32、查询两门以上不及格课程的同学的学号及其平均成绩</p><pre class=" language-shell"><code class="language-shell">SELECT SNO,AVG(SCORE)FROM SCWHERE SNO IN(              SELECT SNO                FROM SC               WHERE SCORE<60               GROUP BY SNO              HAVING COUNT(1)>2)GROUP BY SNO;</code></pre><p>33、检索“c004”课程分数小于60，按分数降序排列的同学学号</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM SCSELECT SNO FROM SC WHERE CNO='C004' AND SCORE<60 ORDER BY SCORE DESC;</code></pre>]]></content>
      
      
      <categories>
          
          <category> Oracle习题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Oracle习题库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oracle第十四天</title>
      <link href="2021/05/06/oracle-di-shi-si-tian/"/>
      <url>2021/05/06/oracle-di-shi-si-tian/</url>
      
        <content type="html"><![CDATA[<h1 id="2021-05-06-Oracle第十四天-表连接"><a href="#2021-05-06-Oracle第十四天-表连接" class="headerlink" title="2021/05/06  Oracle第十四天 表连接"></a>2021/05/06  Oracle第十四天 表连接</h1><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>今天上午学习了关于表连接的新知识点，下午把表连接讲完了，剩下的就是笔记和习题了</p><hr><h5 id="概念性的东西"><a href="#概念性的东西" class="headerlink" title="概念性的东西"></a>概念性的东西</h5><p>背景：出现数据源不止一个的情况<br>定义：将多个数据源中的内容按照一定规则拼接在一起，将拼接后的结果作为一个临时的、新的数据源，即表连接</p><p>有关联的表：学生表SNO  SNO成绩表CNO  CNO课程表TNO  TNO教师表</p><p>宽表：影响查询效率，增加冗余</p><p>查找SMITH所在部门的部门编号、部门名称、部门所在地</p><pre class=" language-shell"><code class="language-shell">SELECT DEPTNO,DNAME,LOC FROM DEPT  WHERE DEPTNO=(SELECT DEPTNO FROM EMP WHERE ENAME='SCOTT')</code></pre><p>查找SMITH的员工编号、姓名、岗位名称、入职时间、部门编号和部门名称(内，外，笛卡尔)</p><pre class=" language-shell"><code class="language-shell">SELECT EMPNO,ENAME,JOB,HIREDATE,DEPTNO,(SELECT DNAME FROM DEPT WHERE DEPTNO=(SELECT DEPTNO FROM EMP WHERE ENAME='SCOTT'))FROM EMPWHERE ENAME='SCOTT';</code></pre><h4 id="表连接的分类及语法："><a href="#表连接的分类及语法：" class="headerlink" title="表连接的分类及语法："></a>表连接的分类及语法：</h4><p>内连接：FROM A [INNER] JOIN B ON A.a = B.b  –常用</p><p>外连接：<br>左外连接：FROM A LEFT [OUTER] JOIN B ON A.a = B.b  –常用<br>右外连接：FROM A RIGHT [OUTER] JOIN B ON A.a = B.b –不常用<br>全外连接：FROM A FULL [OUTER] JOIN B ON A.a = B.b  –偶尔用</p><p>笛卡尔连接(交叉连接):FROM A CROSS JOIN B –不常用 笛卡尔积：比较危险，会引起数据量暴涨</p><p>查找SMITH的编号、姓名、岗位、部门编号、工作地点、部门名称</p><pre class=" language-shell"><code class="language-shell">SELECT EMPNO,ENAME,JOB,EMP.DEPTNO,LOC,DNAME  FROM EMP JOIN DEPT ON EMP.DEPTNO=DEPT.DEPTNO WHERE ENAME='SMITH';</code></pre><h4 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h4><pre class=" language-shell"><code class="language-shell">SELECT * FROM EMP E JOIN DEPT D ON E.DEPTNO=D.DEPTNO--14SELECT * FROM EMP E LEFT JOIN DEPT D ON E.DEPTNO=D.DEPTNO--15SELECT * FROM EMP E RIGHT JOIN DEPT D ON E.DEPTNO=D.DEPTNO--15SELECT * FROM DEPT D RIGHT JOIN  EMP E ON E.DEPTNO=D.DEPTNO--15SELECT * FROM EMP E FULL JOIN DEPT D ON E.DEPTNO=D.DEPTNO--16</code></pre><h5 id="注意：连接时，左表中的每条数据都会试图和右表中的每条数据做一次关联！"><a href="#注意：连接时，左表中的每条数据都会试图和右表中的每条数据做一次关联！" class="headerlink" title="注意：连接时，左表中的每条数据都会试图和右表中的每条数据做一次关联！"></a>注意：连接时，左表中的每条数据都会试图和右表中的每条数据做一次关联！</h5><h4 id="各种连接的特点："><a href="#各种连接的特点：" class="headerlink" title="各种连接的特点："></a>各种连接的特点：</h4><p>内连接：按照关联条件关联，将两表中都符合关联条件的数据取出</p><p>左外连接：按照关联条件关联，左表作为主表，将两表中都符合关联条件的数据以及主表中独有的数据取出<br>右外连接：按照关联条件关联，右表作为主表，将两表中都符合关联条件的数据以及主表中独有的数据取出<br>全外连接：按照关联条件关联，将两表中都符合关联关系的数据以及左表中独有的、右表中独有的数据取出</p><p>笛卡尔连接：没有关联条件，左表中的每一条数据都与右表中的每一条数据做了一次关联</p><p>笛卡尔连接(交叉连接)</p><pre class=" language-shell"><code class="language-shell">SELECT *  FROM EMP E  CROSS JOIN DEPT D</code></pre><h4 id="右连接为何不常用"><a href="#右连接为何不常用" class="headerlink" title="右连接为何不常用"></a>右连接为何不常用</h4><ol><li>首先多表（尤其是三张及三张以上）连接时，为了避免反复辨别主次表，左连接与右连接不会混用</li><li>其次不混用的情况下总归要定下一个左连接或者右连接</li><li>最后左连接更加符合日常描述</li></ol><h4 id="全连接何时用："><a href="#全连接何时用：" class="headerlink" title="全连接何时用："></a>全连接何时用：</h4><p>左表和右表本该能对上的数据没对上，通过全连接能查出这些没对上的数据</p><h4 id="笛卡尔连接为何不常用："><a href="#笛卡尔连接为何不常用：" class="headerlink" title="笛卡尔连接为何不常用："></a>笛卡尔连接为何不常用：</h4><p>笛卡尔连接没有指定关联条件，所以数据的关联十分随意，因而会造成数据量的暴涨，<br>进一步造成数据库因负荷暴增而宕机</p><p>比如100W连接10W—1000WW—1000亿</p><p>笛卡尔连接的应用场景举例：<br>公司内进行比赛，所有人都和除自己之外的其他员工进行一次比赛，赛程安排</p><pre class=" language-shell"><code class="language-shell">SELECT E.ENAME,E1.ENAME  FROM EMP E CROSS JOIN EMP E1</code></pre><h4 id="语法中的两个注意点："><a href="#语法中的两个注意点：" class="headerlink" title="语法中的两个注意点："></a>语法中的两个注意点：</h4><p>1.关于表名与表别名：</p><p>何时不用加表(别)名:<br>                1）SELECT子句中要么没有<em>，要么只有</em><br>                2)数据源有多个，且多个数据源中没有名字冲突的字段</p><p>何时必须加表(别)名:<br>                1）SELECT子句中除了*以外还有别的内容<br>                2）数据源有多个，且多个数据源中含有名字冲突的字段</p><p>2.关于内外连接的关键词：<br>INNER和OUTER这两个关键词可以省略不写，且实际工作中为了方便也确实常常不写</p><h4 id="特殊的连接："><a href="#特殊的连接：" class="headerlink" title="特殊的连接："></a>特殊的连接：</h4><p>自连接：很多资料中都提到了有一种连接叫自连接，自连接不过是某张表自己连接自己，<br>可以是内连接也可以是外连接。</p><p>查询各员工的员工编号、姓名、岗位、薪资(EMP)以及对应的上级领导的姓名–(EMP)  配合EXCEL—left join 与join 区别</p><pre class=" language-shell"><code class="language-shell">SELECT E.EMPNO,E.ENAME,E.JOB,E.SAL,E1.ENAME  FROM EMP E  LEFT JOIN EMP E1    ON E.MGR=E1.EMPNOSELECT * FROM EMP </code></pre><p>最贴合的举例：查询员工及上级领导/下属</p><p>EMP表中谁没有上级</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM EMP WHERE MGR IS NULL;</code></pre><p>EMP表中谁没有下属</p><pre class=" language-shell"><code class="language-shell">SELECT *  FROM EMP E  LEFT JOIN EMP E1    ON E.EMPNO=E1.MGR WHERE E1.MGR IS NULL</code></pre><h4 id="数据发散的概念："><a href="#数据发散的概念：" class="headerlink" title="数据发散的概念："></a>数据发散的概念：</h4><p>两表关联时，根据关联条件与实际的数据情况，可能会出现多种关联情况<br>1）1-N：A表中的每条数据可能对应B表中的多条数据，例如：查每个员工下属的信息<br>2）N-1：A表中的多条数据对应B表中的一条数据例如：查每个员工领导的信息<br>3）1-1：A表中的一条数据对应B表中的一条数据例如：A.ENAME=B.ENAME<br>4）N-N：A表中的每条数据对应B表中的多条数据，同时B表中的每条数据也对应A表中的多条数据</p><pre class=" language-shell"><code class="language-shell">A.DEPTNO=B.DEPTNOselect *  FROM EMP E  JOIN EMP E1    ON E.DEPTNO=E1.DEPTNO</code></pre><p>其中第1和第4这两种，主表关联上次表后数据变多的情况称为数据发散。<br>数据发散有时是依据事实需求的正常情况。</p><h4 id="工作中的常见情况："><a href="#工作中的常见情况：" class="headerlink" title="工作中的常见情况："></a>工作中的常见情况：</h4><p>1.关联条件不止一个（AND-常见，OR-不常见）</p><p>与SMITH同部门的其他人（不同方法）</p><pre class=" language-shell"><code class="language-shell">SELECT E.*  FROM EMP E  JOIN (SELECT * FROM EMP WHERE ENAME='SMITH') E1    ON E.DEPTNO=E1.DEPTNO WHERE E.ENAME<>'SMITH';</code></pre><pre class=" language-shell"><code class="language-shell">SELECT *  FROM EMP E  JOIN EMP E1    ON E.DEPTNO=E1.DEPTNO   AND E1.ENAME='SMITH' WHERE E.ENAME<>'SMITH';</code></pre><pre class=" language-shell"><code class="language-shell">SELECT *  FROM EMP E  JOIN EMP E1    ON E.DEPTNO=E1.DEPTNO   AND E1.ENAME='SMITH'   AND E.ENAME<>'SMITH'; </code></pre><p>与SMITH同部门或同岗位的其他人</p><pre class=" language-shell"><code class="language-shell">SELECT *  FROM EMP E  JOIN EMP E1    ON (E.DEPTNO=E1.DEPTNO OR E.JOB=E1.JOB)    AND E1.ENAME='SMITH'    AND E.ENAME<>'SMITH';</code></pre><hr><p>2.关联表不止一张</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM SALGRADE;</code></pre><p>查询所有人的姓名、部门名称、岗位、薪资及薪资水平</p><pre class=" language-shell"><code class="language-shell">SELECT ENAME,DNAME,JOB,SAL,GRADE  FROM EMP E  JOIN DEPT D    ON E.DEPTNO=D.DEPTNO  JOIN SALGRADE S    ON E.SAL BETWEEN LOSAL AND HISAL</code></pre><p>查询SMITH的姓名、部门名称、岗位、薪资及薪资水平</p><pre class=" language-shell"><code class="language-shell">SELECT ENAME,DNAME,JOB,SAL,GRADE  FROM EMP E  JOIN DEPT D    ON E.DEPTNO=D.DEPTNO  JOIN SALGRADE S    ON E.SAL BETWEEN LOSAL AND HISAL WHERE ENAME='SMITH';  </code></pre><p>查询10号部门的姓名、部门名称、岗位、薪资及薪资水平</p><pre class=" language-shell"><code class="language-shell">SELECT  ENAME,DNAME,JOB,SAL,GRADE  FROM EMP E  JOIN DEPT D    ON E.DEPTNO=D.DEPTNO  JOIN SALGRADE S    ON E.SAL BETWEEN LOSAL AND HISAL WHERE E.DEPTNO=10;</code></pre><h4 id="ORACLE中特殊的表连接书写方式"><a href="#ORACLE中特殊的表连接书写方式" class="headerlink" title="ORACLE中特殊的表连接书写方式 ()"></a>ORACLE中特殊的表连接书写方式 ()</h4><p>内连接：FROM A , B WHERE A.a = B.b</p><pre class=" language-shell"><code class="language-shell">select * FROM EMP E,DEPT D WHERE E.DEPTNO=D.DEPTNO ;</code></pre><p>外连接：左外连接：FROM A , B WHERE A.a = B.b(+)</p><pre class=" language-shell"><code class="language-shell">select * FROM EMP E,DEPT D WHERE E.DEPTNO=D.DEPTNO(+) ;        右外连接：FROM A , B WHERE A.a(+) = B.bselect * FROM EMP E,DEPT D WHERE E.DEPTNO(+)=D.DEPTNO;</code></pre><p>交叉连接：FROM A , B</p><pre class=" language-shell"><code class="language-shell">select * FROM EMP E,DEPT D</code></pre><p>查询SALES部门所有员工的姓名、岗位、薪资</p><pre class=" language-shell"><code class="language-shell">SELECT ENAME,JOB,SAL FROM EMP WHERE DEPTNO=(SELECT DEPTNO FROM DEPT WHERE DNAME='SALES')SELECT E.ENAME,E.JOB,E.SAL  FROM EMP E  JOIN DEPT D    ON E.DEPTNO=D.DEPTNO   AND D.DNAME='SALES'</code></pre><p>查询SALES部门和RESEARCH部门所有员工的姓名、岗位、薪资、工作地点</p><pre class=" language-shell"><code class="language-shell">SELECT ENAME,JOB,SAL,LOC  FROM EMP E  JOIN DEPT D    ON E.DEPTNO=D.DEPTNO   AND D.DNAME IN('SALES','RESEARCH')</code></pre><p>3.如何判断何时使用表连接，何时使用子查询<br>若查询时用于最终展示的字段来源于多个数据源，必须使用表连接</p><p>若查询时用于最终展示的字段只来源于一个数据源，同时查询过程中用于筛选判断的字段来源于多个数据源，可以使用表连接或子查询</p><p>子查询与表连接的思路步骤区别<br>   1)子查询（多步）：先将题目拆解，分成一步一步去做，前一步的SQL放到后一步 中作为子查询<br>   2)表连接（多表）：先判断需要哪些数据源的数据，通过表与表之间的关联关系将其连接在一起，<br>   形成新的数据源，最后将新形成的临时结果集当做一个普通的数据源进行后续的查询</p><p>4.关于集合运算与表连接相似点与区别点</p><p>相似点：都是将数据拼接到一起，可以将拼接结果作为一个新的<br>                 数据源使用</p><p>区别点：集合运算是在纵向上将多行数据拼在一起（加行）<br>        表连接时在横向上将多列数据拼接在一起（加列）</p><p>5.左外连接时，条件写在WHERE和ON中有什么区别？</p><p>   写在WHERE中，是两个数据源先做连接，再对连接结果做筛选<br>   写在ON中，对连接条件中的数据源先进行筛选，用筛选后的结<br>                       果再去与另外一个数据源连接</p><p>查询SALES部门所有员工的姓名、岗位、薪资（写在内连接、左外链接写在WHERE和ON 的区别）</p><pre class=" language-shell"><code class="language-shell">SELECT E.ENAME,E.JOB,E.SAL  FROM EMP E  LEFT JOIN (SELECT * FROM DEPT WHERE DNAME='SALES') D    ON E.DEPTNO=D.DEPTNO</code></pre><pre class=" language-shell"><code class="language-shell">SELECT *  FROM EMP E  LEFT JOIN DEPT D    ON E.DEPTNO=D.DEPTNO WHERE D.DNAME='SALES';</code></pre><pre class=" language-shell"><code class="language-shell">SELECT *  FROM EMP E  LEFT JOIN DEPT D    ON E.DEPTNO=D.DEPTNO   AND D.DNAME='SALES';</code></pre><p>思考：<br>   SQL中on与where与having的区别与执行顺序</p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p>ON、WHERE、HAVING的主要差别是其子句中限制条件起作用时机引起的，<br>ON是在生产临时表之前根据条件筛选记录，<br>WHERE是从临时表中筛选数据，<br>而HAVING是对临时表中满足条件的数据，进行计算分组之后，通过HAVING限制语句筛选分组，返回结果是满足HAVING子句限制的分组。<br>执行顺序：&nbsp;ON——&gt;WHERE——&gt;HAVING</p><h1 id="end"><a href="#end" class="headerlink" title="end"></a>end</h1>]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据第一阶段 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oracle第十三天</title>
      <link href="2021/05/05/oracle-di-shi-san-tian/"/>
      <url>2021/05/05/oracle-di-shi-san-tian/</url>
      
        <content type="html"><![CDATA[<h1 id="2021-05-05-Oracle第十三天"><a href="#2021-05-05-Oracle第十三天" class="headerlink" title="2021/05/05 Oracle第十三天"></a>2021/05/05 Oracle第十三天</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天上午讲了一下开窗函数的练习题，下午讲了集合运算和行列转换，开窗函数的练习题放后面，新知识点放前面吧</p><hr><h3 id="并集："><a href="#并集：" class="headerlink" title="并集："></a>并集：</h3><p>指将两个查询的查询结果合并在一起(最多)</p><ol><li>并集去重-UNION（+）：将两个查询结果进行合并，同时，若存在相同的数据，将重复数据去重，结果以第一个字段升序显示</li><li>并集不去重-UNION ALL：将两个查询结果合并，且不会对重复数据进行去重及排序操作</li></ol><p>–列名以第一个查询的名称显示<br>SELECT * FROM EMP;</p><p>例如：<br>将部门信息表中的部门编号、部门名称与员工信息表中的员工编号、员工姓名合并在一起</p><pre class=" language-shell"><code class="language-shell">SELECT DEPTNO as 编号,DNAME as 名称 FROM DEPT UNION SELECT EMPNO ,ENAME  FROM EMP;SELECT DNAME as 名称,DEPTNO as 编号 FROM DEPT UNION SELECT ENAME,EMPNO   FROM EMPORDER BY 编号 ASC;SELECT DNAME as 名称,DEPTNO as 编号 FROM DEPT ORDER BY 编号 ASCUNION SELECT ENAME,EMPNO   FROM EMP;--ERRORSELECT DEPTNO,DNAME FROM DEPT UNION SELECT JOB,ENAME FROM EMP;--数据类型要统一</code></pre><p>分别查出10号部门的岗位与薪资和20号部门的姓名与薪资，合并在一起</p><pre class=" language-shell"><code class="language-shell">SELECT JOB,SAL FROM EMP WHERE DEPTNO=10UNIONSELECT ENAME,SAL FROM EMP WHERE DEPTNO=20;</code></pre><p>分别查出10号部门的岗位与薪资和20号部门的姓名与岗位，合并在一起</p><pre class=" language-shell"><code class="language-shell"># ERRORSELECT JOB,SAL FROM EMP WHERE DEPTNO=10UNIONSELECT ENAME,JOB FROM EMP WHERE DEPTNO=20;</code></pre><p>分别查出10号部门的薪资与岗位和20号部门的薪资与姓名，合并在一起—排序区别</p><p>分别查出10号部门的岗位与薪资、部门编号和20号部门的姓名与岗位，合并在一起</p><pre class=" language-shell"><code class="language-shell">SELECT JOB,SAL,DEPTNO FROM EMP WHERE DEPTNO=10UNIONSELECT ENAME,DEPTNO FROM EMP WHERE DEPTNO=20;--ERRORSELECT ENAME,JOB FROM EMPUNION SELECT DNAME,LOC FROM DEPTSELECT ENAME,JOB FROM EMPUNION ALLSELECT DNAME,LOC FROM DEPTSELECT ENAME,EMPNO FROM EMPUNION SELECT DNAME,DEPTNO FROM DEPT</code></pre><p>有一张表中存放学生信息，还有一张表中存放教师信息，现要求<br>将学生姓名、学号与教师姓名、教师编号一并查出。</p><pre class=" language-shell"><code class="language-shell">CREATE TABLE STD (SNO      VARCHAR2(2),SNAME  VARCHAR2(30),SAGE     NUMBER );CREATE TABLE TCR (TNO        VARCHAR2(2),TNAME    VARCHAR2(30),TAGE       NUMBER );</code></pre><p>UNION 去除重复数据时无视重复数据的来源<br>UNION ALL 不会对连接结果排序</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM STD;SELECT * FROM TCR;SELECT SNO,SNAME FROM STDUNIONSELECT TNO,TNAME FROM TCRSELECT SNAME FROM STDUNIONSELECT TNAME FROM TCR</code></pre><p>有一张表存放所有的父亲姓名，另一张表存放所有的儿子姓名，获取家中所有男人的名字</p><pre class=" language-shell"><code class="language-shell">CREATE TABLE TEST_F (FNAME VARCHAR2(100));CREATE TABLE TEST_S (SNAME VARCHAR2(100) );SELECT SNAME FROM TEST_SUNIONSELECT FNAME FROM TEST_F</code></pre><p>工作中的常见用法：将自定义的一条数据与实际数据合并<br>获取每个员工的姓名薪资，以及总计薪资</p><pre class=" language-shell"><code class="language-shell">SELECT ENAME,SAL FROM EMPunionSELECT '总计薪资',SUM(SAL) FROM EMP</code></pre><h3 id="交集-INTERSECT："><a href="#交集-INTERSECT：" class="headerlink" title="交集-INTERSECT："></a>交集-INTERSECT：</h3><p>指将两个查询结果共有的数据查出—去重、排序</p><p>例如：<br>获取10号部门与20号部门共有的岗位</p><pre class=" language-shell"><code class="language-shell">SELECT JOB FROM EMP WHERE DEPTNO=10INTERSECTSELECT JOB FROM EMP WHERE DEPTNO=20;</code></pre><p>谁既是父亲又是儿子</p><pre class=" language-shell"><code class="language-shell">SELECT SNAME FROM TEST_SINTERSECTSELECT FNAME FROM TEST_F</code></pre><h3 id="差集"><a href="#差集" class="headerlink" title="差集"></a>差集</h3><p>MINUS：取仅在第一个查询结果中存在的数据—去重、排序<br>例如：<br>查询没有员工的部门编号</p><pre class=" language-shell"><code class="language-shell">SELECT DEPTNO FROM DEPTMINUSSELECT DEPTNO FROM EMP;</code></pre><p>查询30号部门独有的岗位</p><pre class=" language-shell"><code class="language-shell">SELECT JOB FROM EMP WHERE DEPTNO=30MINUSSELECT JOB FROM EMP WHERE DEPTNO<>30;</code></pre><p>查询10号部门有但30号部门没有的岗位</p><pre class=" language-shell"><code class="language-shell">SELECT JOB FROM EMP WHERE DEPTNO=10MINUSSELECT JOB FROM EMP WHERE DEPTNO=30</code></pre><p>查询30号部门有但10号部门没有的岗位</p><pre class=" language-shell"><code class="language-shell">SELECT JOB FROM EMP WHERE DEPTNO=30MINUSSELECT JOB FROM EMP WHERE DEPTNO=10</code></pre><p>谁是家中最年长的男人</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM TEST_FMINUSSELECT * FROM TEST_S</code></pre><p>谁是家中最年幼的男人</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM TEST_SMINUSSELECT * FROM TEST_F</code></pre><h4 id="注意点："><a href="#注意点：" class="headerlink" title="注意点："></a>注意点：</h4><ol><li>UNION、INTERSECT、MINUS 会进行去重  UNION ALL 不去重</li><li>只有差集 MINUS 会考虑查询结果放置的前后顺序，其他不需要考虑</li><li>列名可以不一致，但是列数要保持一致，数据类型也要保持一致</li><li>最终的列名和第一个查询结果中的列名相同</li><li>集合运算没有先后之分，依次从上到下执行，除非有括号</li></ol><p>家中最年长的和最年幼的人</p><pre class=" language-shell"><code class="language-shell">(SELECT * FROM TEST_FMINUSSELECT * FROM TEST_S )UNION(SELECT * FROM TEST_SMINUSSELECT * FROM TEST_F ) </code></pre><p>6.UNION、INTERSECT、MINUS 最终结果会按照第一列进行升序排列，UNION ALL 不会进行自动排序<br>7.ORDER BY 排序只能放在最后一个查询内，列名不一致时可以使用序号或别名<br>查询每个员工的姓名、岗位，以及以下列CLERK_SAL,MANAGER_SAL,PRESIDENT_SAL,ANALYST_SAL,SALESMAN_SAL,每个人在自己所属的岗位下有对应的薪资信息，其他字段显示为0<br>例：SCOTT  ANALYST 0  0  0  3000  0</p><pre class=" language-shell"><code class="language-shell">SELECT ENAME,JOB,SAL,       CASE WHEN JOB='CLERK' THEN SAL ELSE 0 END AS CLERK_SAL  FROM EMP</code></pre><hr><h3 id="行列转换"><a href="#行列转换" class="headerlink" title="行列转换"></a>行列转换</h3><p>无论是在工作中还是在面试中，常常有一类问题经常出现：<br>依据现有数据，将以行（列）展示的数据转换为以列（行）的形式展示</p><p>行列转换的传统方法也是最为常见的方法：<br>通过聚合函数、CASE WHEN …语句，再搭配集合运算实现行列转换<br>表格：SCORE_1  SCORE_2   ORDERS_SUM</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM SCORE_1;SELECT * FROM SCORE_2;</code></pre><pre class=" language-shell"><code class="language-shell">SELECT SNAME,       SUM(CASE WHEN COURSE='CHINESE' THEN SCORE ELSE 0 END) AS CHINESE,        SUM(CASE WHEN COURSE='MATH' THEN SCORE ELSE 0 END) AS MATH,          SUM(CASE WHEN COURSE ='ENGLISH' THEN SCORE ELSE 0 END) AS ENGLISH  FROM SCORE_1 GROUP BY SNAME;</code></pre><pre class=" language-shell"><code class="language-shell">SELECT COURSE,       MAX(CASE WHEN SNAME='张三' THEN SCORE ELSE 0 END) AS 张三,       MAX(CASE WHEN SNAME='李四' THEN SCORE ELSE 0 END) AS 李四,       MAX(CASE WHEN SNAME='王五' THEN SCORE ELSE 0 END) AS 王五  from SCORE_1 GROUP BY COURSE;</code></pre><pre class=" language-shell"><code class="language-shell">SELECT * FROM SCORE_1;SELECT * FROM SCORE_2SELECT SNAME,'CHINESE' AS COURSE,CHINESE AS SCORE FROM SCORE_2UNIONSELECT SNAME,'MATH' AS COURSE,MATH AS SCORE FROM SCORE_2UNIONSELECT SNAME,'ENGLISH' AS COURSE,ENGLISH AS SCORE FROM SCORE_2;</code></pre><h3 id="Oracle行转列，pivot函数和unpivot函数"><a href="#Oracle行转列，pivot函数和unpivot函数" class="headerlink" title="Oracle行转列，pivot函数和unpivot函数"></a>Oracle行转列，pivot函数和unpivot函数</h3><p>pivot函数：行转列函数：<br>　　语法：pivot(任一聚合函数 for 需转列的值所在列名 in (需转为列名的值))；</p><p>执行原理：将pivot函数或unpivot函数接在查询结果集的后面。相当于对结果集进行处理。<br>转换示例：</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM SCORE_1PIVOT(SUM(SCORE)FOR COURSE IN('CHINESE' AS CHINESE,'MATH' AS MATH,'ENGLISH' AS ENGLISH));</code></pre><pre class=" language-shell"><code class="language-shell">SELECT * FROM SCORE_1PIVOT(SUM(SCORE)FOR SNAME IN('张三' AS 张三,'李四' AS 李四,'王五' AS 王五));</code></pre><p>unpivot函数：列转行函数：<br>　　语法：unpivot(新增值所在列的列名 for 新增列转为行后所在列的列名 in (需转为行的列名))；</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM SCORE_2SELECT SNAME,COURSE,SCORE FROM SCORE_2UNPIVOT (SCORE FOR COURSE IN(CHINESE,MATH,ENGLISH));</code></pre><hr><h3 id="开窗函数练习题"><a href="#开窗函数练习题" class="headerlink" title="开窗函数练习题"></a>开窗函数练习题</h3><h5 id="新老顾客"><a href="#新老顾客" class="headerlink" title="新老顾客"></a>新老顾客</h5><p>创建表：</p><pre class=" language-shell"><code class="language-shell">CREATE TABLE 订单表 (购买时间 VARCHAR2(20),用户名   VARCHAR2(20));insert into 订单表 (购买时间, 用户名)values ('2017-01-01 22:01:23', '张三');insert into 订单表 (购买时间, 用户名)values ('2017-01-02 14:20:02', '张三');insert into 订单表 (购买时间, 用户名)values ('2017-01-02 23:13:55', '李四');insert into 订单表 (购买时间, 用户名)values ('2017-01-02 23:51:20', '李四');insert into 订单表 (购买时间, 用户名)values ('2017-01-03 23:07:15', '李四');COMMIT;SELECT * FROM 订单表;</code></pre><h6 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h6><p>名词定义如下：</p><ul><li>新客：当天有购买，且之前没有购买的人为新客，新客人数+1；</li><li>老客：当天有购买，且之前也有购买的人为老客，老客人数+1；</li></ul><h5 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h5><p>按购买时间统计出每天的新客人数和老客人数</p><h4 id="第一种方法"><a href="#第一种方法" class="headerlink" title="第一种方法"></a>第一种方法</h4><p>思路：<br>1、使用排序开窗函数，查询第几次出现</p><pre class=" language-shell"><code class="language-shell">SELECT DISTINCT SUBSTR(购买时间,1,10) AS 购买时间,用户名 from 订单表;</code></pre><pre class=" language-shell"><code class="language-shell">SELECT D.*, ROW_NUMBER() OVER(PARTITION BY 用户名 ORDER BY 购买时间 ASC) AS RN  FROM (SELECT DISTINCT SUBSTR(购买时间, 1, 10) AS 购买时间, 用户名 from 订单表) D;</code></pre><pre class=" language-shell"><code class="language-shell">SELECT 购买时间,SUM(CASE WHEN RN=1 THEN 1 ELSE 0 END) AS 新客,                SUM(CASE WHEN RN<>1 THEN 1 ELSE 0 END) AS 老客  FROM (SELECT D.*, ROW_NUMBER() OVER(PARTITION BY 用户名 ORDER BY 购买时间 ASC) AS RN          FROM (SELECT DISTINCT SUBSTR(购买时间, 1, 10) AS 购买时间, 用户名 from 订单表) D) GROUP BY 购买时间 ORDER BY 购买时间;</code></pre><h4 id="第二种方法"><a href="#第二种方法" class="headerlink" title="第二种方法"></a>第二种方法</h4><p> 2、使用偏移开窗函数，对比用户名是否相同</p><pre class=" language-shell"><code class="language-shell">SELECT DISTINCT SUBSTR(购买时间,1,10) AS 购买时间,用户名 from 订单表;SELECT D.*,LAG(用户名,1)OVER(PARTITION BY 用户名 ORDER BY 购买时间 ASC) AS YHM   FROM (SELECT DISTINCT SUBSTR(购买时间,1,10) AS 购买时间,用户名 from 订单表) D</code></pre><pre class=" language-shell"><code class="language-shell">SELECT 购买时间,SUM(CASE WHEN YHM IS NULL THEN 1 ELSE 0 END) AS 新客,               sum(CASE WHEN YHM = 用户名 THEN 1 ELSE 0 END) AS 老客 FROM (SELECT D.*,LAG(用户名,1)OVER(PARTITION BY 用户名 ORDER BY 购买时间 ASC) AS YHM          FROM (SELECT DISTINCT SUBSTR(购买时间,1,10) AS 购买时间,用户名 from 订单表) D)GROUP BY 购买时间ORDER BY 购买时间;</code></pre><h5 id="题目-连续登录"><a href="#题目-连续登录" class="headerlink" title="题目 连续登录"></a>题目 连续登录</h5><p>创建表：</p><pre class=" language-shell"><code class="language-shell">CREATE TABLE USER1(USER_ID VARCHAR2(10),LOG_TS  VARCHAR2(20) );insert into USER1 (USER_ID, LOG_TS)values ('A0001', '2020-05-01');insert into USER1 (USER_ID, LOG_TS)values ('A0001', '2020-05-08');insert into USER1 (USER_ID, LOG_TS)values ('A0001', '2020-05-06');insert into USER1 (USER_ID, LOG_TS)values ('A0001', '2020-05-05');insert into USER1 (USER_ID, LOG_TS)values ('A0001', '2020-05-04');insert into USER1 (USER_ID, LOG_TS)values ('A0001', '2020-05-03');insert into USER1 (USER_ID, LOG_TS)values ('A0001', '2020-05-02');insert into USER1 (USER_ID, LOG_TS)values ('A0001', '2020-05-09');insert into USER1 (USER_ID, LOG_TS)values ('A0001', '2020-05-10');insert into USER1 (USER_ID, LOG_TS)values ('A0002', '2020-05-01');insert into USER1 (USER_ID, LOG_TS)values ('A0002', '2020-05-02');insert into USER1 (USER_ID, LOG_TS)values ('A0002', '2020-05-04');insert into USER1 (USER_ID, LOG_TS)values ('A0002', '2020-05-09');insert into USER1 (USER_ID, LOG_TS)values ('A0003', '2020-05-01');insert into USER1 (USER_ID, LOG_TS)values ('A0003', '2020-05-02');insert into USER1 (USER_ID, LOG_TS)values ('A0003', '2020-05-11');insert into USER1 (USER_ID, LOG_TS)values ('A0003', '2020-05-10');insert into USER1 (USER_ID, LOG_TS)values ('A0003', '2020-05-09');insert into USER1 (USER_ID, LOG_TS)values ('A0003', '2020-05-08');insert into USER1 (USER_ID, LOG_TS)values ('A0003', '2020-05-07');COMMIT;SELECT * FROM USER1;</code></pre><p>1.本月登录次数超过5次的用户</p><pre class=" language-shell"><code class="language-shell">SELECT *FROM (SELECT USER1.*,ROW_NUMBER()OVER(PARTITION BY USER_ID order by LOG_TS) AS RN FROM USER1) WHERE RN>5;SELECT USER_ID FROM USER1 GROUP BY USER_ID HAVING COUNT(1)>5;</code></pre><p>2.本月有连续登录5天的用户</p><pre class=" language-shell"><code class="language-shell">SELECT DISTINCT USER_IDFROM (SELECT USER1.*,LAG(LOG_TS,4)OVER(PARTITION BY USER_ID ORDER BY LOG_TS ASC) AS A FROM USER1)WHERE TO_DATE(LOG_TS,'YYYY-MM-DD')-TO_DATE(A,'YYYY-MM-DD')=4;</code></pre><p>对于一天登陆多次的情况(增加一天登录多次的数据)</p><pre class=" language-shell"><code class="language-shell">insert into USER1 (USER_ID, LOG_TS)values ('A0001', '2020-05-05');insert into USER1 (USER_ID, LOG_TS)values ('A0003', '2020-05-07');</code></pre><p>1.本月登录天数超过5次的用户</p><pre class=" language-shell"><code class="language-shell">SELECT *FROM (SELECT U.*,ROW_NUMBER()OVER(PARTITION BY USER_ID order by LOG_TS) AS RN FROM (SELECT DISTINCT * FROM USER1) U) WHERE RN>5;</code></pre><p>2.本月有连续登录5天的用户</p><pre class=" language-shell"><code class="language-shell">SELECT DISTINCT USER_IDFROM (SELECT U.*,LAG(LOG_TS,4)OVER(PARTITION BY USER_ID ORDER BY LOG_TS ASC) AS A FROM (SELECT DISTINCT * FROM USER1) U)WHERE TO_DATE(LOG_TS,'YYYY-MM-DD')-TO_DATE(A,'YYYY-MM-DD')=4;</code></pre><h1 id="the-end。"><a href="#the-end。" class="headerlink" title="the end。"></a>the end。</h1>]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据第一阶段 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oracle第十二天</title>
      <link href="2021/05/04/oracle-di-shi-er-tian/"/>
      <url>2021/05/04/oracle-di-shi-er-tian/</url>
      
        <content type="html"><![CDATA[<h1 id="2021-05-04-Oracle第十二天-五四青年节"><a href="#2021-05-04-Oracle第十二天-五四青年节" class="headerlink" title="2021/05/04 Oracle第十二天   五四青年节"></a>2021/05/04 Oracle第十二天   五四青年节</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Oracle第十二天，今天上午学习了三个种类的开窗函数，因为今天是五四青年节所以下午4点通知放假，哈哈哈哈哈哈哈哈</p><h4 id="开窗函数（又名：分析函数，窗口函数，OLAP函数）"><a href="#开窗函数（又名：分析函数，窗口函数，OLAP函数）" class="headerlink" title="开窗函数（又名：分析函数，窗口函数，OLAP函数）"></a>开窗函数（又名：分析函数，窗口函数，OLAP函数）</h4><p>聚合函数：将数据按照一定的规则分组，统一分析各组的某项情况，每个分组返回一行结果<br>开窗函数：将数据按照一定的规则分组，统一分析各组的某项情况，每行数据返回一行结果<br>（ OLTP:事务处理  –快     OLAP:数据分析—准确）</p><pre class=" language-shell"><code class="language-shell">SELECT DEPTNO,SUM(SAL) FROM EMP GROUP BY DEPTNO;SELECT DEPTNO,ENAME,SAL,SUM(SAL)OVER(PARTITION BY DEPTNO) FROM EMP;</code></pre><h5 id="开窗函数的语法形式："><a href="#开窗函数的语法形式：" class="headerlink" title="开窗函数的语法形式："></a>开窗函数的语法形式：</h5><p>分析函数名()OVER(分析子句) –OVER()是开窗函数的一个标志</p><p>分析函数名：<br>  1.聚合类：SUM() AVG() MAX() MIN() COUNT() –功能与聚合函数上相同<br>  2.排序类：ROW_NUMBER() RANK() DENSE_RANK()<br>  3.偏移类：LAG() LEAD()<br>分析子句：<br>  分组(PARTITION BY) 排序(ORDER BY) 窗口(ROWS) </p><h6 id="分析子句并不一定要写，也不一定全部都写，分析子句的使用依照需求和函数类型而定"><a href="#分析子句并不一定要写，也不一定全部都写，分析子句的使用依照需求和函数类型而定" class="headerlink" title="分析子句并不一定要写，也不一定全部都写，分析子句的使用依照需求和函数类型而定"></a>分析子句并不一定要写，也不一定全部都写，分析子句的使用依照需求和函数类型而定</h6><p>测试表：BNS<br>SELECT * FROM BNS;<br>聚合类举例：<br>用法（以SUM为例）：</p><pre class=" language-shell"><code class="language-shell">SUM(COL_NAME)OVER([PARTITION BY] [ORDER BY] [ROWS]</code></pre><p>查询每天的营业额及整体的营业额总额</p><pre class=" language-shell"><code class="language-shell">SELECT BNS.*,SUM(AMT)OVER() FROM BNS;</code></pre><p>查询每天的营业额及每个周的营业额总额</p><pre class=" language-shell"><code class="language-shell">SELECT BNS.*,SUM(AMT)OVER(PARTITION BY WEEK) FROM BNS;</code></pre><p>查询每天的营业额及每个月的营业额总额</p><pre class=" language-shell"><code class="language-shell">SELECT BNS.*,SUM(AMT)OVER(PARTITION BY SUBSTR(DATA_DT,1,7)) FROM BNS;</code></pre><p>查询每天的营业额及月每日累计营业额</p><pre class=" language-shell"><code class="language-shell">SELECT BNS.*,SUM(AMT)OVER(PARTITION BY SUBSTR(DATA_DT,1,7) ORDER BY DATA_DT asc) from bns;SELECT BNS.*,SUM(AMT)OVER(ORDER BY DATA_DT asc) from bns;</code></pre><p>查询每天的营业额及周每日累计营业额</p><pre class=" language-shell"><code class="language-shell">select BNS.*,SUM(AMT)OVER(PARTITION BY WEEK ORDER BY DATA_DT ASC) FROM BNS;</code></pre><h4 id="OVER-总结："><a href="#OVER-总结：" class="headerlink" title="OVER()总结："></a>OVER()总结：</h4><p>OVER():求整体的某项内容<br>OVER(PARTITIONG BY …):分组，求各组从第一行至组内最后一行的某值<br>OVER(ORDER BY …):排序，以整个数据源为一组，求第一行至当前行的某值<br>OVER(PARTITION BY …ORDER BY …):分组并排序,求各组第一行至当前行的某值</p><p>即： 存在ORDER BY子句时，窗口范围是从第一行到当前行<br>   不存在ORDER BY子句时，窗口范围是从第一行到最后一行</p><h3 id="一、各种窗口范围："><a href="#一、各种窗口范围：" class="headerlink" title="一、各种窗口范围："></a>一、各种窗口范围：</h3><p>PRECEDING:之前的<br>FOLLOWING:之后的<br>UNBOUNDED:不受限的<br>CURRENT:当前的<br>ROW:行</p><pre class=" language-shell"><code class="language-shell">OVER(ROWS BETWEEN ……AND ………)SELECT * FROM BNS;</code></pre><h5 id="例题："><a href="#例题：" class="headerlink" title="例题："></a>例题：</h5><p>求近三天的最高营业额(3)</p><pre class=" language-shell"><code class="language-shell">SELECT BNS.*,MAX(AMT)OVER(ORDER BY DATA_DT ASC ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING ) FROM BNS;SELECT BNS.*,MAX(AMT)OVER(ORDER BY DATA_DT ASC ROWS BETWEEN 2 PRECEDING AND CURRENT ROW ) FROM BNS;SELECT BNS.*,MAX(AMT)OVER(ORDER BY DATA_DT ASC ROWS BETWEEN CURRENT ROW AND 2 FOLLOWING ) FROM BNS;</code></pre><p>截止目前的最高营业额</p><pre class=" language-shell"><code class="language-shell">SELECT BNS.*,MAX(AMT)OVER(ORDER BY DATA_DT ASC ROWS BETWEEN  UNBOUNDED PRECEDING   AND CURRENT ROW) FROM BNS;</code></pre><p>每月截止目前的最高营业额</p><pre class=" language-shell"><code class="language-shell">SELECT BNS.*,MAX(AMT)OVER(PARTITION BY SUBSTR(DATA_DT,1,7) ORDER BY DATA_DT ASC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW ) FROM BNS;</code></pre><h4 id="窗口范围巩固："><a href="#窗口范围巩固：" class="headerlink" title="窗口范围巩固："></a>窗口范围巩固：</h4><pre class=" language-shell"><code class="language-shell">ROWS BETWEEN N PRECEDING AND N FOLLOWING--当前行的前N行到当前行的后N行ROWS BETWEEN CURRENT ROW AND N FOLLOWING--当前行到当前行的后N行ROWS BETWEEN N PRECEDING AND CURRENT ROW--当前行的前N行到当前行ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW--第一行到当前行ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING--当前行到最后一行ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING--第一行到最后一行ROWS BETWEEN UNBOUNDED PRECEDING AND N FOLLOWING--第一行到当前行的后N行ROWS BETWEEN N PRECEDING AND UNBOUNDED FOLLOWING--当前行的前N行到最后一行</code></pre><h4 id="不同分析子句组合："><a href="#不同分析子句组合：" class="headerlink" title="不同分析子句组合："></a>不同分析子句组合：</h4><pre class=" language-shell"><code class="language-shell">SELECT ENAME,SAL,DEPTNO,SUM(SAL)OVER() FROM EMP ;--整体、第一行到最后一行SELECT ENAME,SAL,DEPTNO,SUM(SAL)OVER(PARTITION BY DEPTNO) FROM EMP ;--组内的第一行到组内最后一行SELECT ENAME,SAL,DEPTNO,SUM(SAL)OVER(ORDER BY SAL ) FROM EMP ;--数据源--emp、计算范围：第一行到当前行SELECT ENAME,SAL,DEPTNO,SUM(SAL)OVER(ORDER BY SAL ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING) FROM EMP ;--当前行的前1行到当前行的后1行的薪资总计SELECT ENAME,SAL,DEPTNO,SUM(SAL)OVER(PARTITION BY DEPTNO ORDER BY SAL) FROM EMP ;--部门分组各部门的累计工资、组内第一行到组内的当前行SELECT ENAME,SAL,DEPTNO,SUM(SAL)OVER(PARTITION BY DEPTNO ORDER BY SAL ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING) FROM EMP ;--部门分组累计工资、组内当前行的前1行到当前行的后1 行</code></pre><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>1.窗口子句不能单独出现，必须要有排序子句出现的情况下才能指定窗口范围–缺失ORDER BY 表达式<br>2.<br>1)若未出现分组子句、排序子句，同时未指定窗口范围，默认的窗口范围是数据源第一行到最后一行</p><pre class=" language-shell"><code class="language-shell">SELECT T.*,MAX(AMT)OVER() FROM BNS T;</code></pre><p>2)若出现排序子句，同时未指定窗口范围，默认的窗口范围是数据源第一行到当前行；</p><pre class=" language-shell"><code class="language-shell">SELECT T.*,SUM(AMT)OVER( ORDER BY DATA_DT) FROM BNS T;</code></pre><p>3)若出现排序子句、分组子句，同时未指定窗口范围，默认的窗口范围是组内的第一行到当前行；</p><pre class=" language-shell"><code class="language-shell">SELECT T.*,SUM(AMT)OVER(PARTITION BY WEEK ORDER BY DATA_DT) FROM BNS T;</code></pre><p>PARTITION BY 分组的范围<br>ROWS 统计分析的范围<br>分析范围不会超过分组范围</p><h3 id="聚合类开窗函数注意点："><a href="#聚合类开窗函数注意点：" class="headerlink" title="聚合类开窗函数注意点："></a>聚合类开窗函数注意点：</h3><p>1)分析函数名内必须包含需要分析的内容<br>2)分析子句没有硬性要求<br>3)采用默认窗口范围时，排序字段中下一个相同值会被一并算入</p><pre class=" language-shell"><code class="language-shell">SELECT T.*,       SUM(SAL)OVER(ORDER BY SAL), --排序字段下一行的相等值被记入当前行       SUM(SAL)OVER(ORDER BY SAL ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)       --下一行的相等值未被记入当前行  FROM EMP T;</code></pre><pre class=" language-shell"><code class="language-shell">SELECT T.*,       SUM(SAL)OVER(ORDER BY HIREDATE), --排序字段下一行的相等值被记入当前行       SUM(SAL)OVER(ORDER BY HIREDATE ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)           --下一行的相等值未被记入当前行  FROM EMP T;</code></pre><h3 id="排序类：ROW-NUMBER-RANK-DENSE-RANK"><a href="#排序类：ROW-NUMBER-RANK-DENSE-RANK" class="headerlink" title="排序类：ROW_NUMBER() RANK() DENSE_RANK()"></a>排序类：ROW_NUMBER() RANK() DENSE_RANK()</h3><p>用法（以ROW_NUMBER为例）：</p><pre class=" language-shell"><code class="language-shell">ROW_NUMBER()OVER([PARTITION BY ] ORDER  BY )</code></pre><p>求员工信息，并根据每名员工在整个公司的薪资排名添加序号（从大到小）</p><pre class=" language-shell"><code class="language-shell">SELECT EMP.*,ROW_NUMBER()OVER(ORDER BY SAL DESC) FROM EMP;SELECT EMP.*,RANK()OVER(ORDER BY SAL DESC) FROM EMP;SELECT EMP.*,DENSE_RANK()OVER(ORDER BY SAL DESC) FROM EMP;</code></pre><p>求员工信息，并根据每名员工在各自部门的薪资排名添加序号（从大到小）</p><pre class=" language-shell"><code class="language-shell">SELECT EMP.*,ROW_NUMBER()OVER(PARTITION BY DEPTNO ORDER BY SAL DESC) FROM EMP;SELECT EMP.*,RANK()OVER(PARTITION BY DEPTNO ORDER BY SAL DESC) FROM EMP;SELECT EMP.*,DENSE_RANK()OVER(PARTITION BY DEPTNO ORDER BY SAL DESC) FROM EMP;</code></pre><p>查询每个部门薪资排在前两位的员工信息</p><pre class=" language-shell"><code class="language-shell">SELECT *FROM (SELECT EMP.*,ROW_NUMBER()OVER(PARTITION BY DEPTNO ORDER BY SAL DESC) AS RN FROM EMP) WHERE RN<=2;</code></pre><pre class=" language-shell"><code class="language-shell">SELECT *FROM (SELECT EMP.*,RANK()OVER(PARTITION BY DEPTNO ORDER BY SAL DESC) AS RN FROM EMP) WHERE RN<=2;</code></pre><pre class=" language-shell"><code class="language-shell">SELECT *FROM (SELECT EMP.*,DENSE_RANK()OVER(PARTITION BY DEPTNO ORDER BY SAL DESC) AS RN FROM EMP) WHERE RN<=2;</code></pre><p>查询每天的营业额并在BNS表范围内升序排列</p><pre class=" language-shell"><code class="language-shell">SELECT BNS.*,ROW_NUMBER()OVER(ORDER BY AMT ASC) FROM BNS;</code></pre><p>查询每天的营业额并在每周范围内降序排列</p><pre class=" language-shell"><code class="language-shell">SELECT BNS.*,ROW_number()OVER(PARTITION BY WEEK ORDER BY AMT DESC) FROM BNS;</code></pre><p>查询员工工资排在第二到第四名的员工</p><pre class=" language-shell"><code class="language-shell">SELECT *FROM (SELECT EMP.*,ROW_NUMBER()OVER(ORDER BY SAL DESC) AS RN FROM EMP)WHERE RN BETWEEN 2 AND 4;</code></pre><p>查询各部门薪资前三的员工</p><pre class=" language-shell"><code class="language-shell">SELECT *  FROM (SELECT EMP.*,ROW_NUMBER()OVER(PARTITION BY DEPTNO ORDER BY SAL DESC) AS RN FROM EMP)WHERE RN<=3;</code></pre><p>获取佩奇和乔治最新的体重情况(MY_INFO)</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM MY_INFO;SELECT *FROM (SELECT T.*,ROW_NUMBER()OVER(PARTITION BY SNAME ORDER BY IDATE DESC) AS RN  FROM MY_INFO T)WHERE RN=1;</code></pre><h4 id="排序类开窗函数注意点："><a href="#排序类开窗函数注意点：" class="headerlink" title="排序类开窗函数注意点："></a>排序类开窗函数注意点：</h4><p>1)分析函数名内不能包含任何内容<br>2)分析子句内必须添加ORDER BY，且不能指定窗口</p><h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h4><p>ROW_NUMBER()OVER(ORDER BY ）：从头排到尾，不并列不跳级<br>RANK()OVER(ORDER BY）：从头排到尾，同级并列并跳级<br>DENSE_RANK()OVER(ORDER BY）：从头排到尾，同级并列但不跳级</p><h3 id="偏移类举例：LAG-LEAD"><a href="#偏移类举例：LAG-LEAD" class="headerlink" title="偏移类举例：LAG()   LEAD()"></a>偏移类举例：LAG()   LEAD()</h3><p>用法（以LAG为例）：</p><pre class=" language-shell"><code class="language-shell">LAG(COL_NAME[,OFFSET][,DEFVAL])OVER([PARTITION] ORDER BY):向前偏移N行取数</code></pre><p>COL_NAME:要分析的字段<br>OFFSET:偏移量 –默认偏移一行<br>DEFVAL:默认返回值 –默认返回空null</p><p>查询每天的营业额以及前一天的营业额</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM BNS;SELECT BNS.*,LAG(AMT,1,0)OVER(ORDER BY DATA_DT) FROM BNS;SELECT BNS.*,LAG(AMT,2)OVER(ORDER BY DATA_DT) FROM BNS;SELECT BNS.*,LAG(AMT,-1)OVER(ORDER BY DATA_DT) FROM BNS;--超出范围SELECT BNS.*,LAG(AMT,1,'A')OVER(ORDER BY DATA_DT) FROM BNS;--数据类型不统一SELECT BNS.*,Lead(AMT)OVER(ORDER BY DATA_DT) FROM BNS;SELECT BNS.*,Lead(AMT,-1)OVER(ORDER BY DATA_DT) FROM BNS;--超出范围</code></pre><p>查询每周每天的营业额以及前一天的营业额</p><pre class=" language-shell"><code class="language-shell">SELECT BNS.*,LAG(AMT,1,0)OVER(PARTITION BY WEEK ORDER BY DATA_DT) FROM BNS;</code></pre><p>查询当月连续登录五天的用户</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM USER1;</code></pre><h1 id="the-ending。。。。。。。。。。。"><a href="#the-ending。。。。。。。。。。。" class="headerlink" title="the ending。。。。。。。。。。。"></a>the ending。。。。。。。。。。。</h1>]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据第一阶段 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oracle第十一天</title>
      <link href="2021/04/30/oracle-di-shi-yi-tian/"/>
      <url>2021/04/30/oracle-di-shi-yi-tian/</url>
      
        <content type="html"><![CDATA[<h1 id="2021-04-30-Oracle第十一天"><a href="#2021-04-30-Oracle第十一天" class="headerlink" title="2021/04/30 Oracle第十一天"></a>2021/04/30 Oracle第十一天</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天讲了伪列相关的只是，一共两个知识点，用到的时候不多，记录一哈</p><pre class=" language-shell"><code class="language-shell">SELECT EMP.*,ROWNUM FROM EMP;SELECT EMP.*,ROWNUM FROM EMP WHERE DEPTNO=20;</code></pre><p>ROWNUM是对查询结果自动生成的一个从1开始的、连续的（自然数）序号，<br>它会随着查询步骤的进行而不断发生变化，直到[SELECT]子句执行结束</p><h4 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h4><p>可以将它理解为查询结果前的序号，但该序号是到整个查询SQL结束生成的序号，<br>而ROWNUM是从FROM开始生成到SELECT停止变化的序号</p><pre class=" language-shell"><code class="language-shell">SELECT T.*,ROWNUM FROM EMP T; --伪列前不要加T.SELECT T.*,ROWNUM FROM EMP T WHERE T.DEPTNO = 20;--ROWNUM是变化的SELECT T.*,ROWNUM FROM EMP T WHERE T.DEPTNO = 20 ORDER BY SAL DESC;</code></pre><p>ROWNUM在“不断变化”方面的体现举例：<br>1.查询员工信息表中的前三个员工</p><pre class=" language-shell"><code class="language-shell">SELECT T.* ,T.ROWNUM FROM EMP T WHERE ROWNUM<=3</code></pre><p>2.查询员工工资排在前三名的员工</p><pre class=" language-shell"><code class="language-shell">SELECT E.* ,ROWNUM FROM (SELECT * FROM EMP ORDER BY SAL DESC) E WHERE ROWNUM<=3</code></pre><p>3.查询员工工资排在第二到第四名的员工</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM EMP ORDER BY SAL DESC;SELECT E.*,ROWNUM AS RN FROM (SELECT * FROM EMP ORDER BY SAL DESC) E SELECT *  FROM (SELECT E.*,ROWNUM AS RN FROM (SELECT * FROM EMP ORDER BY SAL DESC) E) WHERE RN BETWEEN 2 AND 4</code></pre><p>4.查询员工工资排在第四名到倒数第四名的员工</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM EMP ORDER BY SAL DESCSELECT E.*,ROWNUM AS RN FROM (SELECT * FROM EMP ORDER BY SAL DESC) E SELECT *   FROM (SELECT E.*,ROWNUM AS RN FROM (SELECT * FROM EMP ORDER BY SAL DESC) E) WHERE RN BETWEEN 4 AND (SELECT COUNT(1)-3 FROM EMP)</code></pre><p>查询工资最低的5名员工信息 </p><pre class=" language-shell"><code class="language-shell">SELECT * FROM EMP ORDER BY SAL ASCSELECT E.*,ROWNUM FROM (SELECT EMP.*,ROWNUM FROM EMP ORDER BY SAL ASC) E WHERE ROWNUM<=5</code></pre><p>查询工资最高的5名员工信息 </p><pre class=" language-shell"><code class="language-shell">SELECT E.*,ROWNUM FROM (SELECT EMP.* FROM EMP ORDER BY SAL DESC) E WHERE ROWNUM<=5</code></pre><h5 id="ROWNUM在WHERE中的使用限制："><a href="#ROWNUM在WHERE中的使用限制：" class="headerlink" title="ROWNUM在WHERE中的使用限制："></a>ROWNUM在WHERE中的使用限制：</h5><pre class=" language-shell"><code class="language-shell">SELECT * FROM EMP WHERE ROWNUM>=2;ROWNUM < N --N>1ROWNUM <= N--N>=1ROWNUM <> N--N<>1ROWNUM = N--N=1ROWNUM > N--N<=0ROWNUM >= N --N<=1ROWNUM BETWEEN N1 AND N2 N1=1 N2>1</code></pre><p>总结：查询范围内至少包含第1条数据</p><p>ROWID：类似于房间号，每一条数据存入到数据库中时，ORACLE都会为其自动生成一条固定不变的、<br>唯一的18位字符串，用以记录该条数据在数据库中的物理位置。<br>在数据库中，直接查询目标数据的ROWID，是查询数据最快、最准确的方法，但一般不用。</p><pre class=" language-shell"><code class="language-shell">SELECT EMP.*,ROWID FROM EMP;--AAATMWAAEAAAAN1AAA--AAATMWAAEAAAAN1AAASELECT EMP.*,ROWID FROM EMP WHERE ENAME='SMITH'SELECT * FROM EMP WHERE ROWID='AAATMWAAEAAAAN1AAA'SELECT * FROM EMP</code></pre><p>数据库查询数据的方法：<br>1.不直接使用ROWID:<br>  1.1 全盘扫描：按照条件，将所有数据从头到尾挨个判断，若条件成立获取对应的ROWID，最后按照ROWID提取数据<br> SELECT T.*,ROWID FROM EMP T WHERE ENAME = ‘KING’;<br> 1.2 索引扫描：按照条件，从索引目录中找到对应的ROWID，最后按照ROWID提取数据<br>2.直接使用ROWID:直接按照ROWID提取数据</p><p>举例：警察抓捕<br>1.1 全盘扫描：挨个敲开每一间屋子，询问是不是某某的房间–<br>1.2 索引扫描：找前台询问某某的房间是哪间，直接过去（前提是有在前台登记）<br>2   ROWID   : 直接到某某所在房间（前提是知道某某的房间号）</p><p>ROWID的其他用途：用于精确去除重复数据中的某一条</p><pre class=" language-shell"><code class="language-shell">--添加几条完全重复的数据SELECT * FROM EMP FOR UPDATE; --尝试获取非重复的数据DISTINCT *SELECT DISTINCT S.* ,ROWID FROM EMP5 S;--AAASr7AAEAAAAGDAAG--尝试删掉多余数据仅保留一条SELECT EMP5.ROWID FROM  EMP5 WHERE ENAME='SMITH'; DELETE FROM  EMP5 WHERE ENAME='SMITH' AND ROWID<> 'AAASr7AAEAAAAGDAAG';SELECT * FROM EMP5 FOR UPDATE;</code></pre><h5 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h5><p>1.伪列需要使用专门的查询才能看到<br>2.伪列不能人为修改<br>3.伪列在查询时注意不要加表名归属</p>]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据第一阶段 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oracle第十天</title>
      <link href="2021/04/29/oracle-di-shi-tian/"/>
      <url>2021/04/29/oracle-di-shi-tian/</url>
      
        <content type="html"><![CDATA[<h1 id="2021-04-29-Oracle第十天"><a href="#2021-04-29-Oracle第十天" class="headerlink" title="2021/04/29 Oracle第十天"></a>2021/04/29 Oracle第十天</h1><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>昨天讲了两个子查询的用途，今天上午做了一套子查询的练习题，下午讲了子查询其他的用途，至此，第三章子查询over</p><h2 id="套娃套的脑子疼"><a href="#套娃套的脑子疼" class="headerlink" title="套娃套的脑子疼"></a>套娃套的脑子疼</h2><p><img src="https://i.loli.net/2021/04/29/8tZFHnMjf4avRX9.jpg" alt="1.jpg"></p><h4 id="子查询的用途3：查询结果作为一个常量，跟在SELECT子句中"><a href="#子查询的用途3：查询结果作为一个常量，跟在SELECT子句中" class="headerlink" title="子查询的用途3：查询结果作为一个常量，跟在SELECT子句中"></a>子查询的用途3：查询结果作为一个常量，跟在SELECT子句中</h4><p>1.查询10号部门员工的姓名、岗位、薪资及部门名称和工作地点</p><pre class=" language-shell"><code class="language-shell">SELECT ENAME,JOB,SAL,1,(SELECT DNAME FROM DEPT WHERE DEPTNO=10),(SELECT LOC FROM DEPT WHERE DEPTNO=10)FROM EMPWHERE DEPTNO=10SELECT ENAME,JOB,SAL,1,(SELECT DNAME FROM DEPT),(SELECT LOC FROM DEPT WHERE DEPTNO=10)FROM EMPWHERE DEPTNO=10--单行子查询返回多个行  SELECT ENAME,JOB,SAL,1,(SELECT DNAME,deptno FROM DEPT WHERE DEPTNO=10),(SELECT LOC FROM DEPT WHERE DEPTNO=10)FROM EMPWHERE DEPTNO=10--值过多</code></pre><p>2.查询10号部门与20号部门在平均薪资上相差了多少</p><pre class=" language-shell"><code class="language-shell">SELECT AVG(SAL) FROM EMP WHERE DEPTNO=10;SELECT AVG(SAL) FROM EMP WHERE DEPTNO=20SELECT ROUND((SELECT AVG(SAL) FROM EMP WHERE DEPTNO=10)-(SELECT AVG(SAL) FROM EMP WHERE DEPTNO=20),2) FROM DUAL;</code></pre><h5 id="子查询作为常量的注意点："><a href="#子查询作为常量的注意点：" class="headerlink" title="子查询作为常量的注意点："></a>子查询作为常量的注意点：</h5><p>1）查询结果限制在单行单列</p><h4 id="子查询的其他用途：用在增删改中（较为少用）"><a href="#子查询的其他用途：用在增删改中（较为少用）" class="headerlink" title="子查询的其他用途：用在增删改中（较为少用）"></a>子查询的其他用途：用在增删改中（较为少用）</h4><p>1.公司今天新来一位员工PEIQI，工号1001，岗位、薪资和奖金与SMITH相同，工作地点在DALLAS</p><pre class=" language-shell"><code class="language-shell">insert INTO EMP (EMPNO,ENAME,JOB,SAL,comm,DEPTNO,HIREDATE) VALUES(1001,'PEIQI',  (SELECT JOB FROM EMP WHERE ENAME='SMITH'),  (SELECT sal FROM EMP WHERE ENAME='SMITH'),  (SELECT COMM FROM EMP WHERE ENAME='SMITH'),  (SELECT DEPTNO FROM DEPT WHERE LOC='DALLAS'),  TRUNC(SYSDATE,'DD'));DELETE FROM EMP WHERE ENAME='PEIQI';SELECT * FROM EMP;</code></pre><p>2.删掉SALES部门的所有员工</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM EMP WHERE DEPTNO=(select deptno FROM DEPT WHERE DNAME='SALES')DELETE FROM EMP WHERE DEPTNO=(select deptno FROM DEPT WHERE DNAME='SALES')</code></pre><p>3.将30号部门的员工底薪更新为公司的平均薪资</p><pre class=" language-shell"><code class="language-shell">SELECT AVG(SAL) FROM EMP;UPDATE EMP SET SAL=(SELECT AVG(SAL) FROM EMP) WHERE DEPTNO=30;</code></pre><h4 id="子查询的其他注意点："><a href="#子查询的其他注意点：" class="headerlink" title="子查询的其他注意点："></a>子查询的其他注意点：</h4><p>1）子查询的结果不要放在GROUP BY子句中，语法上不允许子查询的结果不要放在ORDER BY子句中, 根据常量排序，与未进行排序无异。</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM EMP GROUP BY  (SELECT  JOB FROM EMP )</code></pre><p>2）一条SQL中可以多次出现子查询，这些子查询可以单独出现，也可以层层嵌套<br>3）子查询也可以出现在函数中</p><h4 id="子查询的分类："><a href="#子查询的分类：" class="headerlink" title="子查询的分类："></a>子查询的分类：</h4><h6 id="前面所有例题都有一个共同的特点："><a href="#前面所有例题都有一个共同的特点：" class="headerlink" title="前面所有例题都有一个共同的特点："></a>前面所有例题都有一个共同的特点：</h6><ul><li>子查询部分可以单独执行，即子查询是一个完整的查询语句。</li><li>根据子查询能否单独运行，或根据子查询中是否牵扯主查询中的任何内容,分成相关子查询与非相关子查询。<h6 id="非相关子查询："><a href="#非相关子查询：" class="headerlink" title="非相关子查询："></a>非相关子查询：</h6></li><li>子查询语句能够独自运行，子查询中不牵扯主查询中的任何内容，主查询在乎的是子查询的结果<h6 id="相关子查询："><a href="#相关子查询：" class="headerlink" title="相关子查询："></a>相关子查询：</h6></li><li>子查询语句不能独自运行，子查询中牵扯主查询中的一部分内容，主查询只在乎与子查询的关系</li></ul><h4 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h4><ol><li>非相关子查询可以用在任何位置，而相关子查询仅用在WHERE或HAVING子句中作为条件，且绝大多数情况下两者可以发生转换。</li><li>非相关子查询在书写和理解上都更加容易，而相关子查询之所以存在，是因为在很多情况下使用相关子查询能有更高的运行效率。</li></ol><h5 id="相关子查询的关键词："><a href="#相关子查询的关键词：" class="headerlink" title="相关子查询的关键词："></a>相关子查询的关键词：</h5><p>EXISTS : 对应条件查询中的IN<br>NOT EXISTS : 对应条件查询中的 NOT IN</p><p>语法：</p><pre class=" language-shell"><code class="language-shell">SELECT T1.COL_LIST  FROM TB_NAME1 T1 WHERE [NOT] EXISTS (SELECT T2.COL_LIST                       FROM TB_NAME2 T2                      WHERE T1.COL_NAME = T2.COL_NAME                        AND T2.CONDITION);</code></pre><h4 id="示例题目"><a href="#示例题目" class="headerlink" title="示例题目"></a>示例题目</h4><p>1.查询SMITH所在部门的员工信息</p><pre class=" language-shell"><code class="language-shell">SELECT DEPTNO FROM EMP WHERE ENAME='SMITH'SELECT * FROM EMP WHERE DEPTNO=(SELECT DEPTNO FROM EMP WHERE ENAME='SMITH');SELECT * FROM EMP E1 WHERE EXISTS(SELECT DEPTNO FROM EMP E2 WHERE ENAME='SMITH' AND E1.DEPTNO=E2.DEPTNO);SELECT * FROM EMP E1 WHERE EXISTS(SELECT '今天天气不太好' FROM EMP E2 WHERE ENAME='SMITH' AND E1.DEPTNO=E2.DEPTNO);</code></pre><p>2.查询BLAKE带领的员工有哪些</p><pre class=" language-shell"><code class="language-shell">SELECT EMPNO FROM EMP WHERE ENAME='BLAKE'SELECT * FROM EMP WHERE MGR=(SELECT EMPNO FROM EMP WHERE ENAME='BLAKE');SELECT * FROM EMP E WHERE EXISTS(SELECT EMPNO FROM EMP E1 WHERE ENAME='BLAKE' AND E.MGR=E1.EMPNO);</code></pre><h1 id="the-end……"><a href="#the-end……" class="headerlink" title="the end……"></a>the end……</h1><h2 id="blog-from-codeliuzhan-cn"><a href="#blog-from-codeliuzhan-cn" class="headerlink" title="blog from codeliuzhan.cn"></a>blog from codeliuzhan.cn</h2><h1 id="放松一哈吧"><a href="#放松一哈吧" class="headerlink" title="放松一哈吧"></a>放松一哈吧</h1><p><img src="https://i.loli.net/2021/04/29/CkwNimWSPjaltQr.jpg" alt="2.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据第一阶段 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oracle第九天</title>
      <link href="2021/04/28/oracle-di-jiu-tian/"/>
      <url>2021/04/28/oracle-di-jiu-tian/</url>
      
        <content type="html"><![CDATA[<h1 id="2021-04-28-Oracle第九天"><a href="#2021-04-28-Oracle第九天" class="headerlink" title="2021/04/28 Oracle第九天"></a>2021/04/28 Oracle第九天</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天下午讲了两个子查询，一个FROM后面确定数据源的，一个WHERE、HAVING后面做条件的，套娃套娃再套娃。</p><p>N行N列的概念：<br>根据查询结果行数与列数的不同，简单分为以下四种查询结果</p><p>单行单列：无论是在行还是列上，都只有一个</p><pre class=" language-shell"><code class="language-shell">--查询整个公司的最高薪资select MAX(SAL) FROM EMP;</code></pre><p>单行多列：查询结果中仅有一行数据，但是列数上不止一列</p><pre class=" language-shell"><code class="language-shell">--查询SMITH的姓名、岗位和薪资SELECT ENAME,SAL,JOB FROM EMP WHERE ENAME='SMITH';</code></pre><p>多行单列：查询结果中仅有一列数据，不过行数上不止一行</p><pre class=" language-shell"><code class="language-shell">--查询10号部门的人员名单SELECT ENAME FROM EMP WHERE DEPTNO=10;</code></pre><p>多行多列：无论是在行还是列上，都不止一个</p><pre class=" language-shell"><code class="language-shell">--查询所有员工的工号、姓名、岗位和部门SELECT EMPNO,ENAME,JOB,DEPTNO FROM EMP;</code></pre><h5 id="子查询的定义："><a href="#子查询的定义：" class="headerlink" title="子查询的定义："></a>子查询的定义：</h5><p>在一个查询语句中，嵌入一条查询语句，该条嵌入的语句的查询结果成为外层SQL的一部分，即子查询。</p><pre class=" language-shell"><code class="language-shell">--例：查询公司最早入职的入职时间SELECT MIN(HIREDATE) FROM EMP;</code></pre><pre class=" language-shell"><code class="language-shell">查询公司最早入职的 员工SELECT * FROM EMP WHERE HIREDATE= (SELECT MIN(hiredate) FROM EMP);</code></pre><pre class=" language-shell"><code class="language-shell">--查询SMITH所在部门的员工信息SELECT DEPTNO FROM EMP WHERE ENAME='SMITH'SELECT * FROM EMP WHERE DEPTNO=20SELECT * FROM EMP WHERE DEPTNO=(SELECT DEPTNO FROM EMP WHERE ENAME='SMITH')</code></pre><h4 id="子查询的用途1"><a href="#子查询的用途1" class="headerlink" title="子查询的用途1"></a>子查询的用途1</h4><p>查询结果作为一个集合，跟在WHERE或HAVING子句中（最多）<br>子查询为单行单列</p><pre class=" language-shell"><code class="language-shell">--1.查询BLAKE带领的员工有哪些--1找BLAKE的员工编号select EMPNO FROM EMP WHERE ENAME='BLAKE';--2找领导编号是**编号的员工SELECT * FROM EMP WHERE MGR=7698SELECT * FROM EMP WHERE MGR=(select EMPNO FROM EMP WHERE ENAME='BLAKE');</code></pre><p>–2.查询BLAKE的领导手下有哪些员工</p><pre class=" language-shell"><code class="language-shell">1、找BLAKE的领导编号SELECT MGR FROM EMP WHERE ENAME='BLAKE';2、找领导编号是**的员工SELECT * FROM EMP WHERE MGR=7839;SELECT * FROM EMP WHERE MGR=(SELECT MGR FROM EMP WHERE ENAME='BLAKE');</code></pre><p>3.显示部门名称为RESEARCH的员工的姓名和工资</p><pre class=" language-shell"><code class="language-shell">SELECT DEPTNO FROM DEPT WHERE DNAME='RESEARCH';SELECT * FROM EMP WHERE DEPTNO=(SELECT DEPTNO FROM DEPT WHERE DNAME='RESEARCH');</code></pre><p>4.查询公司内薪资最高的员工</p><pre class=" language-shell"><code class="language-shell">SELECT MAX(SAL) FROM EMP;SELECT * FROM EMP WHERE SAL=(SELECT MAX(SAL) FROM EMP);</code></pre><p>5.求工资最低的员工所在部门的所有员工的姓名</p><pre class=" language-shell"><code class="language-shell">1.MIN(SAL)SELECT MIN(SAL) FROM EMP;--8002.MIN(SAL)--DEPTNOSELECT DEPTNO FROM EMP WHERE SAL=800;--20SELECT DEPTNO FROM EMP WHERE SAL=(SELECT MIN(SAL) FROM EMP);3.**DEPTNO--员工的姓名SELECT ENAME FROM EMP WHERE DEPTNO=(SELECT DEPTNO FROM EMP WHERE SAL=(SELECT MIN(SAL) FROM EMP))</code></pre><h4 id="子查询为多行单列"><a href="#子查询为多行单列" class="headerlink" title="子查询为多行单列"></a>子查询为多行单列</h4><p>6.查询SMITH和JAMES所在部门的员工信息</p><pre class=" language-shell"><code class="language-shell">1.SMITH和JAMES所在部门SELECT DEPTNO FROM EMP WHERE ENAME IN('SMITH','JAMES')2.**部门的员工SELECT * FROM EMP WHERE DEPTNO IN(20,30);SELECT * FROM EMP WHERE DEPTNO IN(SELECT DEPTNO FROM EMP WHERE ENAME IN('SMITH','JAMES'));SELECT * FROM EMP WHERE DEPTNO =(SELECT DEPTNO FROM EMP WHERE ENAME IN('SMITH','JAMES'));--返回多个行</code></pre><h4 id="子查询为单行多列"><a href="#子查询为单行多列" class="headerlink" title="子查询为单行多列"></a>子查询为单行多列</h4><p>7.查询与SMITH同部门且薪资相等的员工</p><pre class=" language-shell"><code class="language-shell">1.SMITH的部门、薪资select DEPTNO,SAL FROM EMP WHERE ENAME='SMITH'2.**部门**薪资的员工SELECT * FROM EMP WHERE (DEPTNO,SAL) IN((20,800)) ;SELECT * FROM EMP WHERE (DEPTNO,SAL) IN(select DEPTNO,SAL FROM EMP WHERE ENAME='SMITH') ;查询与SMITH同部门HUO与SMITH薪资相等的员工SELECT * FROM EMP WHERE  DEPTNO=(SELECT DEPTNO FROM EMP WHERE ENAME='SMITH') OR SAL=(SELECT SAL FROM EMP WHERE ENAME='SMITH')</code></pre><h4 id="子查询为多行多列"><a href="#子查询为多行多列" class="headerlink" title="子查询为多行多列"></a>子查询为多行多列</h4><p>8.查询与SMITH同部门同薪资或与JAMES同部门同薪资的员工</p><pre class=" language-shell"><code class="language-shell">1.查SMITH、JAMES的部门、薪资SELECT DEPTNO,SAL FROM EMP WHERE ENAME IN('SMITH','JAMES')2、查**部门qie**薪资的员工SELECT * FROM EMP WHERE (DEPTNO,SAL) IN((20,800),(30,950));SELECT * FROM EMP WHERE (DEPTNO,SAL) IN(SELECT DEPTNO,SAL FROM EMP WHERE ENAME IN('SMITH','JAMES'));SELECT * FROM EMP WHERE (DEPTNO,SAL) IN(SELECT SAL,DEPTNO FROM EMP WHERE ENAME IN('SMITH','JAMES'));SELECT * FROM EMP WHERE (DEPTNO,SAL) IN(SELECT DEPTNO,SAL,JOB FROM EMP WHERE ENAME IN('SMITH','JAMES'));--值过多SELECT * FROM EMP WHERE (DEPTNO,SAL,job) IN(SELECT DEPTNO,SAL FROM EMP WHERE ENAME IN('SMITH','JAMES'));--没有足够的值</code></pre><p>9.查询与WARD或ALLEN或与SCOTT同部门同薪资的员工</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM EMP WHERE (DEPTNO,SAL) IN(SELECT DEPTNO,SAL FROM EMP WHERE ENAME IN('WARD','ALLEN','SCOTT'));</code></pre><p>10.查询公司内各部门薪资最高的员工</p><pre class=" language-shell"><code class="language-shell">SELECT DEPTNO,MAX(SAL) FROM EMP GROUP BY DEPTNOSELECT * FROM EMP  WHERE  (DEPTNO,SAL) IN(SELECT DEPTNO,MAX(SAL) FROM EMP GROUP BY DEPTNO)</code></pre><h4 id="条件写在HAVING子句中"><a href="#条件写在HAVING子句中" class="headerlink" title="条件写在HAVING子句中"></a>条件写在HAVING子句中</h4><p>11.查询公司内哪个部门的平均工资高于整个公司的平均工资</p><pre class=" language-shell"><code class="language-shell">1、SELECT AVG(SAL) FROM EMP--2073.21428571429SELECT AVG(SAL),DEPTNO FROM EMP  GROUP BY DEPTNO HAVING AVG(SAL) >(SELECT AVG(SAL) FROM EMP)</code></pre><p>12.查询公司有员工的部门 信息</p><pre class=" language-shell"><code class="language-shell">SELECT DEPTNO FROM EMP GROUP BY DEPTNO HAVING COUNT(1)>0;SELECT * FROM DEPT WHERE DEPTNO IN(SELECT DEPTNO FROM EMP GROUP BY DEPTNO HAVING COUNT(1)>0);</code></pre><p>13.查询公司没有员工的部门 信息</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM DEPT WHERE DEPTNO NOT IN(SELECT DEPTNO FROM EMP GROUP BY DEPTNO HAVING COUNT(1)>0);</code></pre><p>12.查询公司有员工的部门 信息</p><pre class=" language-shell"><code class="language-shell">SELECT DISTINCT DEPTNO FROM EMP;SELECT * FROM DEPT WHERE DEPTNO IN(SELECT DISTINCT DEPTNO FROM EMP);SELECT * FROM DEPT WHERE DEPTNO IN(SELECT DEPTNO FROM EMP);in（10,10,20,20,30,10,30）</code></pre><p>查询公司没有员工的部门 信息</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM DEPT WHERE DEPTNO not IN(SELECT DEPTNO FROM EMP);</code></pre><h3 id="子查询用在条件中的注意点："><a href="#子查询用在条件中的注意点：" class="headerlink" title="子查询用在条件中的注意点："></a>子查询用在条件中的注意点：</h3><p>1）可以使用N行N列中的每一种情况<br>2）主查询与子查询无论在列数还是属性上都要相统一</p><h3 id="子查询书写步骤"><a href="#子查询书写步骤" class="headerlink" title="子查询书写步骤"></a>子查询书写步骤</h3><ol><li>把题目拆解</li><li>先写子查询，写完子查询后验证</li><li>将子查询合并到主查询</li></ol><h4 id="子查询的用途2：查询结果作为一个数据源，跟在FROM子句中："><a href="#子查询的用途2：查询结果作为一个数据源，跟在FROM子句中：" class="headerlink" title="子查询的用途2：查询结果作为一个数据源，跟在FROM子句中："></a>子查询的用途2：查询结果作为一个数据源，跟在FROM子句中：</h4><p>1.查找平均工资最高的部门</p><pre class=" language-shell"><code class="language-shell">SELECT DEPTNO,AVG(SAL) FROM EMP GROUP BY DEPTNOSELECT MAX(A) FROM (SELECT AVG(SAL) AS A FROM EMP GROUP BY DEPTNO);SELECT DEPTNO  FROM (SELECT DEPTNO, AVG(SAL) AS B FROM EMP GROUP BY DEPTNO) WHERE B =(SELECT MAX(A) FROM (SELECT AVG(SAL) AS A FROM EMP GROUP BY DEPTNO)) SELECT * FROM EMP WHERE DEPTNO=(SELECT DEPTNO                  FROM (SELECT DEPTNO, AVG(SAL) AS B FROM EMP GROUP BY DEPTNO)                 WHERE B =(SELECT MAX(A) FROM (SELECT AVG(SAL) AS A FROM EMP GROUP BY DEPTNO)))</code></pre><p>###大多数情况不可以用：</p><pre class=" language-shell"><code class="language-shell">SELECT MAX(AVG(SAL)) FROM EMP GROUP BY DEPTNO;               </code></pre><p>2.查找平均工资最低的岗位</p><pre class=" language-shell"><code class="language-shell">SELECT MIN(AVG(SAL)) FROM EMP GROUP BY JOBSELECT JOB,AVG(SAL) FROM EMP GROUP BY JOBSELECT JOB   FROM (SELECT JOB,AVG(SAL) AS A FROM EMP GROUP BY JOB) WHERE A=(SELECT MIN(AVG(SAL)) FROM EMP GROUP BY JOB)</code></pre><h3 id="子查询作为数据源的注意点："><a href="#子查询作为数据源的注意点：" class="headerlink" title="子查询作为数据源的注意点："></a>子查询作为数据源的注意点：</h3><p>1）数据源本身没有行列的限制，所以子查询在该处也可使用N行N列的每种情况<br>2）子查询作为数据源时，若SELECT子句某字段上出现了函数，则该字段只有命别名才可以被主查询引用</p>]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据第一阶段 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oracle第八天</title>
      <link href="2021/04/27/oracle-di-ba-tian/"/>
      <url>2021/04/27/oracle-di-ba-tian/</url>
      
        <content type="html"><![CDATA[<h1 id="2021-04-27-Oracle第八天"><a href="#2021-04-27-Oracle第八天" class="headerlink" title="2021/04/27 Oracle第八天"></a>2021/04/27 Oracle第八天</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天笔记对数值型函数和日期型函数做一个总结。</p><h3 id="数值型函数"><a href="#数值型函数" class="headerlink" title="数值型函数"></a>数值型函数</h3><h4 id="1-取绝对值"><a href="#1-取绝对值" class="headerlink" title="1.取绝对值"></a>1.取绝对值</h4><p>ABS(NUM):获取数值NUM对应的绝对值。<br>该函数通常不直接对某数值进行取绝对值，而是对于一系列的计算结果获取绝对值。</p><pre class=" language-shell"><code class="language-shell">SELECT ABS(3.45),ABS(-4.56) FROM DUAL;SELECT SAL,COMM,SAL-COMM,ABS(SAL-COMM) FROM EMP;SELECT ABS(5),ABS(-4) FROM DUAL;SELECT ABS('A'),ABS(-4) FROM DUAL;</code></pre><h4 id="2-向上取整与向下取整"><a href="#2-向上取整与向下取整" class="headerlink" title="2.向上取整与向下取整"></a>2.向上取整与向下取整</h4><ul><li>CEIL(NUM) ：向上取整，获取离NUM最近的两个整数中较大的那个数</li><li>FLOOR(NUM)：向下取整，获取离NUM最近的两个整数中较小的那个数<pre class=" language-shell"><code class="language-shell">SELECT CEIL(2.56),FLOOR(2.56) FROM DUAL;SELECT CEIL(5),FLOOR(5) FROM DUAL;</code></pre><h5 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h5></li></ul><ol><li>若NUM本身即为整数，则无论向上取整还是向下取整，返回结果都为NUM本身</li><li>无论NUM是正数还是负数，所谓上，即数轴指向的方向，所谓下，即数轴背向的方向<pre class=" language-shell"><code class="language-shell">SELECT CEIL(-2.56),FLOOR(-2.56) FROM DUAL;</code></pre></li></ol><p>SELECT CEIL(1.23,2),FLOOR(1.23,2) FROM DUAL;–参数个数无效<br>sELECT CEIL(‘1.2a5’),FLOOR(‘1.2a5’) FROM DUAL;–无效数字<br>SELECT CEIL(‘A’),FLOOR(‘A’) FROM DUAL;–无效数字</p><pre><code>#### 3.取余MOD(X,Y)：X是被除数，Y是除数，计算Y整除X，获取计算结果中的余数。（不是商！不是商！不是商！）MOD函数对于纯数学范畴的使用很少，但智慧的程序员们却因此提出了“分库分表”的概念：将数据按照一定规则均分到不同的数据库（表）中，变串行为并行，以此来提高代码和程序的运行效率。```shellSELECT MOD(13,5) FROM DUAL;select * from STUDENT_ALL;SELECT STD_NO,CASE WHEN MOD(STD_NO,4)=0 THEN 'A'                   WHEN MOD(STD_NO,4)=1 THEN 'B'                   WHEN MOD(STD_NO,4)=2 THEN 'C'                   ELSE 'D'               END   FROM STUDENT_ALL;</code></pre><h4 id="4-四舍五入"><a href="#4-四舍五入" class="headerlink" title="4.四舍五入"></a>4.四舍五入</h4><p>ROUND(NUM[,P])：对数值NUM进行四舍五入，其中参数P决定了四舍五入的精度<br>基础用法</p><pre class=" language-shell"><code class="language-shell">SELECT ROUND(5.6789,2),ROUND(5.4321,2) FROM DUAL;SELECT ROUND(12345.6789,1) FROM DUAL;</code></pre><p>精度为0或者精度省略</p><pre class=" language-shell"><code class="language-shell">SELECT ROUND(5.6789,0),ROUND(5.6789) FROM DUAL;</code></pre><p>负数的四舍五入</p><pre class=" language-shell"><code class="language-shell">SELECT ROUND(-5.4),ROUND(-5.6) FROM DUAL; </code></pre><p>精度为负数</p><pre class=" language-shell"><code class="language-shell">SELECT ROUND(45.321,-1),ROUND(45.321,-2),ROUND(55.321,-2),ROUND(0055.321,-3) FROM DUAL;</code></pre><p>精度不为整数</p><pre class=" language-shell"><code class="language-shell">SELECT ROUND(5.4321,2.22222),ROUND(5.4321,2.99999) FROM DUAL;--按照整数位进行计算</code></pre><h4 id="5-截断"><a href="#5-截断" class="headerlink" title="5.截断"></a>5.截断</h4><p>TRUNC(NUM[,P]) ：对数值NUM进行截断，其中参数P决定了截断的精度</p><p>基础用法</p><pre class=" language-shell"><code class="language-shell">SELECT TRUNC(4.54321,2),TRUNC(4.56789,2) FROM DUAL;</code></pre><p>精度为0或精度省略</p><pre class=" language-shell"><code class="language-shell">SELECT TRUNC(4.54321,0),TRUNC(4.54321) FROM DUAL;</code></pre><p>负数的截取</p><pre class=" language-shell"><code class="language-shell">SELECT TRUNC(-1.4),TRUNC(-1.6) FROM DUAL;</code></pre><p>精度为负数</p><pre class=" language-shell"><code class="language-shell">SELECT TRUNC(45.321,-1),TRUNC(045.321,-2),TRUNC(055.321,-2),TRUNC(0055.321,-3) FROM DUAL;</code></pre><p>精度不为整数</p><pre class=" language-shell"><code class="language-shell">SELECT TRUNC(5.4321,2.22222),TRUNC(5.4321,2.99999) FROM DUAL;</code></pre><h5 id="平方根"><a href="#平方根" class="headerlink" title="平方根"></a>平方根</h5><p>SQRT(num)一个参数,返回该参数的平方根</p><pre class=" language-shell"><code class="language-shell">select sqrt(16) from dual;SELECT SQRT(0) FROM DUAL;SELECT SQRT(-4) FROM DUAL;SELECT SQRT(5) FROM DUAL;SELECT 1/3 FROM DUAL;SELECT 0.3333333333333336 FROM DUAL;</code></pre><h5 id="POWER-X-Y-：幂指函数"><a href="#POWER-X-Y-：幂指函数" class="headerlink" title="POWER(X,Y)：幂指函数"></a>POWER(X,Y)：幂指函数</h5><pre class=" language-shell"><code class="language-shell">select power(3,3) from dual;select power(3,2) from dual;SELECT POWER(3,0) FROM DUAL;SELECT POWER(3,1) FROM DUAL;SELECT POWER(3,-1) FROM DUAL;</code></pre><h3 id="1-关于日期的四舍五入与截断"><a href="#1-关于日期的四舍五入与截断" class="headerlink" title="1.关于日期的四舍五入与截断"></a>1.关于日期的四舍五入与截断</h3><h3 id="2-获取月份差值"><a href="#2-获取月份差值" class="headerlink" title="2.获取月份差值"></a>2.获取月份差值</h3><h3 id="3-获取月末日期"><a href="#3-获取月末日期" class="headerlink" title="3.获取月末日期"></a>3.获取月末日期</h3><h3 id="4-月份加减"><a href="#4-月份加减" class="headerlink" title="4.月份加减"></a>4.月份加减</h3><h3 id="5-获取下个周几"><a href="#5-获取下个周几" class="headerlink" title="5.获取下个周几"></a>5.获取下个周几</h3><p>关于日期的计算：日期直接加减一个整数，该数值以天为单位计算。</p><pre class=" language-shell"><code class="language-shell">SELECT SYSDATE+5 FROM DUAL;</code></pre><h4 id="1-关于日期的四舍五入与截断-1"><a href="#1-关于日期的四舍五入与截断-1" class="headerlink" title="1.关于日期的四舍五入与截断"></a>1.关于日期的四舍五入与截断</h4><p>ROUND() 函数与 TRUNC()函数<br>除了可以作用在数值上，也可以作用在日期上，对于日期也同样有四舍五入或截断的需求</p><p>对于四舍五入，<br>在数值方面依靠数值5作为分界线，达不到5即被舍去，达到5即向前进1。</p><p>在日期方面，四舍五入同样需要一个分界线，该分界线在不同的时间单位中并不相同，原则上是取居中的位置作为分界线。</p><p>对于截断，日期的截断与数值的截断类似，定位到截取精度，直接舍弃精度之外的部分，留下精度之内的部分。</p><hr><h5 id="省略精度，即默认的精确到天，天的界限12-00"><a href="#省略精度，即默认的精确到天，天的界限12-00" class="headerlink" title="省略精度，即默认的精确到天，天的界限12:00"></a>省略精度，即默认的精确到天，天的界限12:00</h5><pre class=" language-shell"><code class="language-shell">SELECT SYSDATE,ROUND(SYSDATE,'DD') FROM DUAL; SELECT  TO_DATE('20201007 11:59:59','YYYYMMDD HH24:MI:SS'),        ROUND(TO_DATE('20201007 11:59:59','YYYYMMDD HH24:MI:SS'),'DD'),         ROUND(TO_DATE('20201007 12:00:00','YYYYMMDD HH24:MI:SS'),'DD'),         ROUND(TO_DATE('20201007 12:00:01','YYYYMMDD HH24:MI:SS'),'DD'),         ROUND(TO_DATE('20201031 12:00:01','YYYYMMDD HH24:MI:SS'),'DD'),         ROUND(TO_DATE('20201231 12:00:01','YYYYMMDD HH24:MI:SS'),'DD')   FROM DUAL; </code></pre><h5 id="年的界限：7月"><a href="#年的界限：7月" class="headerlink" title="年的界限：7月"></a>年的界限：7月</h5><pre class=" language-shell"><code class="language-shell">SELECT SYSDATE,ROUND(SYSDATE,'YYYY'),TRUNC(SYSDATE,'YYYY') FROM DUAL;SELECT TO_DATE('20200630','YYYYMMDD'),       ROUND(TO_DATE('20200630','YYYYMMDD'),'YYYY'),       TRUNC(TO_DATE('20200630','YYYYMMDD'),'YYYY'),       ROUND(TO_DATE('20200701','YYYYMMDD'),'YYYY'),       TRUNC(TO_DATE('20200701','YYYYMMDD'),'YYYY')    FROM DUAL;</code></pre><h5 id="月的界限：16日"><a href="#月的界限：16日" class="headerlink" title="月的界限：16日"></a>月的界限：16日</h5><pre class=" language-shell"><code class="language-shell">SELECT SYSDATE,ROUND(SYSDATE,'MM'),TRUNC(SYSDATE,'MM') FROM DUAL;SELECT TO_DATE('20201015','YYYYMMDD'),       ROUND(TO_DATE('20201015','YYYYMMDD'),'MM'),       ROUND(TO_DATE('20201016','YYYYMMDD'),'MM'),       ROUND(TO_DATE('20201017','YYYYMMDD'),'MM')    FROM DUAL;</code></pre><h5 id="思考2月的界限？"><a href="#思考2月的界限？" class="headerlink" title="思考2月的界限？"></a>思考2月的界限？</h5><pre class=" language-shell"><code class="language-shell">SELECT TO_DATE('20200215','YYYYMMDD'),       ROUND(TO_DATE('20200215','YYYYMMDD'),'MM'),       ROUND(TO_DATE('20200216','YYYYMMDD'),'MM'),       ROUND(TO_DATE('20200217','YYYYMMDD'),'MM')    FROM DUAL;</code></pre><h5 id="季的界限：中间月份的16日"><a href="#季的界限：中间月份的16日" class="headerlink" title="季的界限：中间月份的16日"></a>季的界限：中间月份的16日</h5><pre class=" language-shell"><code class="language-shell">SELECT SYSDATE,ROUND(SYSDATE,'Q'),TRUNC(SYSDATE,'Q') FROM DUAL;SELECT TO_DATE('20201115','YYYYMMDD'),       ROUND(TO_DATE('20201115','YYYYMMDD'),'Q'),       ROUND(TO_DATE('20201116','YYYYMMDD'),'Q'),       ROUND(TO_DATE('20201117','YYYYMMDD'),'Q')    FROM DUAL;  SELECT TO_DATE('20200215','YYYYMMDD'),       ROUND(TO_DATE('20200215','YYYYMMDD'),'Q'),       ROUND(TO_DATE('20200216','YYYYMMDD'),'Q'),       ROUND(TO_DATE('20200217','YYYYMMDD'),'Q')    FROM DUAL;</code></pre><h5 id="小时的界限：30分"><a href="#小时的界限：30分" class="headerlink" title="小时的界限：30分"></a>小时的界限：30分</h5><pre class=" language-shell"><code class="language-shell">SELECT SYSDATE,ROUND(SYSDATE,'HH24'),TRUNC(SYSDATE,'HH24') FROM DUAL;SELECT TO_DATE('20201007 15:29:59','YYYYMMDD HH24:MI:SS'),  ROUND(TO_DATE('20201007 15:29:59','YYYYMMDDHH24:MI:SS'),'HH24'),  ROUND(TO_DATE('20201007 15:30:00','YYYYMMDD HH24:MI:SS'),'HH24'),  ROUND(TO_DATE('20201007 15:31:00','YYYYMMDD HH24:MI:SS'),'HH24')FROM DUAL;</code></pre><h5 id="星期的界限"><a href="#星期的界限" class="headerlink" title="星期的界限"></a>星期的界限</h5><p>星期用哪个关键词：iw DAY<br>星期如何清零<br>星期的界限在哪</p><pre class=" language-shell"><code class="language-shell">       清零                     界限IW  :  星期一              星期四 12点DAY :  星期日              星期三 12点DY  :  星期日              星期三 12点</code></pre><h6 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h6><pre class=" language-shell"><code class="language-shell">SELECT SYSDATE,ROUND(SYSDATE,'day') FROM DUAL;SELECT ROUND(TO_DATE('20201008 11:59:59','YYYYMMDD HH24:MI:SS'),'IW'),        ROUND(TO_DATE('20201008 12:00:00','YYYYMMDD HH24:MI:SS'),'IW')  FROM DUAL;      SELECT SYSDATE,ROUND(SYSDATE,'DAY') FROM DUAL;SELECT TO_DATE('20201007','YYYYMMDD'),       ROUND(TO_DATE('20201007 11:59:59','YYYYMMDD HH24:MI:SS'),'DAY'),       ROUND(TO_DATE('20201007 12:00:00','YYYYMMDD HH24:MI:SS'),'DAY')  FROM DUAL;  SELECT TO_CHAR(TO_DATE('20201007','YYYYMMDD'),'YYYYMMDD HH24:MI:SS'),       ROUND(TO_DATE('20201007','YYYYMMDD'),'DAY'),       ROUND(TO_DATE('20201007','YYYYMMDD'),'DAY')  FROM DUAL;</code></pre><h4 id="2-获取月份差值-1"><a href="#2-获取月份差值-1" class="headerlink" title="2.获取月份差值"></a>2.获取月份差值</h4><p>MONTHS_BETWEEN(d1,d2) :求D1和D2之间相差几个月（d1&gt;d2）</p><p>常规用法：给定两个日期求两日期之间的月份差</p><ol><li><p>计算从元旦到今天经过了几个月（非整数月）</p><pre class=" language-shell"><code class="language-shell">SELECT TRUNC(MONTHS_BETWEEN(TRUNC(SYSDATE,'DD'),TO_DATE('20210101','YYYYMMDD'))) FROM DUAL;SELECT 26/31 FROM DUAL;</code></pre></li><li><p>计算从元旦到今天经过了几个月（整数月）</p><pre class=" language-shell"><code class="language-shell">SELECT TRUNC(MONTHS_BETWEEN(TRUNC(SYSDATE,'DD'),TO_DATE('20210101','YYYYMMDD'))) FROM DUAL;</code></pre></li></ol><p>SELECT ABS(TRUNC(MONTHS_BETWEEN(TO_DATE(‘20210101’,’YYYYMMDD’),TRUNC(SYSDATE,’DD’)))) FROM DUAL;</p><p>SELECT TRUNC(SYSDATE,’MM’),MONTHS_BETWEEN(TRUNC(SYSDATE,’MM’),TO_DATE(‘20210101’,’YYYYMMDD’)) FROM DUAL;</p><p>SELECT MONTHS_BETWEEN(TO_DATE(‘20210430’,’YYYYMMDD’),TO_DATE(‘20210228’,’YYYYMMDD’)) FROM DUAL;</p><pre><code>3. 计算从今天到明年元旦还要等待几个月（整数月）```shell</code></pre><h4 id="特殊情况"><a href="#特殊情况" class="headerlink" title="特殊情况"></a>特殊情况</h4><p>1）一般工作中使用到的情况是，给定两个月初或月末日期、或者两个DD相同的日期。<br>如果给定的两个日期DD不相同，月份差会得到非整数，小数部分为剩余天数/31，这个规则无论针对哪一个月都是如此；<br>2）如果给定的两个日期DD不同，但是想要获得整数月，可以配合TRUNC函数或后续提<br>到的获取月末日期函数使用；<br>3）如果两个日期的DD不同，但是都是月末日期，则获取的月份差将是整数；<br>4）需要特别注意，函数中录入的两个日期是有大小之分的（区别BETWEEN  AND），一般晚的日期在前，早的日期在后，如此得到的结果便是正数，<br>反之获得负数。如果不确定两个日期的大小，可搭配ABS()函数使用。</p><h4 id="3-获取月末日期-1"><a href="#3-获取月末日期-1" class="headerlink" title="3.获取月末日期"></a>3.获取月末日期</h4><p>LAST_DAY(D)：获取指定日期对应的当月最后一天，即月末日期</p><pre class=" language-shell"><code class="language-shell">SELECT LAST_DAY(SYSDATE) FROM DUAL;</code></pre><p>举例：<br>获取当月最后一天。</p><pre class=" language-shell"><code class="language-shell">SELECT LAST_DAY(SYSDATE) FROM DUAL;</code></pre><p>查询某月份的最大天数</p><pre class=" language-shell"><code class="language-shell">SELECT LAST_DAY(SYSDATE+30) FROM DUAL;SELECT TO_CHAR(LAST_DAY(SYSDATE+30),'DD') FROM DUAL;</code></pre><p>获取给定两日期的月份差（整数月）</p><pre class=" language-shell"><code class="language-shell">SELECT MONTHS_BETWEEN(LAST_DAY(TO_DATE('20210415','YYYYMMDD')),LAST_DAY(TO_DATE('20210202','YYYYMMDD'))) FROM DUAL;</code></pre><p>查询某日期对应的年份是平年还是闰年</p><pre class=" language-shell"><code class="language-shell">--通过判断2月的最后一天判断平年闰年SELECT  DDDD,R,CASE WHEN TO_CHAR(LAST_DAY(TO_DATE(SUBSTR(DDDD,1,4)||'0205','YYYYMMDD')),'DD')='29'             THEN '闰年'             else '平年'         END   FROM DAY_TEST;</code></pre><p>SELECT * FROM DAY_TEST FOR UPDATE;</p><pre class=" language-shell"><code class="language-shell">--通过判断全年的最后一天判断平年或闰年SELECT DDDD,R,CASE WHEN TO_CHAR(TO_DATE(SUBSTR(DDDD,1,4)||'1231','YYYYMMDD'),'DDD')=366                   THEN '闰年'                   ELSE '平年'                END  FROM DAY_TEST;</code></pre><pre class=" language-shell"><code class="language-shell">--通过年份判断平年或闰年SELECT DDDD,R,CASE WHEN MOD(SUBSTR(DDDD,1,4),4)=0 AND MOD(SUBSTR(DDDD,1,4),100)<>0                        OR MOD(SUBSTR(DDDD,1,4),400)=0                   THEN '闰年'                   ELSE '平年'                END   FROM DAY_TEST;</code></pre><h4 id="4-月份加减-1"><a href="#4-月份加减-1" class="headerlink" title="4.月份加减"></a>4.月份加减</h4><p>ADD_MONTHS(D,N) :在D日期的基础上加N个月。N可为正可为负。<br>基础用法：</p><pre class=" language-shell"><code class="language-shell">SELECT SYSDATE,ADD_MONTHS(SYSDATE,2) FROM DUAL;</code></pre><p>N为负数即为在D日期的基础上减去几个月</p><pre class=" language-shell"><code class="language-shell">SELECT SYSDATE+2,ADD_MONTHS(SYSDATE+2,-2) FROM DUAL;</code></pre><h4 id="特殊情况："><a href="#特殊情况：" class="headerlink" title="特殊情况："></a>特殊情况：</h4><p>1）如果N是小数–以整数部分计算</p><pre class=" language-shell"><code class="language-shell">SELECT SYSDATE,ADD_MONTHS(SYSDATE,2.5) FROM DUAL;</code></pre><p>2）如果DD是月末</p><pre class=" language-shell"><code class="language-shell">SELECT SYSDATE+2,ADD_MONTHS(SYSDATE+2,1) FROM DUAL;</code></pre><p>3）如果DD不在计算后的月份中</p><pre class=" language-shell"><code class="language-shell">SELECT SYSDATE+2,ADD_MONTHS(SYSDATE+2,-2) FROM DUAL;</code></pre><p>例题：查询比SMITH早入职两个月的员工信息</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM EMP WHERE HIREDATE=ADD_MONTHS((SELECT HIREDATE FROM EMP WHERE ENAME='KING'),2)</code></pre><p>思考：<br>返回日期对应的当月第一天</p><pre class=" language-shell"><code class="language-shell">--1.截断SELECT DDD,TRUNC(DDD,'MM') FROM DAY_TEST;  --主要针对日期</code></pre><pre class=" language-shell"><code class="language-shell">--2.截取+连接SELECT DDDD,SUBSTR(DDDD,1,7)||'/01' FROM DAY_TEST;  --主要针对字符</code></pre><h4 id="5-获取下个周几-1"><a href="#5-获取下个周几-1" class="headerlink" title="5.获取下个周几"></a>5.获取下个周几</h4><p>NEXT_DAY (D,W)：给定日期D，和星期W，获取D日期之后的下一个星期W</p><pre class=" language-shell"><code class="language-shell">SELECT TO_DATE('20210428','YYYYMMDD'),       NEXT_DAY(TO_DATE('20210428','YYYYMMDD'),'星期五')   FROM DUAL;</code></pre><h5 id="思考题："><a href="#思考题：" class="headerlink" title="思考题："></a>思考题：</h5><p>给定任意日期，如何获取下个周的星期五</p><pre class=" language-shell"><code class="language-shell">SELECT NEXT_DAY(TO_DATE('20210428', 'YYYYMMDD'),'星期五')+7 from DUAL;SELECT NEXT_DAY(TRUNC(TO_DATE('20210426', 'YYYYMMDD'),'IW')+7,'星期五') from DUAL;</code></pre><p>给定任意日期，如何获取下个周的星期几</p><pre class=" language-shell"><code class="language-shell">SELECT NEXT_DAY(TRUNC(TO_DATE('20210426', 'YYYYMMDD'),'IW')+6,'星期一') from DUAL;</code></pre><h3 id="其他函数"><a href="#其他函数" class="headerlink" title="其他函数"></a>其他函数</h3><h4 id="1-条件取值"><a href="#1-条件取值" class="headerlink" title="1.条件取值"></a>1.条件取值</h4><p>DECODE(EXPR,VALUE1,RESULT1,VALUE2,RESULT2,…,DEF_RESULT)</p><p>其实效果即等同于</p><pre class=" language-shell"><code class="language-shell">CASE  EXPR     WHEN VALUE1  THEN RESULT1     WHEN VALUE2  THEN RESULT2          …    ELSE DEF_RESULT END</code></pre><p>举例：<br>使用decode函数，职位是分析员的，工资+1000；职位是经理的，工资+800；<br>职位是其它的，工资+400</p><pre class=" language-shell"><code class="language-shell">SELECT DECODE(JOB,'ANALYST',SAL+1000,'MANAGER',SAL+800,SAL+400) FROM EMP;</code></pre><pre class=" language-shell"><code class="language-shell">SELECT * FROM EMP;SELECT CASE JOB            WHEN 'ANALYST' THEN SAL+1000            WHEN 'MANAGER' THEN SAL+800            ELSE SAL+400        END   FROM EMP;</code></pre><h4 id="2-空值的赋值"><a href="#2-空值的赋值" class="headerlink" title="2.空值的赋值"></a>2.空值的赋值</h4><p>NVL(EXPR,VALUE):如果EXPR是空，返回一个VALUE，如果EXPR不为空，返回EXPR本身</p><pre class=" language-shell"><code class="language-shell">SELECT COMM,NVL(COMM,0) FROM EMP;SELECT COMM+SAL,NVL(COMM+SAL,0) FROM EMP;SELECT NVL(NULL,'AAA') FROM DUAL;SELECT NVL(NULL,SYSDATE) FROM DUAL;</code></pre><p>NVL2(EXPR1,EXPR2,EXPR3):expr1不为NULL，返回expr2；expr1为NULL，返回expr3</p><pre class=" language-shell"><code class="language-shell">SELECT NVL2(SAL+COMM,SAL+COMM,SAL)FROM EMP;</code></pre><h4 id="3-去重"><a href="#3-去重" class="headerlink" title="3.去重"></a>3.去重</h4><pre class=" language-shell"><code class="language-shell">DISTINCT COL_LIST   :SELECT DISTINCT COL_LIST FROM TB_NAME …</code></pre><p>对COL_LIST范围内的字段进行去重</p><p>举例（以下查询结果全部要求去重）：</p><p>获取公司的所有岗位</p><pre class=" language-shell"><code class="language-shell">SELECT DISTINCT JOB FROM EMP;</code></pre><p>获取公司的所有部门</p><pre class=" language-shell"><code class="language-shell">SELECT DISTINCT DEPTNO FROM EMP;</code></pre><p>获取各部门的各岗位</p><pre class=" language-shell"><code class="language-shell">SELECT DISTINCT DEPTNO,JOB FROM EMP;SELECT DEPTNO,JOB FROM EMP GROUP BY DEPTNO,JOB;SELECT DEPTNO FROM EMP GROUP BY DEPTNO;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据第一阶段 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oracle第七天</title>
      <link href="2021/04/26/oracle-di-qi-tian/"/>
      <url>2021/04/26/oracle-di-qi-tian/</url>
      
        <content type="html"><![CDATA[<h1 id="2021-04-26-Orale第七天"><a href="#2021-04-26-Orale第七天" class="headerlink" title="2021/04/26 Orale第七天"></a>2021/04/26 Orale第七天</h1><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>今天学习了一些(很多)函数，包括上周五学的TO_CAHR函数，记忆点比较多，反正我是没记住0.0 </p><h3 id="函数的基本信息"><a href="#函数的基本信息" class="headerlink" title="函数的基本信息"></a>函数的基本信息</h3><p>概念：<br>按不同的功能用途而封装好的程序，不必花费大量的心思编写相应的程序，直接使用即可达到目的。<br>对使用者来说，只需了解函数的用法及用途即可，不必了解原理。</p><p>分类：</p><ol><li>函数从定义角度来说分为“系统函数”与“用户自定义函数”：</li></ol><ul><li>系统函数即软件自带的，一些公认的或常用的函数，例如：聚合函数、UPPER、NVL等；</li><li>用户自定义函数是用户根据自身需要而自行创建的函数</li><li>前者在软件中通用，而后者每到一个新环境中都需要重新创立。</li></ul><ol start="2"><li>从作用对象角度来说分为</li></ol><ul><li>转换函数                  </li><li>字符型函数</li><li>数值型函数                </li><li>日期型函数</li><li>开窗函数                   </li><li>其他函数</li></ul><p>作用范围：针对不同数据类型相互转化时使用，转化时可同时指定目标类型与格式。<br>分类：<br>按转换的形式：<br>  显示转换：数据类型的转换是用户主动执行转换函数而实现的<br>  隐式转换：数据类型的转换是系统自动执行转换函数而实现的：</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM EMP WHERE EMPNO = '7369';INSERT INTO EMP (EMPNO)  VALUES(‘1234’)</code></pre><p>按转换的目标格式：<br>  转字符：TO_CHAR<br>  转数值：TO_NUMBER<br>  转日期：TO_DATE</p><h4 id="转换函数-TO-CHAR"><a href="#转换函数-TO-CHAR" class="headerlink" title="转换函数-TO_CHAR"></a>转换函数-TO_CHAR</h4><ol><li>TO_CHAR</li></ol><ul><li>数值转字符（数值先变成最简单的形式，然后再做类型转换）</li><li>无指定格式：单纯的由数值转换为字符<pre class=" language-shell"><code class="language-shell">SELECT 1234,TO_CHAR(1234) FROM DUAL;SELECT SAL,TO_CHAR(SAL) FROM EMP;SELECT 0123,TO_CHAR(0123) FROM DUAL;</code></pre>有指定格式：将数值转为字符的同时指定格式：包括指定精度与指定货币</li></ul><p>指定精度：<br>数值转字符中的通配符：通过0或9来代指该位内容 25.00—0000.99–’0025.00’</p><ul><li>9:指任意数字，若整数位该位置无数字，则格式不生效，小数位该位置无数字以0补全</li><li>0:指任意数字，若整数位该位置无数字，则强制显示为0，小数位一般不用0代指<h4 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h4></li></ul><ol><li>若指定格式，转换过程中数字前易出现空格，所以常常会搭配去空格函数使用</li><li>转换过程中若遇小数位精度过低的情况，则会遵循四舍五入，遇整数位精度过低的情况，则会显示为#</li><li>可添加千分符,</li></ol><h5 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h5><pre class=" language-shell"><code class="language-shell">举例：SELECT TO_CHAR(123.45,'999.99') FROM DUAL; SELECT TO_CHAR(123.45,'999.999') FROM DUAL; SELECT TO_CHAR(123.456,'9999.99999') FROM DUAL; SELECT TO_CHAR(123.45,'999.9') FROM DUAL; SELECT TO_CHAR(123.45,'999') FROM DUAL; SELECT TO_CHAR(123.45,'99.99') FROM DUAL; SELECT TO_CHAR(123.45,'222.22') FROM DUAL; SELECT TRIM(TO_CHAR(123.45,'999.99')) FROM DUAL;SELECT TO_CHAR(-123.45,'999.99') FROM DUAL; SELECT TO_CHAR(123.45,'0999.99') FROM DUAL; SELECT TO_CHAR(123.45,'099.99') FROM DUAL; SELECT TO_CHAR(123.45,‘0099.99’) FROM DUAL; SELECT TO_CHAR(12345.67,'99099.99') FROM DUAL; SELECT TO_CHAR(123.45,'9900099.99') FROM DUAL; SELECT TO_CHAR(123456.789,'999,999.999') FROM DUAL; SELECT TO_CHAR(123456789.987,'999,999,999.999') FROM DUAL; SELECT TO_CHAR(123456789.987,'99999,9999.999') FROM DUAL; SELECT TO_CHAR(999.99,'999.99') FROM DUAL;SELECT TO_CHAR(999.99,'999.9') FROM DUAL;SELECT TO_CHAR(999.99,'999,99') FROM DUAL;SELECT TO_CHAR(999.99,'999,9') FROM DUAL;SELECT SAL,TO_CHAR(SAL,'999999999999.99'),TRIM(TO_CHAR(SAL,'999999999999.99')) FROM EMP;</code></pre><p>指定货币：</p><ul><li>$:美元符号</li><li>L:当地货币</li></ul><p>实际工作中:<br>币种    金额<br>USD      10<br>CNY     100</p><h5 id="举例："><a href="#举例：" class="headerlink" title="举例："></a>举例：</h5><pre class=" language-shell"><code class="language-shell">SELECT TO_CHAR(123.45,'$999.99') FROM DUAL; SELECT TO_CHAR(123.45,'999.9$9') FROM DUAL; SELECT TO_CHAR(123.45,'99$9$.99') FROM DUAL; SELECT TO_CHAR(123.45,'L999.99') FROM DUAL; SELECT TO_CHAR(123.45,'99L9.99') FROM DUAL; SELECT TO_CHAR(123.45,'￥999.99') FROM DUAL;</code></pre><h3 id="日期转字符"><a href="#日期转字符" class="headerlink" title="日期转字符"></a>日期转字符</h3><p>拓展：获取当前系统日期的方法</p><pre class=" language-shell"><code class="language-shell">SELECT SYSDATE,SYSTIMESTAMP FROM DUAL; --获取当前日期</code></pre><p>日期格式的设置：<br>通过一些固定字母或关键词来代指日期中的某一项内容，其中可穿插一些分隔符号，且这些关键词可随意搭配及更改顺序。</p><pre class=" language-shell"><code class="language-shell">SELECT TO_CHAR(SYSDATE,'MM-DD-YYYY'),       TO_CHAR(SYSDATE,'MM=DD-DD')  FROM DUAL;</code></pre><h4 id="年份："><a href="#年份：" class="headerlink" title="年份："></a>年份：</h4><p>YYYY：四位的年份<br>YYY,YY,Y：分别表示后三位、两位以及一位的年份</p><pre class=" language-shell"><code class="language-shell">SELECT TO_CHAR(TO_DATE('2134-10-21','YYYY-MM-DD'),'YYYY'),       TO_CHAR(TO_DATE('2134-05-18','YYYY-MM-DD'),'YYY'),       TO_CHAR(TO_DATE('2134-05-18','YYYY-MM-DD'),'YY'),       TO_CHAR(TO_DATE('2134-05-18','YYYY-MM-DD'),'Y')  FROM DUAL;</code></pre><p>例题：查找1980年入职的员工</p><pre class=" language-shell"><code class="language-shell"></code></pre><h4 id="Q-一年中第几个季度（一位）"><a href="#Q-一年中第几个季度（一位）" class="headerlink" title="Q:一年中第几个季度（一位）"></a>Q:一年中第几个季度（一位）</h4><pre class=" language-shell"><code class="language-shell">SELECT SYSDATE,TO_CHAR(SYSDATE,'YYYY-Q') FROM DUAL; </code></pre><h4 id="月份："><a href="#月份：" class="headerlink" title="月份："></a>月份：</h4><p>MONTH:月的全称（右侧空格补齐九位）–英文 ,’NLS_DATE_LANGUAGE = AMERICAN’<br>MON:三位字符的月份缩写–英文 ,’NLS_DATE_LANGUAGE = AMERICAN’<br>MM:一年中的第几个月（两位）</p><pre class=" language-shell"><code class="language-shell">SELECT SYSDATE,       TO_CHAR(SYSDATE,'MONTH'),       TO_CHAR(SYSDATE,'MON'),       TO_CHAR(SYSDATE,'MM')  FROM DUAL;</code></pre><h3 id="星期："><a href="#星期：" class="headerlink" title="星期："></a>星期：</h3><ol><li>WW:一年中的第几个星期，从第一天开始算起，一个七天算作一周，和星期几无关</li><li>IW:一年中的第几个星期，星期一为本周第一天，每年末最后一个周不足四天算至下年第一周，足四天将下年本周的剩余时间一同算作本年最后一周</li><li>W:一个月中的第几个星期，从第一天开始算起，一个七天算作一周，和星期几无关</li><li>DAY:星期几全称 （右侧空格补齐九位）–英文 ,’NLS_DATE_LANGUAGE = AMERICAN’</li><li>DY:星期几的三位缩写 –英文 ,’NLS_DATE_LANGUAGE = AMERICAN’</li></ol><h4 id="举例-1"><a href="#举例-1" class="headerlink" title="举例"></a>举例</h4><pre class=" language-shell"><code class="language-shell">SELECT SYSDATE,TO_CHAR(SYSDATE,'WW'),TO_CHAR(SYSDATE,'IW') FROM DUAL;SELECT TO_CHAR(TO_DATE('20210113','YYYYMMDD'),'WW') FROM DUAL;SELECT TO_CHAR(TO_DATE('20200113','YYYYMMDD'),'IW') FROM DUAL;SELECT TO_CHAR(TO_DATE('20191231','YYYYMMDD'),‘WW') FROM DUAL; SELECT TO_CHAR(TO_DATE('20201231','YYYYMMDD'),'IW') FROM DUAL; SELECT TO_CHAR(TO_DATE('20210101','YYYYMMDD'),'IW') FROM DUAL;SELECT TO_CHAR(TO_DATE('20210104','YYYYMMDD'),'IW') FROM DUAL;SELECT TO_DATE('20200803','YYYYMMDD'),       TO_CHAR(TO_DATE('20200803','YYYYMMDD'),'W')  FROM DUAL;SELECT TO_DATE('20200831','YYYYMMDD'),       TO_CHAR(TO_DATE('20200831','YYYYMMDD'),'W')  FROM DUAL;SELECT TO_DATE('20200930','YYYYMMDD'),       TO_CHAR(TO_DATE('20200930','YYYYMMDD'),'DAY'),       TO_CHAR(TO_DATE('20200930','YYYYMMDD'),'DY')  FROM DUAL;SELECT TO_DATE('20200930','YYYYMMDD'),       TO_CHAR(TO_DATE('20200930','YYYYMMDD'),'DAY','NLS_DATE_LANGUAGE = AMERICAN'),       TO_CHAR(TO_DATE('20200930','YYYYMMDD'),'DY','NLS_DATE_LANGUAGE = AMERICAN')  FROM DUAL;</code></pre><h3 id="天："><a href="#天：" class="headerlink" title="天："></a>天：</h3><ul><li>D:星期中的第几天 –从星期日开始算第一天</li><li>DD:月份中的第几天</li><li>DDD年份中的第几天<h4 id="代码举例"><a href="#代码举例" class="headerlink" title="代码举例"></a>代码举例</h4><pre class=" language-shell"><code class="language-shell">SELECT SYSDATE,     TO_CHAR(SYSDATE,'D'),     TO_CHAR(SYSDATE,'DD'),     TO_CHAR(SYSDATE,'DDD')FROM DUAL;</code></pre><h4 id="小时："><a href="#小时：" class="headerlink" title="小时："></a>小时：</h4></li><li>HH,HH12:一天中的第几个小时（12小时制）</li><li>HH24:一天中的第几个小时（24小时制）</li></ul><p>####分钟：</p><ul><li>MI:一小时中的第几分钟</li></ul><p>####秒：</p><ul><li>SS:一分钟中的第几秒</li></ul><p>####毫秒：</p><ul><li>FF:毫秒（默认6位）</li><li>FF3,FF6:FF后跟数字表示毫秒的显示位数</li></ul><h4 id="代码举例-1"><a href="#代码举例-1" class="headerlink" title="代码举例"></a>代码举例</h4><pre class=" language-shell"><code class="language-shell">SELECT SYSDATE,       TO_CHAR(SYSDATE,'HH12'),       TO_CHAR(SYSDATE,'HH24')   FROM DUAL;SELECT TO_DATE('2020-09-30 22:00:00','YYYY-MM-DD HH24:MI:SS'),       TO_CHAR(TO_DATE('2020-09-30 22:00:00','YYYY-MM-DD HH24:MI:SS'),'HH12'),       TO_CHAR(TO_DATE('2020-05-30 22:00:00','YYYY-MM-DD HH24:MI:SS'),'HH24')   FROM DUAL;</code></pre><h4 id="上下午"><a href="#上下午" class="headerlink" title="上下午"></a>上下午</h4><p>AM –上午<br>PM –下午<br>具体返回上午还是下午，根据实际时间点而定</p><h5 id="代码举例-2"><a href="#代码举例-2" class="headerlink" title="代码举例"></a>代码举例</h5><pre class=" language-shell"><code class="language-shell">SELECT SYSDATE,       TO_CHAR(SYSDATE,'HH12 AM'),       TO_CHAR(SYSDATE,'HH12 PM')  FROM DUAL;</code></pre><h4 id="毫秒："><a href="#毫秒：" class="headerlink" title="毫秒："></a>毫秒：</h4><p>FF:毫秒（默认6位）<br>FF3,FF6:FF后跟数字表示毫秒的显示位数</p><h5 id="代码举例-3"><a href="#代码举例-3" class="headerlink" title="代码举例"></a>代码举例</h5><pre class=" language-shell"><code class="language-shell">SELECT SYSTIMESTAMP,       TO_CHAR(SYSTIMESTAMP,'FF9')  FROM DUAL;SELECT SYSTIMESTAMP,       TO_CHAR(SYSTIMESTAMP,'FF2'),       TO_CHAR(SYSTIMESTAMP,'FF3'),       TO_CHAR(SYSTIMESTAMP,'FF4'),       TO_CHAR(SYSTIMESTAMP,'FF5'),       TO_CHAR(SYSTIMESTAMP,'FF6')  FROM DUAL;</code></pre><h5 id="习惯用法："><a href="#习惯用法：" class="headerlink" title="习惯用法："></a>习惯用法：</h5><pre class=" language-shell"><code class="language-shell">SELECT SYSDATE,SYSTIMESTAMP,       TO_CHAR(SYSDATE,'YYYYMMDD HH24:MI:SS'),       TO_CHAR(SYSDATE,'YYYY/MM/DD HH24:MI:SS'),       TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MI:SS'),       TO_CHAR(SYSTIMESTAMP,'YYYY-MM-DD HH24:MI:SS.FF3')  FROM DUAL;</code></pre><hr><h3 id="转换函数-TO-NUMBER"><a href="#转换函数-TO-NUMBER" class="headerlink" title="转换函数-TO_NUMBER"></a>转换函数-TO_NUMBER</h3><p>2.TO_NUMBER<br>2.1将只含数字的字符串转化为数值<br>2.2去掉字符串中的特定符号并将剩下的数字转化为数值<br>特定符号包括：千分符和货币符号</p><h5 id="代码举例-4"><a href="#代码举例-4" class="headerlink" title="代码举例"></a>代码举例</h5><pre class=" language-shell"><code class="language-shell">SELECT TO_NUMBER(‘0123') FROM DUAL;SELECT TO_NUMBER('000123') FROM DUAL; SELECT TO_CHAR(0123) FROM DUAL;--去掉千位符SELECT TO_NUMBER('1,111.1','9999.99') FROM DUAL;--去掉货币单位SELECT TO_NUMBER('  $99.99','$999.99') FROM DUAL;SELECT TO_NUMBER('  ￥123.45','L999.99') FROM DUAL;</code></pre><h3 id="转换函数-TO-DATE"><a href="#转换函数-TO-DATE" class="headerlink" title="转换函数-TO_DATE"></a>转换函数-TO_DATE</h3><ol start="3"><li>TO_DATE<br>TO_DATE(字符串表示的日期,’与前者对应的日期格式’)<h4 id="注意：-1"><a href="#注意：-1" class="headerlink" title="注意："></a>注意：</h4></li><li>日期数据不同于字符和数值，日期数据存放的是有关该日期的所有数据，通过TO_CHAR指定不同的目标格式，可以转出不同的内容</li><li>出于上述原因及不同工具日期显示格式不同的原因，很多项目以字符型格式存储日期<h5 id="代码举例-5"><a href="#代码举例-5" class="headerlink" title="代码举例"></a>代码举例</h5><pre class=" language-shell"><code class="language-shell">SELECT TO_DATE('2020-09-18 15:01:01','YYYY-MM-DD HH24:MI:SS') FROM DUAL;SELECT TO_DATE('2020-05-18 15:01:01','YYYY-MM-DD HH12:MI:SS') FROM DUAL;SELECT TO_DATE('2020-09-18','YYYY-MM-DD') FROM DUAL;</code></pre></li></ol><p>SELECT TO_DATE(‘2020’,’YYYY’) FROM DUAL;<br>SELECT TO_DATE(‘2020/10’,’YYYY/MM’) FROM DUAL;<br>SELECT TO_DATE(‘2020/10’,’YYYY/DD’) FROM DUAL;<br>SELECT TO_DATE(‘02/01’,’MM/DD’) FROM DUAL;<br>– SELECT TO_DATE(‘2020/05/26’,’YYYY/MM’) FROM DUAL;<br>–SELECT TO_DATE(‘2020/05’,’YYYY/MM/DD’) FROM DUAL;</p><p>SELECT TO_DATE(‘2020-09-18’,’YYYY-MM-DD’),<br>       TO_CHAR(TO_DATE(‘2020-09-18’,’YYYY-MM-DD’),’YYYYMMDD HH24:MI:SS’)<br>FROM DUAL;</p><pre><code>## 字符型函数##### 针对字符、且返回值仍是字符的函数1. 连接2. 大小写转换3. 替换4. 去除5. 截取6. 填充##### 针对字符、且返回值是数值的函数7. 获取字符长度8. 获取字符位置        --针对字符串的处理，且返回值仍为字符串### 1.连接CONCAT(STR1,STR2)：括号内包括两个参数，字符串STR1和字符串STR2，函数效果为将括号内的两个字符串合并到一起相比于||的连接，CONCAT函数若是想要同时连接多个数据，需要反复嵌套该函数，例如CONCAT(CONSTR(CONCAT(STR1,STR2),STR3),SRT4)，而||直接接在一起即可，不过在其他数据库中并没有||，所以为了应对不同的数据库，还是要掌握CONCAT函数。#### 连接'员工信息'/姓名、岗位、部门、薪资```shellSELECT CONCAT(CONCAT(CONCAT(CONCAT('员工信息',ENAME),JOB),DEPTNO),SAL) FROM EMP;</code></pre><p>2.WM_CONCAT(COLUMN):将字段名中的数据拼接到一起，作为一个单行单列的数据展示,中间用逗号间隔，将多行数据整合为单行单列</p><pre class=" language-shell"><code class="language-shell"> SELECT WM_CONCAT(ENAME) FROM EMP;    SELECT WM_CONCAT(EMPNO) FROM EMP;</code></pre><h3 id="2-大小写转换函数"><a href="#2-大小写转换函数" class="headerlink" title="2.大小写转换函数"></a>2.大小写转换函数</h3><p>UPPER(STR)：将字符串STR中的所有小写字母转换成大写字母<br>LOWER(STR) ：将字符串中STR中的所有大写字母转换成小写字母<br>INITCAP(STR)：将字母串中STR中的每个单词改为首字母大写其他字母小写的形式（多个单词可以用空格及其他符号隔开）</p><pre class=" language-shell"><code class="language-shell">SELECT UPPER('kndlk,MDNFL123knk') from DUAL;SELECT LOWER('kndlk,MDNFL123knk') from DUAL;SELECT INITCAP('kndlk MDNFL knk') from DUAL;SELECT INITCAP('kndlk,MDNFL,knk') from DUAL;SELECT INITCAP('kndlk*MDNFL*knk') from DUAL;SELECT INITCAP('kndlk_MDNFL_knk') from DUAL;SELECT INITCAP('kndlk1MDNFL1knk') from DUAL;SELECT INITCAP('SMITH') FROM DUAL;SELECT INITCAP('smITh') FROM DUAL;SELECT INITCAP('smith') FROM DUAL;SELECT ENAME,INITCAP(ENAME) FROM EMP;SELECT 'SMITH ALLEN' ENAME,INITCAP('SMITH ALLEN') FROM DUAL;SELECT 'SMITHALLEN' ENAME,INITCAP('SMITHALLEN') FROM DUAL;SELECT 'SMITH''ALLEN' ENAME,INITCAP('SMITH''ALLEN') FROM DUAL;SELECT 'SMITH2ALLEN' ENAME,INITCAP('SMITH2ALLEN') FROM DUAL;SELECT 'SMITH ALLEN WARD' ENAME ,INITCAP('SMITH ALLEN WARD') FROM DUAL;</code></pre><h3 id="3-替换"><a href="#3-替换" class="headerlink" title="3.替换"></a>3.替换</h3><p>REPLACE(STR,S1[, S2])：该函数包括三个参数，STR-待处理的字符串，S1-将被替换掉的部分，S2-替换后的部分。</p><p>换句话说：将STR中的S1替换成S2。这其中S1和S2都是视作一个整体，不能单独看其中的某个字符。</p><p>S2参数如果不写，相当于将S1替换成空或者说将S1去除</p><pre class=" language-shell"><code class="language-shell">SELECT REPLACE('ABCDBE','B','b') FROM DUAL;SELECT REPLACE('ABCDBE','BC','MN') FROM DUAL;SELECT REPLACE('ABCDE','CD','XYZ') FROM DUAL;SELECT REPLACE('ABCDE','ABCDE','W') FROM DUAL;SELECT REPLACE('ABCDEABCDE','CD','MN') FROM DUAL;SELECT REPLACE('ABC DEABCDE','C D','MN') FROM DUAL;SELECT REPLACE('AB C DEABCDE','A','MN') FROM DUAL;将日期中的/换成-；由-换成无分隔符SELECT REPLACE('2020/05/06','/','-') FROM DUAL;SELECT REPLACE('2020/05/06','/') FROM DUAL;SELECT REPLACE('2020/05/06','/',NULL) FROM DUAL;SELECT REPLACE('ABCDEF','CD','帅哥') FROM DUAL;SELECT REPLACE('HE LOVE YOU','HE','I') FROM DUAL;SELECT ENAME,REPLACE(ENAME,'A','K') FROM EMP;SELECT REPLACE('ABA D CDADEF','A D ','小姐姐') FROM DUAL;SELECT REPLACE(REPLACE('ABCDE','A','M'),'D','N') FROM DUAL;SELECT REPLACE(ENAME,'SMITH','HTIMS') FROM EMP;SELECT REPLACE('A1B23C4D','1','P') FROM DUAL;SELECT REPLACE('A1B23C4D','1',2) FROM DUAL;  --隐式转换SELECT REPLACE(12345,1,2) FROM DUAL; --隐式转换SELECT '  AABBCC  ',TRIM('  AABBCC  '),REPLACE('  AABBCC  ',' ','') FROM DUAL;SELECT '  AAB BCC  ',TRIM('  AAB BCC  '),REPLACE('  AAB BCC  ',' ','') FROM DUAL;</code></pre><h3 id="4-去除函数"><a href="#4-去除函数" class="headerlink" title="4.去除函数"></a>4.去除函数</h3><p>TRIM()：去除指定字符串或字段两侧的空格</p><p>LTRIM()：去除指定字符串或字段左侧的空格</p><p>RTRIM()：去除指定字符串或字段右侧的空格</p><p>举例：</p><pre class=" language-shell"><code class="language-shell">SELECT TRIM('  AAA  ') FROM DUAL; --两侧有空格SELECT TRIM('  AAA BBB  ') FROM DUAL; --两侧及中间都有空格SELECT TRIM('@  AAABBB   @') FROM DUAL; --虽然两侧有空格但不是在最边上SELECT TRIM('    '),LTRIM('    '),RTRIM('    ') FROM DUAL;SELECT LTRIM('  AAA  ',' ') FROM DUAL; </code></pre><p>TRIM()函数：去除字符串中的空格仅仅只是去除函数的默认用法，<br>去除函数可以用来从指定字段或字符串中去除指定的部分。</p><h3 id="完整用法："><a href="#完整用法：" class="headerlink" title="完整用法："></a>完整用法：</h3><p>LTRIM(STR[,S])：去除字符串STR中左侧的S，如果S参数省略，则默认去除空格。<br>RTRIM(STR[,S])：去除字符串STR中右侧的S，如果S参数省略，则默认去除空格。</p><pre class=" language-shell"><code class="language-shell">1.去除姓名左侧的SSELECT ENAME,LTRIM(ENAME,'S') FROM EMP;2.去除姓名右侧的SSELECT ENAME,RTRIM(ENAME,'S') FROM EMP;3.去除姓名左侧的SMSELECT ENAME,LTRIM(ENAME,'SM') FROM EMP;4.去除姓名右侧的THSELECT ENAME,RTRIM(ENAME,'TH') FROM EMP;TRIM([LEADING/TRAILING/BOTH]  [S FROM]  STR)：去除字符串STR中的S[LEADING/TRAILING/BOTH] 决定去除左侧/右侧/两侧,若省略该参数,默认去除两侧；[S  FROM] 决定了被去除的内容,S只能为一个字符，若省略则默认去除空格。举例：5.去除姓名两侧的S（造数测试）SELECT * FROM EMP FOR UPDATE;SELECT ENAME ,TRIM(BOTH 'S' FROM ENAME) FROM EMP;SELECT ENAME ,TRIM(BOTH 'SS' FROM ENAME) FROM EMP;--ERROR6.去除左右两侧的AB（造数测试）SELECT ENAME,LTRIM(ENAME,'AB') FROM EMP WHERE ENAME = 'ALLEN';7.去除字符@@@@@左侧的@（原理）SELECT LTRIM('@@@@@','@') FROM  DUAL;</code></pre><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>虽然 TRIM()/LTRIM()/RTRIM()都是用来去除字符串中的指定部分，<br>但在完整用法上有很大区别，一定要注意区分！！！</p><ol><li>LTRIM()与 RTRIM()：S可以是单个或多个字符，<br>TRIM()：S只能是一个字符；</li><li>用法：LTRIM(STR,S)或 RTRIM(STR,S)         <pre><code>       TRIM(   S FROM STR);</code></pre></li><li>三个函数在去除时，都是从某侧开始去除直到第一个非S出现，<br>特别需要注意LTRIM()与RTRIM()中的S若有多个字符，在去除时是挨个检索S中的每一个字符，而非将S视作一个整体（区分REPLACE函数）。</li></ol><p>TRIM()函数关于参数[LEADING/TRAILING/BOTH]的示例总结</p><pre class=" language-shell"><code class="language-shell">SELECT TRIM(BOTH 'A' FROM 'ABCDCBA') 去头去尾,       TRIM(LEADING 'A' FROM 'ABCDCBA') 去头,       TRIM(TRAILING 'A' FROM 'ABCDCBA') 去尾,       TRIM('A' FROM 'ABCDCBA') 默认去头去尾  FROM DUAL;</code></pre><h3 id="5-截取"><a href="#5-截取" class="headerlink" title="5.截取"></a>5.截取</h3><p>SUBSTR(STR,IND[,LEN]):从字符串STR的IND位置，截取LEN长度的字符串并返回该截取内容</p><p>SUBSTR函数可以说是除聚合函数外使用最频繁的函数，要牢记。</p><h5 id="常规举例："><a href="#常规举例：" class="headerlink" title="常规举例："></a>常规举例：</h5><ol><li>截取字符串’ABCDEF’中的前三个字符<pre class=" language-shell"><code class="language-shell">SELECT SUBSTR('ABCDEF',1,3) FROM DUAL;</code></pre></li><li>截取名字中的前两位字符<pre class=" language-shell"><code class="language-shell">SELECT ENAME,SUBSTR(ENAME,1,2) FROM EMP;</code></pre></li><li>从名字中的第二位字符开始，截取三位长度<pre class=" language-shell"><code class="language-shell">SELECT ENAME,SUBSTR(ENAME,2,3) FROM EMP;</code></pre></li></ol><p>特殊举例：</p><pre class=" language-shell"><code class="language-shell">1）SELECT ENAME,SUBSTR(ENAME,0,2) FROM EMP;--SM2）SELECT ENAME,SUBSTR(ENAME,-2,2) FROM EMP; --TH3）SELECT ENAME,SUBSTR(ENAME,-2,0) FROM EMP;--NULL4）SELECT ENAME,SUBSTR(ENAME,-2,-2) FROM EMP;--NULL5）SELECT ENAME,SUBSTR(ENAME,2,100) FROM EMP;6）SELECT ENAME,SUBSTR(ENAME,2) FROM EMP;</code></pre><ol start="7"><li>查询所有员工姓名，首字母小写，剩余字母大写<pre class=" language-shell"><code class="language-shell">SELECT ENAME,LOWER(SUBSTR(ENAME,1,1))||UPPER(SUBSTR(ENAME,2)) FROM EMP;</code></pre></li></ol><h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h4><ol><li>截取函数中的参数IND和LEN分别表示起始位置和截取长度，而非起始位置和终止位置；</li><li>从0位开始截取，相当于从1位开始截取；</li><li>如果IND参数为正，表示从左向右定位；如果IND参数为负，表示从右向左定位；</li><li>无论IND参数是正还是负，截取时都是从左向右截取；</li><li>若LEN参数为0或负数，截取结果返回空值；</li><li>若LEN参数已超出STR实际长度，则截取到末尾；</li><li>LEN参数可以省略，表示截取到末尾，而IND参数必不可少。</li></ol><p>6.填充<br>LPAD(STR,N,S)：在字符串STR左侧，填充S字符，使长度达到N<br>RPAD(STR,N,S)：在字符串STR右侧，填充S字符，使长度达到N</p><p>举例：<br>1.在名字左侧添加字符*使总长度达到10</p><pre class=" language-shell"><code class="language-shell">SELECT ENAME,LPAD(ENAME,10,'*') FROM EMP;</code></pre><p>2.在名字右侧添加字符]使总长度达到10</p><pre class=" language-shell"><code class="language-shell">SELECT ENAME,RPAD(ENAME,10,']') FROM EMP;SELECT ENAME,LPAD(ENAME,10,'*-+') FROM EMP;SELECT ENAME,LPAD(ENAME,3,'*') FROM EMP;</code></pre><h4 id="总结：-1"><a href="#总结：-1" class="headerlink" title="总结："></a>总结：</h4><p>1）填充函数属于使用频率比较小但是十分有效的函数，该函数不求能完全记住用法，但一定要记住有这么一个函数提供填充功能；<br>2）S可以是某一个字符，也可以是一段字符串，若S是字符串，填充时会循环使用S中的每一个字符；<br>3）填充的步骤是先计算为达到长度N还欠缺多少位字符，然后使用S字符串拼接成相应长度的空缺，直接附在目标字符串左侧或右侧；<br>4）注意尽量避免N比STR总长还要小的情况</p><p>–返回数值的函数</p><h3 id="7-获取字符长度"><a href="#7-获取字符长度" class="headerlink" title="7.获取字符长度"></a>7.获取字符长度</h3><p>LENGTH(STR):返回字符串STR的字符长度</p><p>举例：<br>1）求字符串’ABCDE’的长度</p><pre class=" language-shell"><code class="language-shell">SELECT LENGTH('ABCDE')+5 FROM DUAL;</code></pre><p>2）求每个员工姓名的长度</p><pre class=" language-shell"><code class="language-shell">SELECT LENGth(ENAME) FROM EMP;SELECT LENGTH(' AB CD E 123 + *') FROM DUAL;</code></pre><p>3）求姓名总共有五个字符的员工</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM EMP WHERE ENAME LIKE'_____';SELECT * FROM EMP WHERE LENGTH(ENAME)=5;</code></pre><p>4）求姓名总共有五位、且首字母是A的员工</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM EMP WHERE ENAME LIKE'A____';SELECT * FROM EMP WHERE LENGTH(ENAME)=5 AND ENAME LIKE'A%';</code></pre><p>5）将员工按照姓名长度分组，计算每个分组的人数，并按长度升序排列</p><pre class=" language-shell"><code class="language-shell">SELECT LENGTH(ENAME),COUNT(1) FROM EMP GROUP BY LENGTH(ENAME) ORDER BY LENGTH(ENAME) ASC;</code></pre><p>6）查询字符串’小猪佩奇’的长度</p><pre class=" language-shell"><code class="language-shell">SELECT LENGTH('小猪佩奇') FROM DUAL;SELECT LENGTHB('小猪佩奇') FROM DUAL;</code></pre><p>8.获取字符位置<br>INSTR(STR,S[,IND][,N]):从第IND位开始，查找S在字符串STR中第N次出现的位置。</p><p>一般用法：</p><pre class=" language-shell"><code class="language-shell">INSTR(STR,S) ：查找S在字符串STR中第一次出现的位置。SELECT INSTR('ABCDEF','B') FROM DUAL ;SELECT INSTR('ABCDEF','CD') FROM DUAL; SELECT INSTR('ABCDEF','BCD') FROM DUAL; SELECT INSTR('ABCDEF','H') FROM DUAL; SELECT INSTR('ABCDEF','CF') FROM DUAL; SELECT INSTR('ABCDEF','B',3) FROM DUAL; SELECT INSTR('ABCDEABCDE','B',3) FROM DUAL;  SELECT INSTR('AABBCCDDEE','BC',2) FROM DUAL; SELECT INSTR('ABCDEABCDE','B',2) FROM DUAL; --2 SELECT INSTR('ABCDEABCDE','B',2,2) FROM DUAL;--7</code></pre><p>总结：</p><ol><li>若S是一个字符，返回该字符所在位置；若S是一段字符串，则返回该字符串中首字母所在位置；</li><li>若S是一串字符串，在查找位置时，S作为一个整体，若该整体不存在于字符串STR中，则返回0</li><li>无论从哪一位开始查找，返回位置时，都是从第一位开始算起</li></ol><p>深入研究：<br>1.IND=0</p><pre class=" language-shell"><code class="language-shell">SELECT INSTR('ABCDE','B',0) FROM DUAL;--0</code></pre><p>2).IND&lt;0</p><pre class=" language-shell"><code class="language-shell">SELECT INSTR('ABCDE','B',-2) FROM DUAL; SELECT INSTR('ABCDEABCDE','B',-4,2) FROM DUAL; SELECT INSTR('ABCDEABCDEABCDE','B',-4,3) FROM DUAL;SELECT INSTR('CABDEABCDE','B',-5) FROM DUAL;</code></pre><p>3.IND 超过字符长度</p><pre class=" language-shell"><code class="language-shell">SELECT INSTR('ABCDE','B',6) FROM DUAL;</code></pre><p>4.N&lt;=0</p><pre class=" language-shell"><code class="language-shell">SELECT INSTR('ABCDE','B',1,0) FROM DUAL;--参数超出范围SELECT INSTR('ABCDE','B',1,-2) FROM DUAL;--参数超出范围</code></pre><p>5.N 超过S在字符串中出现的次数</p><pre class=" language-shell"><code class="language-shell">SELECT INSTR('ABCDE','B',1,2) FROM DUAL; </code></pre><h4 id="再次总结："><a href="#再次总结：" class="headerlink" title="再次总结："></a>再次总结：</h4><ol><li>IND=0，返回0</li><li>IND&lt;0，代表从右侧开始数起，第N次出现S的位置，返回位置时仍从左侧开始算起。</li><li>IND超出字符总长时,返回0</li><li>N&lt;=0，会报错</li><li>N超过S在字符串中出现的次数，返回0</li><li>IND和N是小数，按整数部分运行<pre class=" language-shell"><code class="language-shell">SELECT INSTR('ABCDE','B',2.1,1.6) FROM DUAL; </code></pre><h1 id="ending……"><a href="#ending……" class="headerlink" title="ending……."></a>ending…….</h1></li></ol>]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据第一阶段 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oracle第六天</title>
      <link href="2021/04/23/oracle-di-liu-tian/"/>
      <url>2021/04/23/oracle-di-liu-tian/</url>
      
        <content type="html"><![CDATA[<h1 id="2021-04-23-Oracle-第六天"><a href="#2021-04-23-Oracle-第六天" class="headerlink" title="2021/04/23 Oracle 第六天"></a>2021/04/23 Oracle 第六天</h1><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>今天上午学习了几个增删改查的语句，并且做了一些练习题，以此记录</p><h4 id="增加数据"><a href="#增加数据" class="headerlink" title="增加数据"></a>增加数据</h4><pre class=" language-shell"><code class="language-shell">INSERT INTO TB_NAME   (COL_LIST,)   VALUES(DATA_LIST);  --增加数据时字段数量、字段顺序、属性要一一对应，  --字段顺序、数量与表结构完全相同时，字段名可省略</code></pre><p>增加数据习题：建立一张教师信息表（TEACHER）<br>包含:<br>编号TNO         –存放两位整数<br>姓名TNAME     –变长字符，最长10位<br>年龄AGE           –存放最长2位数值</p><pre class=" language-shell"><code class="language-shell">INSERT INTO TERCHER  (TNO, TNAME, AGE, HIREDATE, SAL, TEL)VALUES  (02, 'LISI', 27, TO_DATE('20130506', 'YYYYMMDD'), 4500, 17895641254);       INSERT INTO TERCHERVALUES  (03, 'WANGWU', 24, TO_DATE('20160305', 'YYYYMMDD'), 5500, 15678965421);       INSERT INTO TERCHERVALUES  (04, 'QIANLIU', 30, TO_DATE('20100607', 'YYYYMMDD'), 6000, 15848795246);</code></pre><h5 id="删除数据："><a href="#删除数据：" class="headerlink" title="删除数据："></a>删除数据：</h5><p>删除数据：</p><pre class=" language-shell"><code class="language-shell">DELETE  FROM TB_NAME WHERE CONDITION;--删除数据时不加WHERE条件，则是将所有数据删除；</code></pre><h5 id="注意点："><a href="#注意点：" class="headerlink" title="注意点："></a>注意点：</h5><p>删除语句执行结束后，一定要先检查所删数据是否（多、少、错误），然后再决定提交还是回滚<br>检查方法：可以在查询语句的基础上改成删除语句</p><p>删除数据习题：<br>1.将STU表中的SUXI删除</p><pre class=" language-shell"><code class="language-shell">DELETE FROM STUDENT WHERE SNAME='SUXI';</code></pre><p>2.将STU表中学号为 1 的删除</p><pre class=" language-shell"><code class="language-shell">DELETE FROM STUDENT WHERE SNO = 1;</code></pre><p>3.将TEACHER中编号为02的教师删除</p><pre class=" language-shell"><code class="language-shell">DELETE FROM TERCHER WHERE  TNO = 2;</code></pre><p>4.将TEACHER表的所有数据删除</p><pre class=" language-shell"><code class="language-shell">DELETE FROM TERCHER;</code></pre><h4 id="修改数据："><a href="#修改数据：" class="headerlink" title="修改数据："></a>修改数据：</h4><pre class=" language-shell"><code class="language-shell">UPDATE TB_NAME SET COL_NAME1=NEW_VALUE1,COL_NAME2= NEW_VALUE2,… WHERE CONDITION;--修改数据时若是不加WHERE条件，则是将所有数据更新</code></pre><p>可更新：单个字段、多个字段、有无条件<br>更新与插入的区别：<br>更新：对已经存在记录里的数据进行的操作<br>插入：插入新纪录</p><h5 id="修改数据练习题："><a href="#修改数据练习题：" class="headerlink" title="修改数据练习题："></a>修改数据练习题：</h5><p>1、将EMP2表中所有人奖金更改为1000；</p><pre class=" language-shell"><code class="language-shell">UPDATE EMP2 SET COMM = 1000;</code></pre><p>2、将EMP2表中岗位为ANALYST的奖金更改为2000；</p><pre class=" language-shell"><code class="language-shell">UPDATE EMP2 SET COMM = 2000 WHERE JOB = 'ANALYST';</code></pre><p>3、将EMP2表中7369（SMITH）的岗位变更为MANAGER;<br>      上级领导为7839；入职日期：2020/09/30<br>       薪资：4500；奖金：1000 ；部门：40</p><pre class=" language-shell"><code class="language-shell">UPDATE EMP2   SET JOB      = 'MANAGER',       MGR      = 7839,       HIREDATE = TO_DATE('20200930', 'YYYYMMDD'),       SAL      = 4500,       COMM     = 1000,       DEPTNO   = 40 WHERE ENAME = 'SMITH';</code></pre><h2 id="注意！！！"><a href="#注意！！！" class="headerlink" title="注意！！！"></a>注意！！！</h2><p>所有的数据进行增删改时，都要以【提交】或【回滚】结束，必须要对所做操作进行确认！<br>删除表时，没有提示，没有机会进行【提交】和【回滚】。</p><p>提交：COMMIT<br>回滚：ROLLBACK</p><h4 id="添加字段"><a href="#添加字段" class="headerlink" title="添加字段"></a>添加字段</h4><p>单加一个字段：</p><pre class=" language-shell"><code class="language-shell">ALTER TABLE TB_NAME ADD (COL_NAME DATATYPE);</code></pre><p>增加多个字段：</p><pre class=" language-shell"><code class="language-shell">ALTER TABLE TB_NAME ADD (COL_NAME1 DATATYPE ,COL_NAME2 DATATYPE);</code></pre><p>注意：</p><ol><li>向表中新增一个字段时 括号可以省略 建议加上</li><li>向表中新增多个字段是 括号不可以省略</li><li>新增的字段与已有字段不能重复</li></ol><h5 id="添加字段练习题"><a href="#添加字段练习题" class="headerlink" title="添加字段练习题"></a>添加字段练习题</h5><p>1、向STUDENT表中添加<br>        SEX      VARCHAR2(10)<br>        TEL      VARCHAR2(20)<br>        MARK  NUMBER(5,2)</p><pre class=" language-shell"><code class="language-shell">ALTER TABLE STUDENT ADD (SEX VARCHAR2(10),                         TEL VARCHAR2(20),                         MARK NUMBER(5,2)                         )UPDATE STUDENT  SET SEX = '女',                    TEL = 13876598901,                    MARK = 80.5                    WHERE SNO = 2;                         </code></pre><p>2、向TEACHER表中添加<br>        CARD      VARCHAR2(10)<br>        JOB         VARCHAR2(20)<br>        ADDR      VARCHAR2(200)</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM TERCHER;ALTER TABLE TERCHER ADD (CARD VARCHAR2(10),                         JOB  VARCHAR2(20),                         ADDR VARCHAR2(200));</code></pre><h4 id="其他语句"><a href="#其他语句" class="headerlink" title="其他语句"></a>其他语句</h4><p>备份EMP表（带数据）</p><pre class=" language-shell"><code class="language-shell">CREATE TABLE EMP2 AS SELECT * FROM EMP</code></pre><p>修改字段类型</p><pre class=" language-shell"><code class="language-shell">ALTER TABLE EMP2 MODIFY EMPNO NUMBER(5)</code></pre><h3 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h3><p>1、创建一个表：旅游路线图（TRAVEL_ROUTE）<br>字段包括：</p><pre class=" language-shell"><code class="language-shell">线路ID（ROUTE_ID)，VARCHAR2(3)线路名（ROUTE_NAME），VARCHAR2(50)出发地（DEPART），VARCHAR2(50)         目的地（DESTINATION），VARCHAR2(50)客户数量（CUST_NUM），NUMBER         出发时间（DEPARTURE），VARCHAR2(10)价位（PRICE），NUMBER(7)</code></pre><pre class=" language-shell"><code class="language-shell">CREATE TABLE TRACEL_ROUTE(ROUTE_ID VARCHAR2(3),ROUTE_NAME VARCHAR2(50),DEPART VARCHAR2(50),DESTINATION VARCHAR2(50),CUST_NUM NUMBER,DEPARTURE VARCHAR2(10),PRICE NUMBER(7));SELECT * FROM TRACEL_ROUTE;</code></pre><p>2、将出发时间改为CHAR(10)类型</p><pre class=" language-shell"><code class="language-shell">ALTER TABLE TRACEL_ROUTE MODIFY DESTINATION VARCHAR2(10);</code></pre><p>3、将价位改为（NUMBER(7,2)）形式</p><pre class=" language-shell"><code class="language-shell">ALTER TABLE TRACEL_ROUTE MODIFY PRICE NUMBER(7,2);</code></pre><p>4、添加【类型】字段（ROUTE_TYPE，VARCHAR2(30)），该字段后期根据旅游路线录入【省内、国内、国际】</p><pre class=" language-shell"><code class="language-shell">ALTER TABLE TRACEL_ROUTE ADD ROUTE_TYPE VARCHAR2(30);</code></pre><p>5、删掉客户数量字段(CUST_NUM)</p><pre class=" language-shell"><code class="language-shell">ALTER TABLE TRACEL_ROUTE DROP  (CUST_NUM);</code></pre><p>6、现有一青岛的旅行社开通了以下三条旅游路线，<br>请根据宣传内容将路线信息更新到旅游路线图中<br>R01路线：泰安方特一日游 青岛-泰安 800/人,12月24号平安夜下午出发，晚上参加方特平安夜活动,5号在场内游玩 ,当日晚六点门口集合返回</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM TRACEL_ROUTE;INSERT INTO TRACEL_ROUTE VALUES ('R01','泰安方特一日游','青岛','泰安','2020/12/24',800,'平安夜')</code></pre><p>R02路线：丽江古城跨年夜 青岛-丽江  3000/人<br>         12月30日当晚乘飞机前往昆明，乘大巴前往丽江，<br>         31号晚参加丽江古城跨年活动，2号晚乘飞机返回</p><pre class=" language-shell"><code class="language-shell">INSERT INTO TRACEL_ROUTE VALUES ('R02','丽江古城跨年夜','青岛','丽江','2020/12/30',3000,'丽江古城跨年');</code></pre><p>R03路线：马尔代夫蜜月旅拍 青岛-马尔代夫  25000/人<br>         1月21号乘飞机前往马尔代夫，24号晚参加当地华人组织的除夕晚会，<br>         其他时间在当地游玩及照片拍摄，27号乘飞机返回</p><pre class=" language-shell"><code class="language-shell">insert INTO TRACEL_ROUTE VALUES ('R03','马尔代夫蜜月旅拍','青岛','马尔','2021/01/21',25000,'马尔代夫除夕晚会');</code></pre><p>7、根据政策要求，现禁止国际旅游，R03路线因此停止，请删除</p><pre class=" language-shell"><code class="language-shell">DELETE FROM TRACEL_ROUTE WHERE ROUTE_ID = 'RO3';</code></pre><p>8、考虑到成本问题，R02路线需要涨价500元/人</p><pre class=" language-shell"><code class="language-shell">UPDATE TRACEL_ROUTE SET PRICE = NVL(PRICE,0) + 500 WHERE ROUTE_ID = 'R02';UPDATE TRACEL_ROUTE SET ROUTE_ID = 'R01' WHERE ROUTE_NAME = '泰安方特一日游'; SELECT * FROM TRACEL_ROUTE</code></pre><p>9、将始发地与目的地内容调换</p><pre class=" language-shell"><code class="language-shell">UPDATE TRACEL_ROUTE SET DEPART=DESTINATION,DESTINATION = DEPART;</code></pre><p>10、修改价格，若原价格在千元以下，增长100块钱，若价格在几千块钱，增长1000，<br>     若价格在万元以上，降价1000块钱</p><pre class=" language-shell"><code class="language-shell">UPDATE TRACEL_ROUTE SET PRICE = NVL(PRICE,0) + 100 WHERE PRICE < 1000;UPDATE TRACEL_ROUTE SET PRICE = NVL(PRICE,00) + 1000 WHERE PRICE > 10000;SELECT * FROM TRACEL_ROUTE</code></pre><h1 id="END……"><a href="#END……" class="headerlink" title="END……"></a>END……</h1><h2 id="code-from-codeliuzhan-cn"><a href="#code-from-codeliuzhan-cn" class="headerlink" title="code from codeliuzhan.cn"></a>code from codeliuzhan.cn</h2>]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据第一阶段 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oracle第五天</title>
      <link href="2021/04/22/oracle-di-wu-tian/"/>
      <url>2021/04/22/oracle-di-wu-tian/</url>
      
        <content type="html"><![CDATA[<h1 id="2021-04-22-Oracle学习第五天"><a href="#2021-04-22-Oracle学习第五天" class="headerlink" title="2021/04/22 Oracle学习第五天"></a>2021/04/22 Oracle学习第五天</h1><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>今天上午主要练习了一些令人掉头发的习题，下午学习了一些基本数据类型，以此记录。</p><h3 id="数据类型的定义与常见类型"><a href="#数据类型的定义与常见类型" class="headerlink" title="数据类型的定义与常见类型"></a>数据类型的定义与常见类型</h3><p>数据：是用于输入计算机进行处理，具有一定意义的数字、字母、符号和模拟量等的通称，数据库中多数涉及到的是文本类的内容</p><p>数据类型：字面意思指数据的分类。</p><p>数据的分类是为了更方便、快速的对数据进行更进一步的处理</p><p>信息：对数据进行加工处理之后所得到的并对决策产生影响的数据。</p><p>数据类型：列的属性，一个列只能有一个属性</p><p>常见的数据类型：<br>字符型：用来存放字符型数据，字符包括字母、符号、数字、汉字以及以上所有的组合。</p><p>数值型：仅有数字，可以用来计算。</p><p>日期型：存放的是一个时间点，包括年、月、日、时、分、秒、周、季等等。</p><h3 id="字段属性"><a href="#字段属性" class="headerlink" title="字段属性"></a>字段属性</h3><p>每个字段都有自己的一个属性，包含数据类型、精度（字段大小、主键、格式、默认值、有效性等）。</p><p>字段的属性在建表时设定，每个字段只能存放特定属性的数据。<br>同时每个字段不仅包括数据类型，对于字符和数值还包括数据的精度。</p><p>比如</p><ul><li>字符型字段能存放最长多少单位的数据；</li><li>数值型字段能存放多长单位的数据，数值的小数部分有多少位；</li><li>日期型字段的显示方式。</li></ul><h3 id="字符型："><a href="#字符型：" class="headerlink" title="字符型："></a>字符型：</h3><p>CHAR(n)：固定长度字符串，该类型的字段中存储固定长度的字符型数据。括号中的n表示字段精度。存入该字段的数据最长不得超过n，若长度不足n，则在右侧以空格补全凑齐n位长度。 N的最大值2000</p><p>注：以CHAR类型字段查询数据时，注意右边带有的空格</p><p>VARCHAR2(n)：可变长度字符串，该类型的字段中存储可变长度的字符型数据。括号中的n表示字段精度。存入该字段的数据最长不得超过n，若长度不足n，则以实际长度数据存储。N的最大值为4000</p><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><p>Plsql–选中表名—右键—describe(描述)</p><pre class=" language-shell"><code class="language-shell">CREATE TABLE  EMP2  AS SELECT  * FROM EMP WHERE 1=0;--建立一张与EMP表字段相同的EMP2（没有数据）</code></pre><h5 id="字符串长度函数"><a href="#字符串长度函数" class="headerlink" title="字符串长度函数:"></a>字符串长度函数:</h5><p>LENGTH(STR):返回字符串STR的字符长度</p><p>‘ABC’   /  ‘    ABC’ / ‘ABC    ‘ /   ‘  A B C  ‘  / ENAME</p><p>显示EMP表中JOB字段、ENAME字段的长度</p><p>CHAR 与VARCHAR2能否互相修改？数据精度能否由大改小？？</p><h5 id="修改单列字段的字段属性："><a href="#修改单列字段的字段属性：" class="headerlink" title="修改单列字段的字段属性："></a>修改单列字段的字段属性：</h5><p>ALTER TABLE  表名   MODIFY 字段名  数据类型;</p><p>例：将EMP表中的JOB改为CHAR(10)/CHAR(7) /VARCHAR2(10)</p><h3 id="CHAR与VARCHAR2联系和区别"><a href="#CHAR与VARCHAR2联系和区别" class="headerlink" title="CHAR与VARCHAR2联系和区别"></a>CHAR与VARCHAR2联系和区别</h3><ol><li>两者都是存储字符串类型的数据</li><li>超过定义长度，会报错</li><li>长度范围不同</li><li>CHAR类型会使用空格填充剩余长度<br>VARCHAR2类型不会使用空格进行填充</li><li>CAHR类型占用的空间多，效率相对高一点<br>VARCHAR2类型占用的空间少，效率相对低一点</li></ol><h2 id="字段属性—数值型"><a href="#字段属性—数值型" class="headerlink" title="字段属性—数值型"></a>字段属性—数值型</h2><p>NUMBER(p , s)：<br>该类型的字段中存放数值型数据。括号内的p表示数值的总长度（不含小数点）,s表示小数位的长度，即整数位的长度为p-s。</p><pre class=" language-shell"><code class="language-shell">1234.56 NUMBER(  8 , 2   )     123456 /    45678,789  NUMBER(  8   ,   0 )向EMP2表SAL字段中插入789/123.456789/9999.99/99999.999</code></pre><p>数值型字段在存储数值时:</p><ul><li>若小数位的长度不足，则以0补全，</li><li>若小数位的长度超长，则超出部分遵循四舍五入处理。</li><li>处理后的小数位+整数位的长度不能超出总精度p，否则会报错。<br>注：先把小数位进行四舍五入操作，然后检验总长度是否超过P</li></ul><p>将EMP2中的SAL 字段属性由NUMBER(7,2)修改为:</p><ol><li>NUMBER(7,0)—1234567.49  /  1234567.895   (将小数位全部进行四舍五入）</li><li>NUMBER(7,-1)–1234567.89   /1234564.89 （将小数点前的S位进行四舍五入））</li><li>NUMBER(4,5)—123.456—12.456—1.456—0.456—0.045—0.04500</li><li>NUMBER(4,6)—0.023—0.0034/0.0098745642</li></ol><p>S&gt;=P计算方式：整数位为0，保证小数点右边有s-p个0；剩余小数位为S-(S-P)个，位数不足用0补齐，超出进行四舍五入；总长度为1+|S|</p><p>S&lt;0计算方式：总长度&lt;p+|s|</p><h3 id="日期型："><a href="#日期型：" class="headerlink" title="日期型："></a>日期型：</h3><p>DATE：最常见的日期型数据，固定存储7个字节，包括世纪、年、月、日、时、分、秒，但并不一定都显示。可以通过该种类型的数据查到关于日期的以上信息及季度、星期等信息。日期型数据的最终显示格式与工具的设置有关。</p><p>TIMESTAMP：不常见的日期型数据，存储7到11个字节，相比DATE多出毫秒部分。<br>常用日期函数：<br>SYSDATE;SYSTIMESTAMP</p><h2 id="基本的建表、删表语句"><a href="#基本的建表、删表语句" class="headerlink" title="基本的建表、删表语句"></a>基本的建表、删表语句</h2><p>建表语法：</p><pre class=" language-shell"><code class="language-shell">CREATE TABLE TB_NAME (COL_NAME1    COL_TYPE,COL_NAME2    COL_TYPE,COL_NAME3    COL_TYPE,…COL_NAMEN   COL_TYPE);</code></pre><p>删表语法：</p><pre class=" language-shell"><code class="language-shell">DROP TABLE   TB_NAME; </code></pre><p>TB_NAME:表名<br>COL_NAME:字段名<br>COL_TYPE:数据类型<br>建表时，表中至少要有一个字段<br>建立的表格为表的框架，即表结构</p><h3 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h3><p>习题：建立一张学生信息表（STUDENT）<br>包含:<br>学号SNO          –存放两位整数<br>姓名SNAME     –定长字符，最长10位<br>年龄AGE          –存放最长2位数值<br>生日 BIRTH      –以日期存放<br>身高HEIGHT   –整数至少3位，2位小数</p><pre class=" language-shell"><code class="language-shell">CREATE TABLE STUDENT(SNO NUMBER(2),SNAME CHAR(10),AGE NUMBER(2),BIRTH DATE,HEIGHT NUMBER(5,2));SELECT * FROM STUDENT FOR UPDATE;</code></pre><p>习题：建立一张教师信息表（TEACHER）</p><p>编号TNO         –存放两位整数<br>姓名TNAME     –变长字符，最长10位<br>年龄AGE          –存放最长2位数值<br>工作时间<br>HIREDATE        –存放日期<br>薪资SAL           –5位整数，2位小数)<br>电话TEL           –存放15位字符</p><pre class=" language-shell"><code class="language-shell">CREATE TABLE TERCHER(TNO NUMBER(2),TNAME VARCHAR(10),AGE NUMBER(2),HIREDATE DATE,SAL NUMBER(7,2),TEL CHAR(15));SELECT * FROM TERCHER FOR UPDATE;</code></pre><h2 id="基本的增、删、改"><a href="#基本的增、删、改" class="headerlink" title="基本的增、删、改"></a>基本的增、删、改</h2><pre class=" language-shell"><code class="language-shell">SELECT * FROM TB_NAME FOR UPDATE;</code></pre><p>优点：</p><ol><li>操作简单方便，像操作一张EXCEL表格一样</li><li>一个语法即可同时解决增、删、改三种操作</li></ol><p>缺点：</p><ol><li>仅能在PLSQL窗口中操作，不能写在代码中</li><li>做过的操作不能被记录，不方便后期的确认与追责</li><li>需要人工手动操作，不能自动化执行</li></ol><p>THE END………</p><p>FORM codeliuzhan.cn 2021/04/22</p>]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据第一阶段 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oracle第四天</title>
      <link href="2021/04/21/di-si-tian/"/>
      <url>2021/04/21/di-si-tian/</url>
      
        <content type="html"><![CDATA[<h1 id="2021-04-21-第四堂课"><a href="#2021-04-21-第四堂课" class="headerlink" title="2021/04/21 第四堂课"></a>2021/04/21 第四堂课</h1><hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>2021/04/21，今天的Oracle内容主要涉及分组函数及分组函数练习题，早晨老师讲了一下昨天的习题，简单来说就是使用套娃思想来解决出现的问题。</p><h3 id="分组查询——聚合函数"><a href="#分组查询——聚合函数" class="headerlink" title="分组查询——聚合函数"></a>分组查询——聚合函数</h3><p>概念：<br>把分散的数据按某种规则将数据分成不同的组、或所有数据整体作为一个组，对组级别的数据进行统计计算，每组得到一个返回值。</p><pre class=" language-shell"><code class="language-shell">SUM():求合计值          AVG():求平均值MAX():求最大值         MIN():求最小值COUNT():计数</code></pre><p>思考：哪些聚合函数可能出现空值，哪些聚合函数不可能出现空值</p><p>例：</p><ol><li>查询整个公司的薪资合计；<pre class=" language-shell"><code class="language-shell">SELECT SUM(SAL) FROM EMP;</code></pre></li><li>查询整个公司薪资+奖金的合计值<pre class=" language-shell"><code class="language-shell">SELECT SUM(SAL) + SUM(COMM) FROM EMP;</code></pre></li><li>查询整个公司的平均薪资；<pre class=" language-shell"><code class="language-shell">SELECT AVG(SAL) FROM EMP;</code></pre></li><li>查询整个公司的人数（EMPPNO;COMM；1；*；主键）<pre class=" language-shell"><code class="language-shell">SELECT COUNT(1) FROM EMP;</code></pre></li><li>查询整个公司的最高薪资与最低薪资<pre class=" language-shell"><code class="language-shell">SELECT MAX(SAL),MIN(SAL) FROM EMP;</code></pre></li><li>查询10号部门的薪资(奖金)合计、最高薪资(奖金) 、最低薪资(奖金) 、平均薪资(奖金)以及部门总人数<pre class=" language-shell"><code class="language-shell">SELECT SUM(SAL) + SUM(COMM),    MAX(SAL),    MIN(SAL),    AVG(SAL),    COUNT(1)FROM EMPWHERE DEPTNO = 10;</code></pre></li><li>查询整个公司的平均奖金（仅考虑拿到奖金的人）<pre class=" language-shell"><code class="language-shell">SELECT AVG(COMM)FROM EMPWHERE COMM IS NOT NULL;</code></pre></li><li>查询整个公司的平均奖金（考虑公司的所有人）<pre class=" language-shell"><code class="language-shell">SELECT AVG(SAL)FROM EMOWHERE COMM IS NULL;</code></pre></li></ol><p>注意：</p><ol><li>所有聚合函数都是针对非空值进行的统计</li><li>COUNT()的特殊用法：若是在不确定哪些字段不含空值的情况下统计总数据量，可以使用COUNT(1)或COUNT(*)来统计</li><li>五个聚合函数中，只有COUNT是不会返回空值的</li></ol><h3 id="聚合函数练习题"><a href="#聚合函数练习题" class="headerlink" title="聚合函数练习题"></a>聚合函数练习题</h3><p>1.分别查询emp表的工资列的最大最小平均值和工资和</p><pre class=" language-shell"><code class="language-shell">SELECT MAX(SAL), MIN(SAL), AVG(SAL), SUM(SAL) FROM EMP;</code></pre><p>2.查询姓名以A开头的员工的工资和，以及最高最低工资，员工人数</p><pre class=" language-shell"><code class="language-shell">SELECT SUM(SAL),MAX(SAL),MIN(SAL),COUNT(1)FROM EMPWHERE ENAME LIKE'A%';</code></pre><p>3.统计姓名以S开头的员工的员工人数，工资和，以及最高最低平均工资</p><pre class=" language-shell"><code class="language-shell">SELECT SUM(SAL),MAX(SAL),MIN(SAL),COUNT(1)FROM EMPWHERE ENAME LIKE'S%';</code></pre><p>4.统计姓名以K开头的员工的员工人数，工资和，以及最高最低平均工资</p><pre class=" language-shell"><code class="language-shell">SELECT SUM(SAL),MAX(SAL),MIN(SAL),COUNT(1)FROM EMPWHERE ENAME LIKE'K%';</code></pre><p>5.查询姓名以A开头并且不包含%和_等特殊字符的员工的工资和，以及最高最低工资，员工人数</p><pre class=" language-shell"><code class="language-shell">SELECT SUM(SAL), MAX(SAL), MIN(SAL), COUNT('A')  FROM EMP WHERE ENAME LIKE 'A%'   AND ENAME NOT LIKE '%^%%' ESCAPE '^'   AND ENAME NOT LIKE '%^_%' ESCAPE '^';</code></pre><p>6.统计姓名以S开头的并且包含%和_或者工资高于1000的员工的员工人数，工资和，以及最高最低平均工资</p><pre class=" language-shell"><code class="language-shell">SELECT SUM(SAL), MAX(SAL), MIN(SAL), COUNT('A')  FROM EMP WHERE ENAME LIKE 'S%'   AND ENAME LIKE '%^%%' ESCAPE '^'   AND ENAME LIKE '%^_%' ESCAPE '^';</code></pre><p>7.统计姓名以K开头不以A结尾且是10或者20号部门的员工的员工人数，工资和，以及最高最低平均工资</p><pre class=" language-shell"><code class="language-shell">SELECT SUM(SAL), MAX(SAL), MIN(SAL), COUNT('A')  FROM EMP WHERE ENAME LIKE 'K%'   AND ENAME NOT LIKE '%A'   AND DEPTNO IN (10, 20);</code></pre><h2 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h2><p>语法：</p><pre class=" language-shell"><code class="language-shell">SELECT COL_LIST,聚合函数,常量  FROM TB_NAME GROUP BY COL_LIST;</code></pre><h3 id="语法解释："><a href="#语法解释：" class="headerlink" title="语法解释："></a>语法解释：</h3><p>对数据源TB_NAME按照COL_LIST分组，统计各分组的分析情况</p><ol><li>查询各部门的平均薪资及部门编号</li><li>查询各部门的最大最小薪资</li><li>查询各个工种的平均工资 </li></ol><p>分组函数注意事项：</p><ol><li>对于含有GROUP BY子句的SQL语句，SELECT子句中仅允许出现</li></ol><ul><li>GROUP BY中出现过的字段</li><li>聚合函数</li><li>常量:数值、字符、日期</li></ul><ol start="2"><li>对于不含有GROUP BY子句但SELECT子句中含有聚合函数的情况，SELECT子句中除聚合函数与常量外，不能再出现其他字段</li><li>别名不可以用于分组</li></ol><h3 id="分组练习题"><a href="#分组练习题" class="headerlink" title="分组练习题"></a>分组练习题</h3><p>1.统计各部门的薪资合计与部门人数</p><pre class=" language-shell"><code class="language-shell">SELECT DEPTNO, SUM(SAL), COUNT(1) FROM EMP GROUP BY DEPTNO;</code></pre><p>1.1统计各部门的平均薪资、薪资合计</p><pre class=" language-shell"><code class="language-shell">SELECT DEPTNO, ROUND(AVG(SAL), 2), SUM(SAL) FROM EMP GROUP BY DEPTNO;</code></pre><p>1.2求各部门编码、各部门人数，并按部门编号排序</p><pre class=" language-shell"><code class="language-shell">SELECT DEPTNO,COUNT(1) FROM EMP GROUP BY DEPTNO ORDER BY DEPTNO ASC;</code></pre><p>1.3查询员工表中每天入职的员工人数</p><pre class=" language-shell"><code class="language-shell">SELECT COUNT(1),HIREDATE FROM EMP GROUP BY HIREDATE;</code></pre><p>2.统计各部门各岗位的平均薪资 (分组规则中包含多个字段，书写字段的先后顺序，对结果的影响)</p><pre class=" language-shell"><code class="language-shell">SELECT DEPTNO,JOB,AVG(SAL) FROM EMP GROUP BY DEPTNO,JOB;</code></pre><p>3.统计各部门的薪资最大值与最小值的差值</p><pre class=" language-shell"><code class="language-shell">SELECT MAX(SAL),MIN(SAL),MAX(SAL)-MIN(SAL) AS 差值 FROM EMP GROUP BY DEPTNO;</code></pre><p>求各部门最大薪资及最小薪资，以及对应的部门编号</p><pre class=" language-shell"><code class="language-shell">SELECT DEPTNO,MAX(SAL),MIN(SAL) FROM EMP GROUP BY DEPTNO;</code></pre><p>4.统计销售人员与非销售人员的平均薪资(GROUP BY 执行顺序)</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM EMP;SELECT AVG(SAL),       CASE         WHEN JOB = 'SALESMAN' THEN          '销售人员'         ELSE          '非销售人员'       END AS A  FROM EMP GROUP BY CASE            WHEN JOB = 'SALESMAN' THEN             '销售人员'            ELSE             '非销售人员'          END</code></pre><p>5.统计85年以前入职与85年及以后入职的员工的平均薪资</p><pre class=" language-shell"><code class="language-shell">SELECT AVG(SAL),       CASE         WHEN HIREDATE < TO_DATE('1985/01/01', 'YYYY/MM/DD') THEN          '85年前入职'         WHEN HIREDATE >= TO_DATE('1985/01/01', 'YYYY/MM/DD') THEN          '85年后入职'       END AS A  FROM EMP GROUP BY CASE            WHEN HIREDATE < TO_DATE('1985/01/01', 'YYYY/MM/DD') THEN             '85年前入职'            WHEN HIREDATE >= TO_DATE('1985/01/01', 'YYYY/MM/DD') THEN             '85年后入职'          END</code></pre><p>6.统计非10号部门的其他部门中，各部门的最高薪资，并按照部门编号升序排序</p><pre class=" language-shell"><code class="language-shell">SELECT DEPTNO,MAX(SAL) FROM EMP WHERE DEPTNO != 10 GROUP BY DEPTNO  ORDER BY DEPTNO ASC;</code></pre><p>7.查询工资大于1500的员工的部门编号及部门平均工资</p><pre class=" language-shell"><code class="language-shell">SELECT DEPTNO,ROUND(AVG(SAL),2) FROM EMP WHERE SAL > 1500 GROUP BY DEPTNO;</code></pre><p>8.统计10,20号部门的员工人数</p><pre class=" language-shell"><code class="language-shell">SELECT DEPTNO,COUNT(1) FROM EMP WHERE DEPTNO IN(10,20) GROUP BY DEPTNO;</code></pre><p>9.以有佣金无佣金分组分别查询平均工资，员工人数及最大工资，组别。组别为有佣金无佣金列的字段名</p><pre class=" language-shell"><code class="language-shell">SELECT AVG(SAL) AS 平均工资,COUNT(1) AS 员工人数,MAX(SAL) AS 最大工资,                CASE WHEN COMM IS NULL THEN '无佣金'                     WHEN COMM IS NOT NULL THEN '有佣金'                     END AS 有无佣金                FROM EMP                GROUP BY                CASE WHEN COMM IS NULL THEN '无佣金'                     WHEN COMM IS NOT NULL THEN '有佣金'                     END                     SELECT * FROM EMP</code></pre><p>10.查询各部门最高薪资，按部门编号升序排列</p><pre class=" language-shell"><code class="language-shell">SELECT DEPTNO,MAX(SAL) FROM EMP GROUP BY DEPTNO ORDER BY DEPTNO ASC;</code></pre><p>11.查询10号部门与20号部门的最高薪资，按部门编号升序排列</p><pre class=" language-shell"><code class="language-shell">SELECT DEPTNO,MAX(SAL) FROM EMP WHERE DEPTNO IN(10,20) GROUP BY DEPTNO ORDER BY DEPTNO ASC;</code></pre><p>12.查询岗位不是销售的员工，求各岗位平均薪资，按岗位降序排列\</p><pre class=" language-shell"><code class="language-shell">SELECT ROUND(AVG(SAL),2),JOB FROM EMP WHERE JOB != 'SALESMAN' GROUP BY JOB  ORDER BY JOB DESC;</code></pre><p>13.查询薪资在1000-3000之间的员工，求各岗位平均薪资，按平均薪资升序排列</p><pre class=" language-shell"><code class="language-shell">SELECT JOB,AVG(SAL) FROM EMP WHERE SAL BETWEEN 1000 AND 3000 GROUP BY JOB ORDER BY AVG(SAL) ASC;SELECT AVG(SAL),JOB FROM EMP WHERE SAL BETWEEN 1000 AND 3000 AND SAL NOT IN(1000,3000) GROUP BY JOB ORDER BY AVG(SAL) ASC;</code></pre><p>14.查询工资在1000到3000之间，按有佣金和没有佣金分组，求薪资合计以及平均薪资，按平均薪资升序排列。</p><pre class=" language-shell"><code class="language-shell"></code></pre><h3 id="HAVING条件查询"><a href="#HAVING条件查询" class="headerlink" title="HAVING条件查询"></a>HAVING条件查询</h3><p>语法：</p><pre class=" language-shell"><code class="language-shell">SELECT COL_LIST,聚合函数,常量FROM TB_NAMEGROUP BY COL_LISTHAVING 以聚合函数为基础的条件判断;</code></pre><p>语法解释：<br>对数据源TB_NAME按照COL_LIST分组，统计各分组的分析情况，并对分析结果进行筛选</p><h3 id="HAVING条件查询注意事项"><a href="#HAVING条件查询注意事项" class="headerlink" title="HAVING条件查询注意事项"></a>HAVING条件查询注意事项</h3><p>WHERE与HAVING的区别和联系</p><ol><li>都是做条件筛选用的</li><li>WHERE不必和GROUP BY连用，HAVING必须和GROUP BY连用</li><li>WHERE筛选的是针对FROM后表的数据，HAVING是针对GROUP BY分组之后的数据进行筛选</li><li>聚合函数的条件全部放到HAVING , 非聚合函数的条件全部放到WHERE</li></ol><h3 id="完整的查询语句"><a href="#完整的查询语句" class="headerlink" title="完整的查询语句"></a>完整的查询语句</h3><p>语法：</p><pre class=" language-shell"><code class="language-shell">SELECT COL_LIST  FROM TB_NAME WHERE CONDITION GROUP BY COL_LISTHAVING CONDITION ORDER BY COL_LIST;</code></pre><p>语法解释：<br>从数据源中，按条件筛选出部分数据，对该部分数据以某规则进行分组，从分组后的条件中再一次进行筛选，最终查出需要的字段，并以某排序规则进行排序</p><p>区分：<br>书写顺序：</p><pre class=" language-shell"><code class="language-shell">SELECT ... FROM ... WHERE ... GROUP BY ... HAVING ... ORDER BY ...</code></pre><p>执行顺序：</p><pre class=" language-shell"><code class="language-shell">FROM ... WHERE ... GROUP BY ... HAVING ... SELECT ... ORDER BY ...</code></pre><p>1.统计各部门中，最高薪资低于5000的部门有哪些</p><pre class=" language-shell"><code class="language-shell">SELECT DEPTNO,MAX(SAL) FROM EMP GROUP BY DEPTNO HAVING MAX(SAL) < 5000;</code></pre><p>2.统计除10号部门的其他部门中，哪些部门的最高薪资达到三千</p><pre class=" language-shell"><code class="language-shell">SELECT MAX(SAL),DEPTNOFROM EMPWHERE DEPTNO != 10GROUP BY DEPTNOHAVING MAX(SAL) >= 3000;SELECT * FROM EMP;</code></pre><p>3.查询平均薪资超过1800的部门，显示部门编号及平均薪资</p><pre class=" language-shell"><code class="language-shell">SELECT DEPTNO,AVG(SAL)FROM EMPGROUP BY DEPTNOHAVING AVG(SAL) > 1800;</code></pre><p>4.查询各部门平均工资大于2000 且部门编号不等于10的部门编号及平均工资</p><pre class=" language-shell"><code class="language-shell">SELECT DEPTNO,AVG(SAL)FROM EMPWHERE DEPTNO != 10GROUP BY DEPTNOHAVING AVG(SAL) > 2000;</code></pre><p>5.查询部门人数超过4人的部门编号及薪资合计</p><pre class=" language-shell"><code class="language-shell">SELECT DEPTNO,SUM(SAL),COUNT(1)FROM EMPGROUP BY DEPTNOHAVING COUNT(1) > 4;</code></pre><p>6.查询各部门下，人数超过两人的岗位有哪些，显示部门编号、岗位名称</p><pre class=" language-shell"><code class="language-shell">SELECT DEPTNO,JOBFROM EMPGROUP BY DEPTNO,JOBHAVING COUNT(1) > 2;</code></pre><p>7.查询姓名重复的员工的姓名</p><pre class=" language-shell"><code class="language-shell">SELECT ENAME FROM EMP GROUP BY ENAME HAVING COUNT(1) >= 2;</code></pre><p>8.按照COMM列去空值以后的数据分组，查询平均工资</p><pre class=" language-shell"><code class="language-shell">SELECT AVG(SAL) FROM EMP GROUP BY COMM HAVING COMM IS NOT NULL;</code></pre><p>9.按照日薪分组，查询员工人数</p><pre class=" language-shell"><code class="language-shell">SELECT COUNT(1),SAL/21.75 日薪FROM EMPGROUP BY SAL/21.75;</code></pre><p>10.查询工资大于2000,且部门工资总计大于3000的部门编号及工资总计</p><pre class=" language-shell"><code class="language-shell">SELECT DEPTNO,SUM(SAL)FROM EMPWHERE SAL>2000GROUP BY DEPTNOHAVING  SUM(SAL) > 3000;</code></pre><p>11.查询部门人数超过3的部门的部门编号、最高薪资、最低薪资、部门人数，按部门人数升序排列</p><pre class=" language-shell"><code class="language-shell">SELECT DEPTNO,MAX(SAL),MIN(SAL),COUNT(1) AS 部门人数FROM EMPGROUP BY DEPTNOHAVING COUNT(1) > 3ORDER BY COUNT(1)  ASC;</code></pre><p>12.统计销售人员和非销售人员的岗位类型、最高薪资、最低薪资、薪资合计、平均薪资，以及人数，各字段以中文列名展示，其中【岗位类型】包含销售人员与非销售人员</p><pre class=" language-shell"><code class="language-shell">SELECT MAX(SAL) AS 最高薪资,       MIN(SAL) AS 最低薪资,       SUM(SAL) AS 薪资合计,       AVG(SAL) AS 平均薪资,       COUNT(1) AS 人数,       CASE         WHEN JOB = 'SALESMAN' THEN          '销售人员'         ELSE          '非销售人员'       END AS 岗位类型  FROM EMP GROUP BY CASE            WHEN JOB = 'SALESMAN' THEN             '销售人员'            ELSE             '非销售人员'          END</code></pre><h1 id="THE-END"><a href="#THE-END" class="headerlink" title="THE END"></a>THE END</h1><ul><li>FROM codeliuzhan.cn</li></ul>]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据第一阶段 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oracle第三天</title>
      <link href="2021/04/20/oracle-di-san-tian/"/>
      <url>2021/04/20/oracle-di-san-tian/</url>
      
        <content type="html"><![CDATA[<h1 id="2021-04-20-Oracle第三天"><a href="#2021-04-20-Oracle第三天" class="headerlink" title="2021/04/20 Oracle第三天"></a>2021/04/20 Oracle第三天</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>2021年4月20日，周二，今天的学习内容相对于昨天来说要简单一些，主要涉及的内容有：排序查询 ORDER BY，升序ASC,降序DESC，函数NVL，聚合函数等</p><h3 id="排序查询"><a href="#排序查询" class="headerlink" title="排序查询"></a>排序查询</h3><p>语法：</p><pre class=" language-shell"><code class="language-shell">SELECT COL_LIST FROM TB_NAME WHERE COL_LIST  ORDER  BY ODR_CONDITION [ASC|DESC];</code></pre><p>语法解释：</p><p>对于从TB_NAME中查出的COL_LIST数据按照规则ODR_CONDITION进行排序</p><h4 id="Asc关键字可以省略；"><a href="#Asc关键字可以省略；" class="headerlink" title="Asc关键字可以省略；"></a>Asc关键字可以省略；</h4><h4 id="执行顺序："><a href="#执行顺序：" class="headerlink" title="执行顺序："></a>执行顺序：</h4><p>FROM – WHERE–SELECT—ORDER  BY  </p><p>分类：</p><ol><li>按排序规则</li></ol><ul><li>升序、降序、同升同降、升降混合（两个以上排序依据，中间用英文逗号隔开）</li></ul><ol start="2"><li>按排序内容</li></ol><ul><li>原字段</li><li>表达式（函数、计算）</li><li>代号（字段别名、字段序号）</li></ul><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ul><li>排序时可跟多个字段（多个排序规则）</li><li>排序时，按照从左向右的规则进行排序</li><li>升序ASC关键词可以省略不写</li><li>每一个升降序关键词写在各自的字段后边</li><li>可以按照查询结果中未出现过的字段进行排序</li></ul><p>排序查询练习题：</p><p>1.查询员工姓名、岗位及薪资，并将查询结果按薪资升序排列</p><pre class=" language-shell"><code class="language-shell">SELECT ENAME,JOB,SAL FROM EMP ORDER BY SAL ASC;</code></pre><p>2.查询员工姓名、岗位、薪资及入职日期，并将结果按照入职日期降序排列</p><pre class=" language-shell"><code class="language-shell">SELECT ENAME,JOB,SAL,HIREDATE FROM EMP ORDER BY HIREDATE DESC;</code></pre><p>2.2查询员工姓名、岗位、薪资，并将结果按照入职日期降序排列</p><pre class=" language-shell"><code class="language-shell">SELECT ENAME,JOB,SAL FROM EMP ORDER BY HIREDATE DESC;</code></pre><p>3..查询员工信息，将查询结果按部门编号降序排列,部门编号相同,按员工编号降序</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM EMP ORDER BY DEPTNO DESC,EMPNO DESC;</code></pre><p>4.查询员工信息，排序：部门升序，薪资降序，员工编号升序</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM EMP ORDER BY DEPTNO ASC,SAL DESC,EMPNO ASC;</code></pre><p>5.查询员工信息，并将查询结果按部门编号升序排列，部门编号相同，则按薪资升序排列，薪资相同，按照员工编号升序</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM EMP ORDER BY DEPTNO ASC,SAL ASC,EMPNO ASC;</code></pre><h2 id="扩展NULLS"><a href="#扩展NULLS" class="headerlink" title="扩展NULLS"></a>扩展NULLS</h2><h4 id="NULL值的默认排序与强制排序"><a href="#NULL值的默认排序与强制排序" class="headerlink" title="NULL值的默认排序与强制排序"></a>NULL值的默认排序与强制排序</h4><p>NULL值默认排序为极大值，即升序排列时，空值排在最后，降序排列时，空值排在最前</p><ul><li>强制空值排在最前：NULLS  FIRST</li><li>强制空值排在最后：NULLS  LAST</li></ul><h2 id="扩展NVL"><a href="#扩展NVL" class="headerlink" title="扩展NVL"></a>扩展NVL</h2><h3 id="例"><a href="#例" class="headerlink" title="例:"></a>例:</h3><p>查询员工姓名、薪资、奖金、薪资奖金合计,并按照薪资奖金合计值降序排列</p><p>函数NVL(COL_NAME,DEFAULT_VALUE)： 将参数一中的null替换为参数二所设置的值</p><h3 id="注："><a href="#注：" class="headerlink" title="注："></a>注：</h3><ol><li>任何值与空值相计算，得到的结果都为空</li><li>NVL()函数中的默认值，要与第一个参数的数据类型相统一</li><li>NVL()函数只针对空值，非空值不会做任何处理</li></ol><hr><h2 id="两个扩展函数及排序练习题"><a href="#两个扩展函数及排序练习题" class="headerlink" title="两个扩展函数及排序练习题"></a>两个扩展函数及排序练习题</h2><p>6.查询员工信息，将查询结果按部门编号降序排列，若部门编号相同，则按员工编号降序</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM EMP ORDER BY DEPTNO DESC,EMPNO DESC;</code></pre><p>7.查询员工信息，并将查询结果按部门编号升序排列，同部门的按薪资降序排列</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM EMP ORDER BY DEPTNO ASC,SAL DESC;</code></pre><p>8.查询员工姓名、薪资及部门编号，并将查询结果按部门编号升序排列，同部门的按姓名升序排列（区分大小写）</p><pre class=" language-shell"><code class="language-shell">SELECT ENAME,SAL,DEPTNO FROM EMP ORDER BY DEPTNO ASC,ENAME ASC;</code></pre><p>9.查询员工姓名、薪资及部门编号，并将查询结果按部门编号升序排列，同部门的按姓名升序排列（不分大小写）</p><pre class=" language-shell"><code class="language-shell">SELECT ENAME,SAL,DEPTNO FROM EMP ORDER BY DEPTNO ASC,LOWER(ENAME) ASC;</code></pre><p>10.查询员工信息及年薪，将查询结果按照年薪降序显示</p><pre class=" language-shell"><code class="language-shell">SELECT EMP.*,SAL*12 AS 年薪 FROM EMP ORDER BY 年薪 DESC;</code></pre><p>11.查询86年以前入职的姓名，岗位，薪资，部门，将查询结果按照部门升序，岗位降序，姓名升序</p><pre class=" language-shell"><code class="language-shell">SELECT ENAME,JOB,SAL,DEPTNO,HIREDATE FROM EMP WHERE HIREDATE < TO_DATE('19860101','YYYYMMDD') ORDER BY DEPTNO ASC,JOB DESC,ENAME ASC; </code></pre><p>12.查询员工所有信息，并将查询结果按奖金升序排列</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM EMP ORDER BY COMM ASC;</code></pre><p>查询员工所有信息，并将查询结果按领导编号降序排列</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM EMP ORDER BY MGR DESC;</code></pre><p>查询员工所有信息，按佣金升序排列，NULL指定排在最前</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM EMP ORDER BY COMM NULLS FIRST;</code></pre><p>查询员工所有信息，按佣金降序排列，NULL指定排在最后</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM EMP ORDER BY COMM NULLS LAST;</code></pre><p>查询员工姓名、薪资、奖金、薪资奖金合计,并按照薪资奖金合计值降序排列</p><pre class=" language-shell"><code class="language-shell">SELECT ENAME,SAL,COMM,NVL(COMM,0),SAL+COMM AS 合计 FROM EMP ORDER BY 合计 DESC;</code></pre><hr><h3 id="两个扩展函数的练习题"><a href="#两个扩展函数的练习题" class="headerlink" title="两个扩展函数的练习题"></a>两个扩展函数的练习题</h3><p>1、查询员工姓名、岗位、薪资及奖金，若奖金为空，则显示为”CLERK”</p><pre class=" language-shell"><code class="language-shell">SELECT ENAME,JOB,SAL,COMM,NVL(COMM,'CLERK') FROM EMP; </code></pre><p>2、查询员工姓名、入职日期，若入职日期为空，则显示为2020-5-1；</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM EMP FOR UPDATE;SELECT ENAME,HIREDATE,NVL(HIREDATE,TO_DATE('20200501','YYYYMMDD')) FROM EMP;</code></pre><p>3、查询员工信息，将所有人奖金增加1000元</p><pre class=" language-shell"><code class="language-shell">SELECT EMP.*,NVL(COMM,0) + 1000 FROM EMP; </code></pre><p>4、查询员工信息，将非销售人员加100奖金</p><pre class=" language-shell"><code class="language-shell">SELECT EMP.*,NVL(COMM,0) + 100 FROM EMP WHERE JOB != 'SALESMAN';</code></pre><h2 id="分组查询-聚合函数"><a href="#分组查询-聚合函数" class="headerlink" title="分组查询-聚合函数"></a>分组查询-聚合函数</h2><h3 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h3><p>把分散的数据按某种规则将数据分成不同的组、或所有数据整体作为一个组，对组级别的数据进行统计计算，每组得到一个返回值。</p><h3 id="五个聚合函数："><a href="#五个聚合函数：" class="headerlink" title="五个聚合函数："></a>五个聚合函数：</h3><pre class=" language-shell"><code class="language-shell">SUM():求合计值          AVG():求平均值MAX():求最大值          MIN():求最小值COUNT():计数</code></pre><p>思考：哪些聚合函数可能出现空值，哪些聚合函数不可能出现空值</p><h2 id="扩展CASE-WHEN-函数"><a href="#扩展CASE-WHEN-函数" class="headerlink" title="扩展CASE WHEN 函数"></a>扩展CASE WHEN 函数</h2><p>拓展：</p><pre class=" language-shell"><code class="language-shell">CASE WHEN 用法:CASE WHEN CONDITION1 THEN RESULT1          WHEN CONDITION2 THEN RESULT2     ...             ELSE DEFAULT_RESULT END </code></pre><p>注意事项：</p><ol><li>后边的判断条件被启用的前提是，前边的条件不符合</li><li>如果不符合任何一个条件（包含ELSE），得到的返回值是空</li><li>CASE WHEN 语句得到的是一列字段</li><li>判断后续条件成立与否时，默认前边的条件不成立（与前边条件对立的条件成立）</li><li>返回值可以与条件中的字段数据类型不同，</li><li>所有的返回值必须类型统一</li></ol><h3 id="今日练习："><a href="#今日练习：" class="headerlink" title="今日练习："></a>今日练习：</h3><p>查询员工信息及佣金情况（有佣金的展示佣金，没有佣金的展示为：无佣金）</p><pre class=" language-shell"><code class="language-shell">SELECT EMP.*,CASE WHEN COMM IS NOT NULL THEN TO_CHAR(COMM)                  WHEN COMM IS NULL THEN '无佣金'                   END AS 佣金情况FROM EMP;</code></pre><p>查询员工姓名、岗位、薪资及薪资等级<br>      (等级一：700-1200；等级二：1201-1400；等级三：1401-2000；<br>      等级四：2001-3000；等级五：3001-9999）</p><pre class=" language-shell"><code class="language-shell">SELECT ENAME,JOB,SAL,CASE WHEN SAL BETWEEN 700 AND 1200 THEN '等级一'                          WHEN SAL BETWEEN 1201 AND 1400 THEN '等级二'                          WHEN SAL BETWEEN 1401 AND 2000 THEN '等级三'                          WHEN SAL BETWEEN 2001 AND 3000 THEN '等级四'                          WHEN SAL BETWEEN 3001 AND 9999 THEN '等级五'                          END  薪资等级  FROM EMP;</code></pre><p>查询员工信息及部门名称 DNAME（如果部门是10号，返回ACCOUNTING；如果部门是20号，返回RESEARCH；如果部门是30号，返回SALES）</p><pre class=" language-shell"><code class="language-shell">SELECT EMP.*,CASE WHEN DEPTNO = 10 THEN 'ACCOUNTING'                        WHEN DEPTNO = 20 THEN 'RESEARCH'                        WHEN DEPTNO = 30 THEN 'SALES'                        END AS 部门名称FROM EMP;            SELECT * FROM DEPT;SELECT * FROM EMP;</code></pre><p>例：查询员工姓名、岗位及岗位类型<br> （行政岗：办事员；管理岗：经理/总经理；技术岗：分析师；销售岗：销售）</p><pre class=" language-shell"><code class="language-shell">SELECT ENAME,JOB,CASE WHEN JOB = 'CLERK' THEN '行政岗'                       WHEN JOB = 'MANAGER' OR JOB = 'PRESIDENT' THEN '管理岗'                       WHEN JOB = 'ANALYST' THEN '技术岗'                       WHEN JOB = 'SALESMAN' THEN '销售'                       end  岗位类型 from emp; </code></pre><p>1.查询员工所有信息，并将查询结果按奖金升序排列（空值放在最前边）</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM EMP ORDER BY COMM ASC NULLS FIRST;</code></pre><p>2.查询员工所有信息，并将查询结果按领导编号降序排列（空值放在最后边）</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM EMP ORDER BY MGR DESC NULLS LAST;</code></pre><p>3.查询员工姓名、岗位、薪资及奖金，若奖金为空，则显示为0</p><pre class=" language-shell"><code class="language-shell">SELECT ENAME,JOB,SAL,COMM,NVL(COMM,0) AS 奖金 FROM EMP;</code></pre><p>4.查询员工姓名、岗位、薪资及奖金情况（500以下为低奖金，500及以上为高奖金，0或空为无奖金）</p><pre class=" language-shell"><code class="language-shell">SELECT ENAME,JOB,SAL,COMM,CASE WHEN COMM < 500 AND COMM != 0 THEN '低奖金'                               WHEN COMM >= 500 THEN '高奖金'                               WHEN COMM IN(0,NULL) THEN '无奖金'                               END AS 奖金情况  FROM EMP;               </code></pre><p>5.查询每个员工的姓名、薪资(有空值）、奖金（有空值），以及薪资奖金合计、、</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM EMP;SELECT ENAME,SAL,COMM,NVL(SAL,0) + NVL(COMM,0) AS 合计 FROM EMP;</code></pre><p>6.给每个员工加薪100，然后按照加薪后的薪资升序排序</p><pre class=" language-shell"><code class="language-shell">SELECT EMP.*,SAL+100 AS 加薪 FROM EMP  ORDER BY SAL ASC;</code></pre><h2 id="综合练习题"><a href="#综合练习题" class="headerlink" title="综合练习题"></a>综合练习题</h2><p>1.查询20号部门员工编号、姓名、薪资，按薪资升序排列</p><pre class=" language-shell"><code class="language-shell">SELECT EMPNO,ENAME,SAL FROM EMP  WHERE DEPTNO=20 ORDER BY SAL ASC;</code></pre><p>2.查询员工编号、姓名、薪资、部门编号，按部门升序及薪资降序排列</p><pre class=" language-shell"><code class="language-shell">SELECT EMPNO,ENAME,SAL,DEPTNO FROM EMP ORDER BY DEPTNO ASC ,SAL DESC;</code></pre><p>3.查询除20号部门外，员工编号、姓名、薪资、部门编号，按部门升序、薪资升序、工号降序排列</p><pre class=" language-shell"><code class="language-shell">SELECT EMPNO,ENAME ,SAL,DEPTNO FROM EMP WHERE DEPTNO <>20 ORDER BY DEPTNO ASC,SAL ASC, EMPNO DESC;</code></pre><p>4.查询员工姓名、薪资、佣金、薪资佣金合计，按薪资佣金合计值升序排列，薪资佣金以“总计” 二字显示</p><pre class=" language-shell"><code class="language-shell">SELECT ENAME ,SAL,COMM,NVL(SAL,0)+NVL(COMM,0) AS 总计 FROM EMP ORDER BY 总计 ASC;</code></pre><p>5.查询员工姓名、岗位、薪资，按岗位升序排列，其中岗位PRESIDENT排在最前</p><pre class=" language-shell"><code class="language-shell">SELECT ENAME, JOB, SAL FROM EMP ORDER BY CASE WHEN JOB = 'PRESIDENT' THEN 1 ELSE 2 END ASC,JOB ASC;</code></pre><p>6.查询员工姓名、薪资、12个月工资（以“年薪”二字展示），按年薪降序排列</p><pre class=" language-shell"><code class="language-shell">SELECT ENAME ,SAL ,SAL*12 AS 年薪 FROM EMP ORDER BY 年薪 DESC;</code></pre><p>7.给每个员工奖金加100，然后按照增加后的奖金降序排序 </p><pre class=" language-shell"><code class="language-shell">SELECT NVL(COMM,0)+100 奖金 FROM EMP ORDER BY 奖金 DESC;</code></pre><p>8.年终时：有佣金的员工佣金翻倍，无佣金的员工获得薪资的10%作为佣金奖励，</p><p>现查询员工姓名，薪资、佣金调整信息，按员工编号升序排列，其中调整信息包括：</p><p>有佣金的以：“原佣金为：，调整后佣金为：”格式展示<br>无佣金的以：“新增佣金：”格式展示</p><pre class=" language-shell"><code class="language-shell">SELECT ENAME,SAL,CASE         WHEN COMM IS NOT NULL THEN          ('原佣金为:' || COMM || '调整后佣金为：' || COMM * 2)         WHEN COMM IS NULL THEN          ('新增佣金：' || SAL * 0.1)        END 调整信息  FROM EMP;</code></pre><p>9.统计员工姓名及员工资历，并按资历排序，将老员工排在前，新员工排在后<br> （老员工：80年及以前  ；新员工：81年及以后）  </p><pre class=" language-shell"><code class="language-shell">SELECT ENAME ,CASE WHENHIREDATE < TO_DATE('19800101','YYYYMMDD') THEN '老员工'ELSE '新员工'END 员工资历FROM EMP ORDER BY HIREDATE ASC;</code></pre><p>10.查询员工姓名、岗位、薪资及岗位类型，并对岗位类型按（管-行-技-销）顺序排序，岗位类型相同<br>的按薪资降序排列（行政岗：办事员 ；管理岗：经理/总经理；技术岗：分析师；销售岗：销售）</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM EMP;SELECT ENAME ,JOB ,SAL ,CASE                 WHEN JOB = 'MANAGER'OR JOB='PRESIDENT' THEN '管理岗'                WHEN JOB = 'CLERK' THEN '行政岗'                 WHEN JOB = 'ANALYST' THEN '技术岗'                WHEN JOB = 'SALESMAN' THEN '销售岗'                END 岗位类型                FROM EMP                ORDER BY CASE                 WHEN JOB = 'MANAGER'OR JOB='PRESIDENT' THEN '1'                WHEN JOB = 'CLERK' THEN '2'                 WHEN JOB = 'ANALYST' THEN '3'                WHEN JOB = 'SALESMAN' THEN '4'                 END ASC, SAL DESC;</code></pre><p>11.查询员工姓名，员工薪资，薪资等级（1000以下为低级，1000-3000为中级，3000以上为高级）</p><pre class=" language-shell"><code class="language-shell">SELECT ENAME ,SAL,CASE                     WHEN SAL<1000 THEN '低级'                    WHEN SAL BETWEEN 1000 AND 3000 THEN '中级'                    WHEN SAL>3000 THEN '高级'            FROM EMP;</code></pre><p>12.查询20号部门员工的姓名、岗位、薪资、奖金（奖金为空的处理成0），并以薪资奖金的合计值进行降序排列，合计值相同的按员工编号升序排列</p><pre class=" language-shell"><code class="language-shell">SELECT ENAME,JOB,SAL,NVL(COMM,0) FROM EMP ORDER BY NVL(SAL,0)+NVL(COMM,0) DESC , EMPNO ASC;</code></pre><p>13.查询emp表,要求结果按照工资降序排列(剔除工资为空的);</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM EMP WHERE SAL IS NOT NULL ORDER BY SAL DESC;</code></pre><p>14.按员工岗位降序排列，经理排在第一位;</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM EMP ORDER BY CASE WHEN JOB='PRESIDENT'THEN 1 ELSE 2 END ASC , JOB ASC;</code></pre><p>15.按员工岗位升序排列且除经理外其他工种小写，经理排在第一位;</p><pre class=" language-shell"><code class="language-shell">SELECT EMP.*,CASE               WHEN JOB='MANAGER 'THEN UPPER(ENAME)               ELSE LOWER(ENAME)               END JOB               FROM EMP               ORDER BY               CASE WHEN JOB='MANAGER'THEN 1               ELSE 2               END ASC , JOB ASC;</code></pre><p>16.查找员工信息要求岗位除经理外其他工种小写，按员工岗位降序排列且经理排在第一位;</p><pre class=" language-shell"><code class="language-shell">SELECT EMP.*,CASE WHEN JOB='MANAGER 'THEN UPPER(ENAME) ELSE LOWER(ENAME) END JOB FROM EMP ORDER BY CASE WHEN JOB='MANAGER'THEN 1 ELSE 2 END ASC , JOB DESC;</code></pre><p>17.查询每个员工的姓名、岗位，以及以下列CLERK_SAL,MANAGER_SAL,PRESIDENT_SAL,ANALYST_SAL,SALESMAN_SAL,<br>每个人在自己所属的岗位下有对应的薪资信息，其他字段显示为0</p><p>例：SCOTT  ANALYST 0  0  0  3000  0*/</p><pre class=" language-shell"><code class="language-shell">SELECT *FROM EMP ;SELECT ENAME,CASE WHEN JOB='CLERK' THEN JOB ELSE TO_CHAR(0) END AS CLERK_SAL,CASE WHEN JOB='MANAGER' THEN JOB ELSE TO_CHAR(0) END AS MANAGER_SAL,CASE WHEN JOB='PRESIDENT' THEN JOB ELSE TO_CHAR(0) END AS PRESIDENT_SAL,CASE WHEN JOB='ANALYST' THEN JOB ELSE TO_CHAR(0) END AS ANALYST_SA,CASE WHEN JOB='SALESMAN' THEN JOB ELSE TO_CHAR(0) END AS SALESMAN_SAL,SALFROM EMP;</code></pre><h2 id="💢💢💢💢💢💢💢💢💢💢"><a href="#💢💢💢💢💢💢💢💢💢💢" class="headerlink" title="💢💢💢💢💢💢💢💢💢💢"></a>💢💢💢💢💢💢💢💢💢💢</h2>]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据第一阶段 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oracle第二天</title>
      <link href="2021/04/19/oracle-di-er-tian/"/>
      <url>2021/04/19/oracle-di-er-tian/</url>
      
        <content type="html"><![CDATA[<h1 id="2021-04-19-Oracle-第二天"><a href="#2021-04-19-Oracle-第二天" class="headerlink" title="2021/04/19  Oracle 第二天"></a>2021/04/19  Oracle 第二天</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天上午主要涉及的内容是日期转换函数TO_DATE,字符转换函数TO_CHAR,</p><p>模糊查询ESCAPE转义字符，包含查询IN 和 NOT IN ,范围查询BETWEEN,</p><p>条件查询IS NULL 和 IS NOT NULL,条件查询ANY和ALL，布尔链接AND和</p><p>OR。</p><h3 id="函数扩展"><a href="#函数扩展" class="headerlink" title="函数扩展"></a>函数扩展</h3><ol><li>字符串转日期：将内容为日期的字符型数据转换为日期型数据<ul><li>格式：TO_DATE(‘字符串’,’与字符串对应的日期格式’)</li></ul></li><li>日期转字符串：将内容为日期型数据转换为字符串数据<ul><li> 格式：TO_CHAR(‘日期’,’日期转成字符串的目标格式‘)</li></ul></li></ol><h4 id="日期型：常用的三种格式"><a href="#日期型：常用的三种格式" class="headerlink" title="日期型：常用的三种格式"></a>日期型：常用的三种格式</h4><pre class=" language-shell"><code class="language-shell">YYYY/MM/DDYYYY-MM-DDYYYYMMDD</code></pre><p>注：使用TO_CHAR( , )、TO_DATE(  ,  )输出结果作为条件时，注意输出结果格式与条件格式是否一致。</p><p>比大小：字符型’2019-05-07’ &lt; 字符型’2020-05-07’</p><p>比大小：日期型2019-05-07 &lt; 日期型2020-05-07</p><h4 id="例：查询1981年劳动节以前入职的员工信息"><a href="#例：查询1981年劳动节以前入职的员工信息" class="headerlink" title="例：查询1981年劳动节以前入职的员工信息"></a>例：查询1981年劳动节以前入职的员工信息</h4><p>以字符比较：</p><pre class=" language-shell"><code class="language-shell"></code></pre><p>以日期比较：</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM EMP HIREDATE < TO_DATE('1981/05/01','YYYY/MM/DD');</code></pre><p>1.查询1980/05/12 入职的员工信息</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM EMP WHERE HIREDATE = TO_DATE('1981/05/01','YYYY/MM/DD');</code></pre><p>2.查询在1980/05/12之前入职的员工信息</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM EMP WHERE HIREDATE < TO_DATE('1981/05/12','YYYY/MM/DD');</code></pre><p>3.查询在1980/05/12之后入职的员工信息</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM EMP WHERE HIREDATE > TO_DATE('1980/05/12','YYYY/MM/DD');</code></pre><p>4.查询1981年2月20号入职的员工的姓名和薪资</p><pre class=" language-shell"><code class="language-shell">SELECT ENAME,SAL FROM EMP WHERE HIREDATE = TO_DATE('19810220','YYYYMMDD');</code></pre><p>5.查询入职日期早于1982年1月1日的所有员工的姓名、入职日期</p><pre class=" language-shell"><code class="language-shell">SELECT ENAME,HIREDATE FROM EMP WHERE HIREDATE < TO_DATE('19820101','YYYYMMDD');</code></pre><h2 id="条件查询-模糊查询"><a href="#条件查询-模糊查询" class="headerlink" title="条件查询-模糊查询"></a>条件查询-模糊查询</h2><p>拓展：</p><ol><li>模糊查询中的转义字符设置：ESCAPE ‘转义字符’</li></ol><ul><li>（注意：只有%和_需要转义）</li></ul><ol start="2"><li>两个英文单引号表达一个英文单引号的含义除了%、 _ 、‘ 之外，其他符号直接</li></ol><ul><li>写即可表达其原本含义</li></ul><p>注：转义字符一次只能转义一个字符</p><pre class=" language-shell"><code class="language-shell">Select * from EMP FOR UPDATE;-- 执行以上语句可以使表能够解锁，进入编辑状态-- 编辑后，点击对勾确认—上锁—提交或回滚</code></pre><p>1.查找姓名以S开头的员工信息</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM EMP WHERE ENAME LIKE 'S%';</code></pre><p>2.查找姓名前边是SM、后边是TH、中间有一位不确定的员工信息</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM EMP WHERE ENAME LIKE 'SM_TH';</code></pre><p>3.查找姓名总共有五位的员工信息</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM EMP WHERE ENAME LIKE '_____';</code></pre><p>4.查找姓名前边是S、后边是H、中间有三位不确定的员工信息</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM EMP WHERE ENAME LIKE 'S___H';</code></pre><p>5.查找姓名前边是SMIT、最后一位不确定的员工信息</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM EMP WHERE ENAME LIKE 'SMIT_';</code></pre><p>6.查找姓名不以S开头的员工信息</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM EMP WHERE ENAME NOT LIKE 'S%';</code></pre><p>7.查找名字中带有A字母的员工信息</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM EMP WHERE ENAME LIKE '%A%';</code></pre><p>8.查找姓名总共有5位且首字母是A的员工信息</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM EMP WHERE ENAME LIKE 'A____';</code></pre><p>9.查找姓名是以A开头且倒数第二位是M的员工信息</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM EMP WHERE ENAME LIKE 'A%M_';</code></pre><p>10.查找姓名中含有=的员工</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM EMP WHERE ENAME LIKE '%=%';</code></pre><p>11.查找姓名中含有%的员工</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM EMP WHERE ENAME LIKE '%^%%' ESCAPE '^';</code></pre><p>12.查找姓名中含有_的员工</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM EMP WHERE ENAME LIKE '%^_%' ESCAPE '^';</code></pre><p>13.查找姓名中含有单引号的员工</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM EMP WHERE ENAME LIKE '%''%';</code></pre><p>14.查找姓名中含有两个单引号的员工</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM EMP WHERE ENAME LIKE '%''%''%';</code></pre><p>15.查找姓名中含有双引号的员工</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM EMP WHERE ENAME LIKE '%""%';</code></pre><p>16.查找姓名中含有两个百分号的员工</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM EMP WHERE ENAME LIKE '%^%%^%' ESCAPE '^';</code></pre><p>17.查找姓名中含有两个相连百分号的员工</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM EMP WHERE ENAME LIKE '%^%^%%' ESCAPE '^';</code></pre><p>18.查找emp表中ename列同时有%和_的数据;</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM EMP WHERE ENAME LIKE '%^%^_%' ESCAPE '^' OR ENAME LIKE '%^%%^_%'SELECT * FROM EMP WHERE ENAME LIKE'%^_%^%%' ESCAPE '^' OR ENAME LIKE'%^%%^_%' ESCAPE '^';</code></pre><p>19.查找emp表中ename列同时有%和_,且挨在一起的数据;</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM EMP WHERE ENAME LIKE'%^_^%%' ESCAPE '^' OR ENAME LIKE'%^%^_%' ESCAPE '^';</code></pre><p>20.查找emp表中ename列同时有%和_,且不挨在一起的数据;</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM EMP WHERE ENAME LIKE'%^__%^%%' ESCAPE '^' OR ENAME LIKE'%^%_%^_%' ESCAPE '^';</code></pre><h2 id="条件查询-包含查询"><a href="#条件查询-包含查询" class="headerlink" title="条件查询-包含查询"></a>条件查询-包含查询</h2><ul><li>IN</li><li>NOT IN</li></ul><p>语法：</p><pre class=" language-shell"><code class="language-shell">SELECT COL_LIST FROM TB_NAME WHERE COL_NAME IN (集合); --只要在该集合中即条件成立SELECT COL_LIST FROM TB_NAME WHERE COL_NAME NOT IN (集合); --只要不在该集合中即条件成立</code></pre><p>集合：一组有着相同属性(相同数据类型)的数据集合中数据的个数&gt;=1</p><hr><h3 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h3><p>1.查询部门编号是10号或20号的员工信息；</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM EMP WHERE DEPTNO=10 OR DEPTNO =20;SELECT * FROM EMP WHERE DEPTNO IN(10,20);</code></pre><p>1.1查询不在10号或20号部门的员工信息</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM EMP WHERE DEPTNO NOT IN(10,20);</code></pre><p>2.查询薪资是3000或5000的员工信息</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM EMP WHERE SAL = 3000 OR SAL = 5000;SELECT * FROM EMP WHERE SAL IN(3000,5000);</code></pre><p>3.查询岗位是SALESMAN或者MANAGER的员工信息</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM EMP WHERE JOB = 'SALESMAN' OR JOB = 'MANAGER';SELECT * FROM EMP WHERE JOB IN('SALESMAN','MANAGER');</code></pre><p>4.查询岗位既不是SALESMAN也不是MANAGER的员工信息</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM EMP WHERE JOB != 'SALESMAN' AND JOB != 'MANAGER'; SELECT * FROM EMP WHERE JOB NOT IN('SALESMAN','MANAGER');</code></pre><p>5.查询入职时间是1980年12月17号或者1981年2月20号的员工信息（使用两种方式查询）</p><pre class=" language-shell"><code class="language-shell"></code></pre><p>6.求在NEW YORK和 CHICAGO、 DALLAS工作的部门信息</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM DEPT;SELECT * FROM DEPT WHERE LOC IN('NEW YORK','CHICAGO','DALLAS');</code></pre><p>7.查询上级编号7902、7698的员工信息</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM EMP WHERE EMPNO IN(7902,7698);</code></pre><p>8.员工工资不是 800和1600的员工信息</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM EMP WHERE SAL NOT IN(800,1600);</code></pre><h2 id="条件查询-NULL值判断"><a href="#条件查询-NULL值判断" class="headerlink" title="条件查询-NULL值判断"></a>条件查询-NULL值判断</h2><p>语法：</p><pre class=" language-shell"><code class="language-shell">SELECT COL_LIST FROM TB_NAME WHERE COL_NAME IS NULL ; --空值SELECT COL_LIST FROM TB_NAME WHERE COL_NAME IS NOT NULL ; --非空值</code></pre><p>练习题：</p><p>1.查找有奖金资格的员工信息</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM EMP WHERE COMM IS NOT NULL;</code></pre><p>2.查找无奖金资格的员工信息</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM EMP WHERE COMM IS NULL;</code></pre><p>3.查找公司的最大领导信息</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM EMP WHERE MGR IS NULL;</code></pre><h2 id="条件查询-布尔连接"><a href="#条件查询-布尔连接" class="headerlink" title="条件查询-布尔连接"></a>条件查询-布尔连接</h2><p>语法：</p><pre class=" language-shell"><code class="language-shell">SELECT COL_NAME FROM TB_NAME WHERE CONDITION1 AND CONDITION2;SELECT COL_NAME FROM TB_NAME WHERE CONDITION1 OR CONDITION2;</code></pre><p>条件连接关键词：AND 且、  OR 或 </p><p>注意：</p><ol><li>通过布尔连接，可以合并相同字段的条件，也可合并不同字段的条件</li><li>优先级: NOT&gt;AND&gt;OR</li><li>如果有小括号 先考虑括号中的条件</li></ol><p>例题：</p><p>1.查询30号部门下岗位为SALESMAN的员工</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM EMP WHERE JOB = 'SALESMAN';</code></pre><p>2.查询30号部门薪资超过1500的员工</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM EMP WHERE DEPTNO = 30 AND SAL > 1500;</code></pre><p>3.查询姓名是以S开头的、薪资超过2000的员工</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM EMP WHERE ENAME LIKE'S%' AND SAL > 2000;</code></pre><p>4.查询姓名是以A开头的、薪资在1000到1500之间的员工</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM EMP WHERE ENAME LIKE'A%' AND SAL BETWEEN 1000 AND 1500;</code></pre><p>5.查询薪资在1000-3000之间，并且部门编号是10或者20</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM EMP WHERE SAL BETWEEN 1000 AND 3000 AND (DEPTNO = 10 OR DEPTNO = 20);-- ERRORSELECT * FROM EMP WHERE SAL BETWEEN 1000 AND 3000 AND DEPTNO = 10 OR DEPTNO = 20;</code></pre><p>6.查询部门编号是30的，或者岗位为CLERK的员工</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM EMP WHERE DEPTNO = 30 OR JOB = 'CLERK';</code></pre><p>7.查询工资在1100到1800之间，并且佣金小于工资的员工信息</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM EMP WHERE SAL BETWEEN 1100 AND 1800 AND COMM < SAL;</code></pre><p>8.查询岗位名称中含S，并且员工姓名有A，工资在800到3000之间 ，部门在20、30中</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM EMP WHERE JOB LIKE'%S%' AND ENAME LIKE'%A%' AND SAL BETWEEN 800 AND 3000 AND DEPTNO IN(20,30);</code></pre><p>9.查询员工编号是7654 或者 薪资在1000到3000之间 </p><pre class=" language-shell"><code class="language-shell">SELECT * FROM EMP WHERE EMPNO = 7654 OR SAL BETWEEN 1000 AND 3000;</code></pre><p>9.查询（部门编号是20并且工作岗位是CLERK的员工） ,或者薪资大于3000的员工</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM EMP WHERE DEPTNO = 20 AND JOB = 'CLERK' OR SAL > 3000;</code></pre><h2 id="练习题-1"><a href="#练习题-1" class="headerlink" title="练习题"></a>练习题</h2><p>1.查询薪资超过1000并且小于3000的员工信息（3种）</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM EMP WHERE SAL > 1000 AND SAL < 3000;SELECT * FROM EMP WHERE SAL BETWEEN 1000 AND 3000;SELECT * FROM EMP WHERE NOT (SAL<=1000 OR SAL>=3000);</code></pre><p>2.查询部门编号是10号或20号的员工信息（2种）</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM EMP WHERE DEPTNO = 10 OR DEPTNO = 20;SELECT * FROM EMP WHERE DEPTNO IN(10,20);SELECT * FROM EMP WHERE DEPTNO = ANY(10,20);</code></pre><p>3.查询岗位是销售SALESMAN，并且奖金超过400的员工信息</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM EMP WHERE JOB = 'SALESMAN' AND COMM > 400;</code></pre><p>4.查询20号部门的经理</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM EMP WHERE DEPTNO = 20 AND JOB = 'MANAGER';</code></pre><p>5.查询所有20号部门的员工或岗位是MANAGER的员工信息</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM EMP WHERE DEPTNO = 20 OR JOB = 'MANAGER';</code></pre><p>6.查询10号部门的部门经理或20号部门的分析师ANALYST</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM EMP WHERE DEPTNO = 10 AND JOB = 'MANAGER' OR DEPTNO = 20 AND JOB = 'ANALYST';SELECT * FROM EMP WHERE JOB='MANAGER' AND DEPTNO=10 OR DEPTNO=20 AND JOB='ANALYST';</code></pre><p>7.查询10号部门的员工、30号部门的经理及所有的分析师ANALYST</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM EMP WHERE DEPTNO = 10 OR DEPTNO = 30 AND JOB = 'MANAGER' OR JOB = 'ANALYST';SELECT * FROM EMP WHERE DEPTNO = 10 OR DEPTNO = 30 AND JOB = 'MANAGER' OR JOB = 'ANALYST';</code></pre><p>8.统计姓名以K开头不以A结尾且是（10或者20号部门)的员工的员工信息</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM EMP WHERE ENAME LIKE'K%' AND ENAME NOT LIKE'%A' AND (DEPTNO = 10 OR DEPTNO = 20);SELECT * FROM EMP WHERE ENAME LIKE'K%' AND ENAME NOT LIKE'%A' AND DEPTNO IN(10,20);</code></pre><p>9.求30号部门日薪过百、20部门日薪不过千、30号部门日薪过千的员工信息</p><pre class=" language-shell"><code class="language-shell">select *  FROM EMP WHERE DEPTNO = 30 AND SAL / 21.75 > 100    OR DEPTNO = 20 AND SAL / 21.75 < 1000    OR DEPTNO = 30 AND SAL / 21.75 > 1000;</code></pre><p>10.查询薪资在1000和2000之间且部门编号是(10,20)的EMPNO,ENAME,SAL,JOB 列信息</p><pre class=" language-shell"><code class="language-shell">SELECT EMPNO,ENAME,SAL,JOB FROM EMP WHERE SAL BETWEEN 1000 AND 2000 AND DEPTNO IN(10,20);</code></pre><p>11.查询(20部门中工作是CLERK或者MANAGER),或者(30号部门中工作是MANAGER或者CLERK)的员工的EMPNO,ENAME,JOB,SAL,DEPTNO列信息</p><pre class=" language-shell"><code class="language-shell">SELECT EMPNO,ENAME,JOB,SAL,DEPTNO FROM EMP WHERE (DEPTNO,JOB) IN((20,'CLERK'),(20,'MANAGER'),(30,'MANAGER'),(30,'CLERK'));</code></pre><p>12.求在NEW YORK和 CHICAGO、 DALLAS工作的部门信息，要求其部门编号大于10</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM dept WHERE LOC IN('NEW YORK','CHICAGO','DALLAS') AND DEPTNO > 10;</code></pre><p>13.查询部门编号和工作为(10,MANAGER),(20,CLERK),(30,SALESMAN)或者 姓名和薪资为(SMITH,800),(ALLEN,1600),(JONES,2975)<br>  的员工的EMPNO,ENAME,SAL,JOB列信息，要求其工资大于在1000和3000之间</p><pre class=" language-shell"><code class="language-shell">SELECT EMPNO,ENAME,SAL,JOB FROM EMP WHERE ((DEPTNO,JOB) IN((10,'MANAGER'),(20,'CLERK'),(30,'SALESMAN')) OR (ENAME,SAL) IN(('SMITH',800),('ALLEN',1600),('JONES',2975))) AND SAL BETWEEN 1000 AND 3000 AND SAL NOT IN(1000,3000);</code></pre>]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据第一阶段 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oracle第一天</title>
      <link href="2021/04/18/di-yi-tian/"/>
      <url>2021/04/18/di-yi-tian/</url>
      
        <content type="html"><![CDATA[<h2 id="2021-4-16-第一堂课"><a href="#2021-4-16-第一堂课" class="headerlink" title="2021/4/16 第一堂课"></a>2021/4/16 第一堂课</h2><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>2021年4月16日，开始了培训的第一天学习，主要涉及简单查询和一部分函数，与MySQL中的语法和函数大致相同，以此记录</p><h3 id="简单语法查询"><a href="#简单语法查询" class="headerlink" title="简单语法查询"></a>简单语法查询</h3><pre class=" language-shell"><code class="language-shell">SELECT * FROM EMP;  --查询EPM表中的所有数据# SELECT FROM 都是关键字</code></pre><h3 id="日期函数使用"><a href="#日期函数使用" class="headerlink" title="日期函数使用"></a>日期函数使用</h3><pre class=" language-shell"><code class="language-shell">SELECT ENAME,JOB,SAL,sysdate FROM EMP;# sysdate:日期函数，使用此函数就可以获取当前系统时间</code></pre><h2 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h2><p>1.分别查询EMP,DEPT,SALGRADE 表中信息（使用两种方法）</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM EMP;SELECT EMPNO,ENAME,JOB,MGR,SAL,HIREDATE,COMM,DEPTNO FROM EMP;</code></pre><p>2.查看员工信息表EMP中员工的部分信息，例如姓名、岗位和薪资，或员工编号、姓名和部门编号</p><pre class=" language-shell"><code class="language-shell">SELECT ENAME,JOB,MGR,SAL FROM EMP;</code></pre><p>3.查看员工信息表EMP中员工的姓名，并在姓名列前加一列常量，内容是：“员工姓名”这几个字</p><pre class=" language-shell"><code class="language-shell">SELECT '员工姓名', ENAME FROM EMP;</code></pre><p>4.查看员工信息表EMP中员工的姓名、部门编号、岗位、薪资和日薪</p><pre class=" language-shell"><code class="language-shell">SELECT ENAME,DEPTNO,MGR,SAL,SAL/21.75 FROM EMP;SELECT ENAME,DEPTNO,MGR,SAL,ROUND(SAL/21.75,2) AS 日薪 FROM EMP;</code></pre><h3 id="AS函数：用于取别名，作为…"><a href="#AS函数：用于取别名，作为…" class="headerlink" title="AS函数：用于取别名，作为…"></a>AS函数：用于取别名，作为…</h3><p>例如：</p><pre class=" language-shell"><code class="language-shell">SELECT ENAME AS 姓名 FROM EMP;  --别名中最好不要出现英文</code></pre><h3 id="连接符"><a href="#连接符" class="headerlink" title="连接符 ||"></a>连接符 ||</h3><h4 id="将两个或多个字段与字段、字段与常量连接在一起合成一个字段"><a href="#将两个或多个字段与字段、字段与常量连接在一起合成一个字段" class="headerlink" title="将两个或多个字段与字段、字段与常量连接在一起合成一个字段"></a>将两个或多个字段与字段、字段与常量连接在一起合成一个字段</h4><p>习题：查询员工信息，结果以：员工：xxx的工作岗位是：yyy，每月薪资：zzz 的格式显示</p><pre class=" language-shell"><code class="language-shell">SELECT '员工' ||ENAME || '的工作岗位是：' || MGR || '，每月薪资' || SAL FROM EMP;</code></pre><h2 id="练习题-1"><a href="#练习题-1" class="headerlink" title="练习题"></a>练习题</h2><p>5.用“员工姓名”代替ENAME，用“工作岗位”代替JOB</p><pre class=" language-shell"><code class="language-shell">SELECT ENAME AS 员工姓名,JOB AS 工作岗位 FROM EMP;</code></pre><p>6.用T代替EMP表，查看EMP表中的ENAME和JOB字段</p><pre class=" language-shell"><code class="language-shell">SELECT T.ENAME,T.JOB FROM EMP T;</code></pre><p>7.同时使用列别名与表别名</p><pre class=" language-shell"><code class="language-shell">SELECT E.ENAME AS 姓名,E.JOB AS 工作岗位,E.SAL AS 薪资 FROM EMP E;</code></pre><p>8.对常量’员工姓名’命列别名“员工姓名”</p><pre class=" language-shell"><code class="language-shell">SELECT '员工姓名'  AS 员工姓名 FROM EMP;</code></pre><p>9.将ENAME和JOB字段合并在一起</p><pre class=" language-shell"><code class="language-shell">SELECT ENAME || ',' || JOB FROM EMP;</code></pre><p>10.将常量与表字段合并在一起</p><pre class=" language-shell"><code class="language-shell">SELECT '我的名字叫' || ENAME || ',' || '我的月薪为：' || SAL FROM EMP;</code></pre><h2 id="条件查询-where"><a href="#条件查询-where" class="headerlink" title="条件查询 where"></a>条件查询 where</h2><p>语法格式：</p><pre class=" language-shell"><code class="language-shell">SELECT COL_LIST FROM TB_NAME WHERE COL_NAME1 = VALUE|COL_NAME2|EXPR;</code></pre><p>逻辑运算符：= &gt; &lt; &gt;= &lt;=    &lt;&gt;    !=</p><p>SELECT子句影响列数，WHERE子句影响行数</p><pre class=" language-shell"><code class="language-shell">--非相关条件SELECT * FROM EMP WHERE 1=1; --恒成立SELECT * FROM EMP WHERE 1=0; --恒不成立</code></pre><h3 id="条件查询练习题"><a href="#条件查询练习题" class="headerlink" title="条件查询练习题"></a>条件查询练习题</h3><p>1.查询10号部门的员工信息</p><pre class=" language-shell"><code class="language-shell">SELECT * FRMO EMP WHERE DEPTNO = 10;</code></pre><p>2.薪资超过2500的员工信息</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM EMP WHERE SAL > 2500;</code></pre><p>3.查询薪资低于1000员工的部门、岗位及入职日期</p><pre class=" language-shell"><code class="language-shell">SELECT MGR,JOB,HIREDATE FROM EMP WHERE SAL < 1000;</code></pre><p>4.查询非销售人员的员工信息</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM EMP WHERE JOB != 'SALESMAN';</code></pre><p>从表EMP中查找工种是职员CLERK或经理MANAGER的雇员姓名、工资。</p><pre class=" language-shell"><code class="language-shell">SELECT ENAME,SAL FROM EMP WHERE JOB = 'CLERK' OR JOB = 'SALESMAN';</code></pre><p>5.查询员工SMITH的岗位、薪资</p><pre class=" language-shell"><code class="language-shell">SELECT JOB,SAL FROM EMP WHERE ENAME = 'SMITH';</code></pre><p>6.查询年薪过万的员工信息</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM EMP WHERE SAL*12 > 10000;</code></pre><p>7.查询日薪过150的员工信息</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM EMP WHERE SAL/21.75 >= 150;</code></pre><p>8.找出佣金高于薪金(comm)的雇员</p><pre class=" language-shell"><code class="language-shell">SELECT ENAME,COMM FROM EMP WHERE SAL < COMM;</code></pre><p>9、找出佣金高于薪金60%的雇员</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM EMP WHERE SAL > COMM*0.6;</code></pre><p>10.薪资超过1000</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM EMP WHERE SAL > 1000;</code></pre><p>.薪资不超过1000的员工</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM EMP WHERE SAL < 1000;</code></pre><p>11奖金超过1000</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM EMP WHERE COMM > 1000;</code></pre><p>奖金不超过1000的员工</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM EMP WHERE COMM < 1000;</code></pre><p>/<em>注意点：</em>/</p><p>空值不参与运算比较</p><p>数值型：单纯的数值上的比较判断</p><p>字符型：转换成ASCII码，通过ASCII码的数值来比较判断</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM EMP WHERE ENAME > 'SMITH';SELECT * FROM EMP WHERE ENAME < '2020/05/07';</code></pre><p>日期型：根据日期早晚进行比较判断</p><pre class=" language-shell"><code class="language-shell">SELECT * FROM EMP WHERE HIREDATE<'1987-05-23';</code></pre><h3 id="执行表中数据的更新操作"><a href="#执行表中数据的更新操作" class="headerlink" title="执行表中数据的更新操作"></a>执行表中数据的更新操作</h3><pre class=" language-shell"><code class="language-shell">SELECT * FROM EMP FOR UPDATE;select * FROM EMP WHERE ENAME='sMITH';</code></pre><h4 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h4><p>执行完操作语句后，需要使用commit来提交数据，如果不使用commit提交数据，</p><p>修改的数据无效，这里涉及到了数据库的事务问题，所谓事务就是操作要么全部不做，要么全部做完。</p><hr><h2 id="扩展模块"><a href="#扩展模块" class="headerlink" title="扩展模块"></a>扩展模块</h2><h3 id="函数拓展：DUAL表"><a href="#函数拓展：DUAL表" class="headerlink" title="函数拓展：DUAL表"></a>函数拓展：DUAL表</h3><pre class=" language-shell"><code class="language-shell">SELECT * FROM DUAL;SELECT 252454/8 FROM DUAL;</code></pre><h3 id="大小写转换函数：UPPER-和-LOWER-INITCAP"><a href="#大小写转换函数：UPPER-和-LOWER-INITCAP" class="headerlink" title="大小写转换函数：UPPER()和 LOWER() INITCAP()"></a>大小写转换函数：UPPER()和 LOWER() INITCAP()</h3><pre class=" language-shell"><code class="language-shell">SELECT UPPER('KKAs jhjK,MN'),LOWER('KKAs jhjK,MN'),INITCAP('KKAsjhjKMN') FROM DUAL;SELECT LOWER(ENAME) FROM EMP;SELECT emp.*,lower(ename) FROM EMP WHERE LOWER(ENAME)='smith';</code></pre><h3 id="ASCII码与字符转换：ASCII-和-CHR"><a href="#ASCII码与字符转换：ASCII-和-CHR" class="headerlink" title="ASCII码与字符转换：ASCII()和 CHR()"></a>ASCII码与字符转换：ASCII()和 CHR()</h3><pre class=" language-shell"><code class="language-shell">SELECT ASCII('A'),ASCII('a') from dual;select chr(97),CHR(65) FROM DUAL;SELECT  ASCII('你')  FROM   DUAL;SELECT CHR(15108241)||CHR(15173809)||CHR(14990752) FROM DUAL;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据第一阶段 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx特性学习</title>
      <link href="2021/02/05/nginx-te-xing/"/>
      <url>2021/02/05/nginx-te-xing/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是Nginx"><a href="#什么是Nginx" class="headerlink" title="什么是Nginx"></a>什么是Nginx</h1><p>Nginx 是高性能的 HTTP 和反向代理的服务器，处理高并发能力是十分强大的，能经受高负 载的考验,有报告表明能支持高达 50,000 个并发连接数。</p><h2 id="正向代理"><a href="#正向代理" class="headerlink" title="正向代理"></a>正向代理</h2><p>Nginx 不仅可以做反向代理，实现负载均衡。还能用作正向代理来进行上网等功能。 正向代理:如果把局域网外的</p><p>Internet 想象成一个巨大的资源库，则局域网中的客户端要访 问 Internet，则需要通过代理服务器来访问，这</p><p>种代理服务就称为正向代理。</p><p>简单来说就是：</p><p>需要在客户端配置代理服务器进行指定网站访问</p><p><img src="https://i.loli.net/2021/03/11/WJ6uq7rDCAMpekx.png" alt="正向代理.png"></p><h2 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h2><p>反向代理，其实客户端对代理是无感知的，因为客户端不需要任何配置就可以访问，我们只</p><p>需要将请求发送到反向代理服务器，由反向代理服务器去选择目标服务器获取数据后，在返</p><p>回给客户端，此时反向代理服务器和目标服务器对外就是一个服务器，暴露的是代理服务器</p><p>地址，隐藏了真实服务器 IP 地址。</p><p>一句话概括：</p><p>暴露的是代理服务器地址，隐藏了真实服务器 IP 地址。<br><img src="https://i.loli.net/2021/03/11/Fng7lfJVNeXux2R.png" alt="反向代理.png"></p><h2 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h2><p>单个服务器解决不了高并发的时候，我们可以增加服务器的数量，然后将请求分发到各个服务器上，</p><p>将原先请求集中到单个服务器上的情况改为将请求分发到多个服务器上，将负载分发到不同的服务器，</p><p>也就是我们所说的负载均衡。</p><p><img src="https://i.loli.net/2021/03/11/fZbtv4o1y2S7a3L.png" alt="负载均衡.png"></p><h2 id="动静分离"><a href="#动静分离" class="headerlink" title="动静分离"></a>动静分离</h2><p>为了加快网站的解析速度，可以把动态页面和静态页面由不同的服务器来解析，加快解析速</p><p>度。降低原来单个服务器的压力。</p><p><img src="https://i.loli.net/2021/03/11/lDeLbacS42Uzshx.png" alt="动静分离.png"></p>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx特性 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis踩坑</title>
      <link href="2021/01/24/redis-cai-keng/"/>
      <url>2021/01/24/redis-cai-keng/</url>
      
        <content type="html"><![CDATA[<p>修改redis下src文件夹的属性<br>chmod +x mkreleasehdr.sh</p><h1 id="安装中问题总结："><a href="#安装中问题总结：" class="headerlink" title="安装中问题总结："></a>安装中问题总结：</h1><ul><li><p>mac安装redis过程中编译测试时出现make: *** No rule to make target ‘test’. Stop.这是因为在解压tar.gz之后，应该先进入redis-5.0.3.tar这个目录里面，然后在编译测试。</p></li><li><p>mac redis 编译测试过程结果可能会出现</p><pre class=" language-shell"><code class="language-shell">Killing still running Redis server xxxxmake[1]: *** [test] Error 1make: *** [test] Error 2</code></pre></li></ul><h3 id="查看日志里面可能会出现这样一个异常："><a href="#查看日志里面可能会出现这样一个异常：" class="headerlink" title="查看日志里面可能会出现这样一个异常："></a>查看日志里面可能会出现这样一个异常：</h3><pre class=" language-shell"><code class="language-shell">[exception]: Executing test client: couldn't execute "src/redis-　　　　     benchmark": no such file or directory. couldn't execute "src/redis-benchmark": no such file or directory。</code></pre><ul><li>解决办法需执行以下命令：</li></ul><pre class=" language-shell"><code class="language-shell">sudo make distcleansudo makesudo make test</code></pre><p>启动redis</p><pre class=" language-shell"><code class="language-shell">cd /usr/locallscd redis-5.0.8ls启动redis./redis-server</code></pre>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis踩坑记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解Spring两大核心</title>
      <link href="2021/01/04/spring-liang-da-he-xin-gai-nian/"/>
      <url>2021/01/04/spring-liang-da-he-xin-gai-nian/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>说到Spring，就必须提到它的两大核心概念：IOC(控制反转)和AOP(面向切面编程)，这两点是我们必须要掌握的，下面就来详细说说Spring框架的这两大特性。</p><h2 id="IOC-控制反转"><a href="#IOC-控制反转" class="headerlink" title="IOC(控制反转)"></a>IOC(控制反转)</h2><pre class=" language-shell"><code class="language-shell">IOC，即控制反转（Inversion of Control），他与依赖注入（Dependecy Injection）是同一个概念。具体的讲：当某个角色需要另外一个角色协助的时候，在传统的程序设计过程中，通常由调用者来创建被调用者的实例。但在spring中 创建被调用者的工作不再由调用者来完成，因此称为控制反转。创建被调用者的工作由spring来完成，然后注入调用者因此也称为依赖注入。它并不是一种技术实现，而是一种设计思想。在任何一个有实际开发意义的程序项目中，我们会使用很多类来描述它们特有的功能，并且通过类与类之间的相互协作来完成特定的业务逻辑。这个时候，每个类都需要负责管理与自己有交互的类的引用和依赖，代码将会变的异常难以维护和极度的高耦合。而IOC的出现正是用来解决这个问题，我们通过IOC将这些相互依赖对象的创建、协调工作交给Spring容器去处理，每个对象只需要关注其自身的业务逻辑关系就可以了。在这样的角度上来看，获得依赖的对象的方式，进行了反转，变成了由spring容器控制对象如何获取外部资源（包括其他对象和文件资料等等）。</code></pre><h3 id="举例说明："><a href="#举例说明：" class="headerlink" title="举例说明："></a>举例说明：</h3><pre class=" language-shell"><code class="language-shell">某一天，你生病了，但是你不清楚自己到底得了什么病，你只知道自己头疼，咳嗽，全身无力。这个时候你决定去药店买药，药店有很多种药，仅仅是治疗头疼就有好几十种，还有西药中药等区别。然后你自己看了看说明书，选择了一盒你自己觉得最能治疗自己病症的药，付钱吃药，期待可以早点好起来。 但是这个过程，对于一个病人来说，太辛苦了。头疼，咳嗽，全身无力，还要一个个的看药品说明书，一个个的比较哪个药比较好，简直是太累了。这个时候，你决定直接去医院看医生。 医生给你做了检查，知道你的病症是什么，有什么原因引起的；同时医生非常了解有哪些药能治疗你的病痛，并且能根据你的自身情况进行筛选。只需要短短的十几分钟，你就能拿到对症下药的药品，即省时又省力。</code></pre><p>在上面这个例子中，IOC起到的就是医生的作用，它收集你的需求要求，并且对症下药，直接把药开给你。你就是对象，药品就是你所需要的外部资源。通过医生，你不用再去找药品，而是通过医生把药品开给你。这就是整个IOC的精髓所在。</p><ul><li><p>Spring以动态灵活的方式来管理对象 ， 注入的两种方式，设置注入和构造注入。</p></li><li><p>设置注入的优点：直观，自然</p></li><li><p>构造注入的优点：可以在构造器中决定依赖关系的顺序。</p></li></ul><hr><h2 id="AOP-面向切面编程"><a href="#AOP-面向切面编程" class="headerlink" title="AOP(面向切面编程)"></a>AOP(面向切面编程)</h2><pre class=" language-shell"><code class="language-shell">AOP：面向切面编程，往往被定义为促使软件系统实现关注点的分离的技术。系统是由许多不同的组件所组成的，每一个组件各负责一块特定功能。除了实现自身核心功能之外，这些组件还经常承担着额外的职责。例如日志、事务管理和安全这样的核心服务经常融入到自身具有核心业务逻辑的组件中去。这些系统服务经常被称为横切关注点，因为它们会跨越系统的多个组件。AOP的概念不像IOC一样实例化举例，现在我们以一个系统中的具体实现来讲讲AOP具体是个什么技术。</code></pre><p>举例说明：</p><pre class=" language-shell"><code class="language-shell">我们以系统中常用到的事务管控举例子。在系统操作数据库的过程中，不可避免地要考虑到事务相关的内容。如果在每一个方法中都新建一个事务管理器，那么无疑是对代码严重的耦合和侵入。为了简化我们的开发过程（实际上spring所做的一切实现都是为了简化开发过程），需要把事务相关的代码抽成出来做为一个独立的模块。通过AOP，确认每一个操作数据库方法为一个连接点，这些连接点组成了一个切面。当程序运行到其中某个一个切点时，我们将事务管理模块顺势织入对象中，通过通知功能，完成整个事务管控的实现。这样一来，所有的操作数据库的方法中不需要再单独关心事务管理的内容，只需要关注自身的业务代码的实现即可。所有的事务管控相关的内容都通过AOP的方式进行了实现。简化了代码的内容，将目标对象复杂的内容进行解耦，分离业务逻辑与横切关注点。</code></pre><h3 id="下面介绍一下AOP相关的术语："><a href="#下面介绍一下AOP相关的术语：" class="headerlink" title="下面介绍一下AOP相关的术语："></a>下面介绍一下AOP相关的术语：</h3><ol><li><p>通知： 通知定义了切面是什么以及何时使用的概念。Spring 切面可以应用5种类型的通知：</p><pre class=" language-shell"><code class="language-shell">前置通知（Before）：在目标方法被调用之前调用通知功能。后置通知（After）：在目标方法完成之后调用通知，此时不会关心方法的输出是什么。返回通知（After-returning）：在目标方法成功执行之后调用通知。异常通知（After-throwing）：在目标方法抛出异常后调用通知。环绕通知（Around）：通知包裹了被通知的方法，在被通知的方法调用之前和调用之后执行自定义的行为。</code></pre></li><li><p>连接点：是在应用执行过程中能够插入切面的一个点。</p></li><li><p>切点： 切点定义了切面在何处要织入的一个或者多个连接点。</p></li><li><p>切面：是通知和切点的结合。通知和切点共同定义了切面的全部内容。</p></li><li><p>引入：引入允许我们向现有类添加新方法或属性。</p></li><li><p>织入：是把切面应用到目标对象，并创建新的代理对象的过程。切面在指定的连接点被织入到目标对象中。在目标对象的生命周期中有多个点可以进行织入：</p></li></ol><pre class=" language-shell"><code class="language-shell">    编译期： 在目标类编译时，切面被织入。这种方式需要特殊的编译器。AspectJ的织入编译器就是以这种方式织入切面的。    类加载期：切面在目标加载到JVM时被织入。这种方式需要特殊的类加载器(class loader)它可以在目标类被引入应用之前增强该目标类的字节码。    运行期： 切面在应用运行到某个时刻时被织入。一般情况下，在织入切面时，AOP容器会为目标对象动态地创建一个代理对象。SpringAOP就是以这种方式织入切面的。</code></pre><p>面向切面编程（AOP）完善spring的依赖注入（DI），面向切面编程在spring中主要表现为两个方面：</p><ul><li>面向切面编程提供声明式事务管理</li><li>spring支持用户自定义的切面</li><li>面向切面编程（aop）是对面向对象编程（oop）的补充， 面向对象编程将程序分解成各个层次的对象，面向切面编程将程序运行过程分解成各个切面。</li></ul><p>AOP从程序运行角度考虑程序的结构，提取业务处理过程的切面，oop是静态的抽象，aop是动态的抽象， 是对应用执行过程中的步骤进行抽象，，从而获得步骤之间的逻辑划分。</p><p>AOP框架具有的两个特征：</p><ul><li>各个步骤之间的良好隔离性</li><li>源代码无关性</li></ul><hr><p>参考：<a href="https://www.jianshu.com/p/7a1c0bad2708">https://www.jianshu.com/p/7a1c0bad2708</a></p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring核心概念 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java四大特性</title>
      <link href="2020/12/28/java-si-da-te-xing/"/>
      <url>2020/12/28/java-si-da-te-xing/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Java做为一门“全面”面向对象的编程语言，提供了面向对象的四种基本性质：抽象性、封装性、继承性和多态性。面向对象主要有四大特性：封装、抽象、继承和多态。</p><h2 id="1-抽象"><a href="#1-抽象" class="headerlink" title="1. 抽象"></a>1. 抽象</h2><ul><li><p>抽象就是将一类实体的共同特性抽象出来，封装在一个新的概念(类) 中，所以抽象是面向对象语言的基础。比如鸟就是一个对象，但是我们在研究这个对象的时候把它的一些同类放到一起，一起来考虑，而且抽象的时候，只考虑我们感兴趣的一些数据；假设你自己是一个普通人，那么你可能关心的数据是，鸟类飞行的方法，鸟类吃东西的方法;假设你自己是一个生物专家，那么你可能关心的数据时，鸟类的体重，鸟类的爪子的大小，鸟类的食量等等。</p></li><li><p>我们可以通过抽象处理复杂性。例如，人们不会把一辆汽车想象成由几万个互相独立的部分所组成的一套装置，而是把汽车想成一个具有自己独特行为的对象。这种抽象使人们可以很容易地将一辆汽车开到杂货店，而不会因组成汽车各部分零件过于复杂而不知所措。他们可以忽略引擎、传动及刹车系统的工作细节，将汽车作为一个整体来加以利用。</p></li></ul><hr><h2 id="2-封装"><a href="#2-封装" class="headerlink" title="2. 封装"></a>2. 封装</h2><ul><li>在面向对象语言中，封装特性是由类来体现的。我们将现实生活中的一类实体定义成类，其中包括属性和行为（在Java中就是方法），就好像人类，可以具有name，gender，age等属性，同时也具有eat()，sleep()，我们在行为中实现一定的功能，也可操作属性，这是面向对象的封装特性；</li><li>封装是将代码及其处理的数据绑定在一起的一种编程机制，该机制保证了程序和数据都不受外部干扰且不被误用。可以理解为把它想成一个黑匣子，它可以阻止在外部定义的代码随意访问内部代码和数据。对黑匣子内代码和数据的访问通过一个适当定义的接口严格控制。</li></ul><h3 id="封装的步骤："><a href="#封装的步骤：" class="headerlink" title="封装的步骤："></a>封装的步骤：</h3><pre class=" language-shell"><code class="language-shell">  1.修改属性的可见性来限制对属性的访问  2、为每个属性创建赋值和取值的方法，用于对这些属性的访问  3、在赋值和取值的方法中，加入对属性的存储限制</code></pre><h3 id="封装的好处："><a href="#封装的好处：" class="headerlink" title="封装的好处："></a>封装的好处：</h3><pre class=" language-shell"><code class="language-shell">  1、实现了专业的分工  2、类内部的结构能够自由修改  3、能够对成员进行更精确的控制  4、隐藏信息，实现细节  5、良好的封装能够减少耦合</code></pre><h2 id="3-继承"><a href="#3-继承" class="headerlink" title="3. 继承"></a>3. 继承</h2><ul><li>继承就像是我们现实生活中的父子关系，儿子可以遗传父亲的一些特性，在面向对象语言中，就是一个类可以继承另一个类的一些特性，从而可以代码重用，其实继承体现的是is-a关系，父类和子类在本质上还是一类实体。</li><li>继承是一个对象获得另一个对象的属性的过程。继承很重要，因为它支持了按层分类的概念。比如：藏獒是狗类的一部分，狗类又是哺乳动物的一部分，哺乳动物又是动物类的一部分。如果不使用层级的概念，我们就不得不分别定义每个动物的所有属性。而使用了继承，一个对象就只需要定义是它在所属类中独一无二的属性即可，因为它可以从它的父类那儿继承所有的通用属性。可以这样说，正是继承机制使一个对象成为一个更具通用类的一个特定实例成为可能。</li></ul><h3 id="继承的特征："><a href="#继承的特征：" class="headerlink" title="继承的特征："></a>继承的特征：</h3><pre class=" language-shell"><code class="language-shell">  1、可传递可扩展。若类C继承类B，类B继承类A（多继承），则类C既有从类B那里继承下来的属性与方法，也有从类A那里继承下来的属性与方法，还可以有自己新定义的属性和方法。继承来的属性和方法尽管是隐式的，但仍是类C的属性和方法。  2、可复用。若类B继承类A，那么建立类B时只需要再描述与基类(类A)不同的少量特征(数据成员和成员方法)即可。这种做法能减小代码和数据的冗余度，大大增加程序的重用性。  3、可维护性。继承通过增强一致性来减少模块间的接口和界面，大大增加了程序的易维护性。</code></pre><h2 id="4-多态"><a href="#4-多态" class="headerlink" title="4. 多态"></a>4. 多态</h2><ul><li><p>多态是允许一个接口被多个同类动作使用的特性，具体使用哪个动作与应用场合有关。多态就是通过传递给父类对象引用不同的子类对象从而表现出不同的行为，多态可为程序提供更好的可扩展性，同样也可以代码重用。</p></li><li><p>要理解多态性，首先要知道什么是“向上转型”。</p></li><li><p>举例：</p><pre class=" language-shell"><code class="language-shell">我定义了一个子类Dog，它继承了Animal类，那么后者就是前者的父类。可以通过：  Dog d = new Dog();  例化一个Dog对象。  但当我这样定义时： Animal a = new Dog();</code></pre></li><li><p>它表示我定义了一个Animal类型的引用，指向新建的Dog类型的对象。由于Dog是继承自它的父类Animal，所以Animal类型的引用是可以指向Dog类型的对象的。那么这样做有什么意义呢？因为子类是对父类的一个改进和扩充，所以一般子类在功能上较父类更强大，属性较父类更独特，定义一个父类类型的引用指向一个子类的对象既可以使用子类强大的功能，又可以抽取父类的共性。所以， 父类引用只能调用父类中存在的方法和属性，不能调用子类的扩展部分；因为父类引用指向的是堆中子类对象继承的父类；（但是如果强制把超类转换成子类的话，就可以调用子类中新添加而超类没有的方法了。）</p></li><li><p>同时，父类中的一个方法只有在父类中定义而在子类中没有重写的情况下，才可以被父类类型的引用调用；</p></li><li><p>对于父类中定义的方法，如果子类中重写了该方法，那么父类类型的引用将会调用子类中的这个方法，这就是动态连接。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java理论知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>好玩儿的Spring Boot自动配置原理</title>
      <link href="2020/12/09/sping-boot-zi-dong-pei-zhi/"/>
      <url>2020/12/09/sping-boot-zi-dong-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Spring Boot是当下非常流行的分布式框架，自从学习了Spring Boot后只做了一个项目，没有进行总结，今天闲来无事，来总结一下Spring Boot的自动配置原理吧</p><h2 id="Spring-Boot自动配置原理"><a href="#Spring-Boot自动配置原理" class="headerlink" title="Spring Boot自动配置原理"></a>Spring Boot自动配置原理</h2><p>想知道Spring Boot的自动配置原理，就必须了解 @SpringBootApplication 注解，其源码如下图：</p><p><img src="https://i.loli.net/2021/03/06/yO6WSLxHDPewh5N.png" alt="import.png"></p><p>看得很清楚，其是一个合成体，但其中最重要的三个注解分别是：</p><ul><li><p>@SpringBootConfiguration （组合了 @Configuration 注解，实现配置文件的功能）</p></li><li><p>@EnableAutoConfiguration （打开自动配置的功能，也可以关闭某个自动配置的选项）</p></li><li><p>@ComponentScan       （Spring 组件扫描）</p><p>如果需要关闭某个配置，只需要：</p></li></ul><pre class=" language-shell"><code class="language-shell">@SpringBootApplication(exclude ={ DataSourceAutoConfiguration.class })</code></pre><p>这个@EnableAutoConfiguration注解通过@SpringBootApplication被间接的标记在了Spring Boot的启动类上。在SpringApplication.run( )的内部就会执行selectImports()方法，找到所有JavaConfig自动配置类的全限定名对应的class，然后将所有自动配置类加载到Spring容器中。</p><p>如果不怕麻烦，在 SpringBoot 应用的启动类上用这个三个注解代替@SpringBootApplication 注解发现也是没问题.</p><hr><h1 id="工作原理剖析"><a href="#工作原理剖析" class="headerlink" title="工作原理剖析"></a>工作原理剖析</h1><p>Spring Boot关于自动配置的源码在spring-boot-autoconfigure-x.x.x.x.jar中：</p><p><img src="https://i.loli.net/2021/03/06/bF6e39CMDKuomBL.png" alt="MATA-INF.png"></p><p>而这个注解也是一个派生注解，其中的关键功能由@Import提供，其导入的AutoConfigurationImportSelector的selectImports()方法通过SpringFactoriesLoader.loadFactoryNames()扫描所有具有META-INF/spring.factories的jar包。spring-boot-autoconfigure-x.x.x.x.jar里就有一个这样的spring.factories文件。</p><hr><h1 id="自动配置生效"><a href="#自动配置生效" class="headerlink" title="自动配置生效"></a>自动配置生效</h1><p>每一个XxxxAutoConfiguration自动配置类都是在某些条件之下才会生效的，这些条件的限制在Spring Boot中以注解的形式体现，常见的条件注解有如下几项：</p><pre class=" language-shell"><code class="language-shell">@ConditionalOnBean：当容器里有指定的bean的条件下。@ConditionalOnMissingBean：当容器里不存在指定bean的条件下。@ConditionalOnClass：当类路径下有指定类的条件下。@ConditionalOnMissingClass：当类路径下不存在指定类的条件下。@ConditionalOnProperty：指定的属性是否有指定的值，比如@ConditionalOnProperties(prefix=”xxx.xxx”, value=”enable”, matchIfMissing=true)，代表当xxx.xxx为enable时条件的布尔值为true，如果没有设置的情况下也为true。</code></pre><p>以ServletWebServerFactoryAutoConfiguration配置类为例，解释一下全局配置文件中的属性如何生效，比如：server.port=8081，是如何生效的（当然不配置也会有默认值，这个默认值来自于org.apache.catalina.startup.Tomcat）。</p><p><img src="https://i.loli.net/2021/03/06/rF48w5pyoxCIdtO.png" alt="SpringBootApplication.png"></p><p>至此，我们大致可以了解。在全局配置的属性如：server.port等，通过@ConfigurationProperties注解，绑定到对应的XxxxProperties配置实体类上封装为一个bean，然后再通过@EnableConfigurationProperties注解导入到Spring容器中。</p><p>而诸多的XxxxAutoConfiguration自动配置类，就是Spring容器的JavaConfig形式，作用就是为Spring 容器导入bean，而所有导入的bean所需要的属性都通过xxxxProperties的bean来获得。</p><h1 id="总结来说："><a href="#总结来说：" class="headerlink" title="总结来说："></a>总结来说：</h1><p> Spring Boot启动的时候会通过@EnableAutoConfiguration注解找到META-INF/spring.factories配置文件中的所有自动配置类，并对其进行加载，而这些自动配置类都是以AutoConfiguration结尾来命名的，它实际上就是一个JavaConfig形式的Spring容器配置类，它能通过以Properties结尾命名的类中取得在全局配置文件中配置的属性如：server.port，而XxxxProperties类是通过@ConfigurationProperties注解与全局配置文件中对应的属性进行绑定的。</p><hr><p>综上所述，可以通过一张图来解释：</p><p><img src="https://i.loli.net/2021/03/06/VNIf5QyeAz3m7La.png" alt="how-spring-boot-autoconfigure-works.png"></p><p>图片来自于王福强老师的博客：<a href="https://afoo.me/posts/2015-07-09-how-spring-boot-works.html">https://afoo.me/posts/2015-07-09-how-spring-boot-works.html</a> </p><p>文献参考：CSDN博主「圣斗士Morty」   <a href="https://blog.csdn.net/u014745069/article/details/83820511">https://blog.csdn.net/u014745069/article/details/83820511</a></p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot自动配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis学习总结</title>
      <link href="2020/12/04/mybatis-xue-xi-zong-jie/"/>
      <url>2020/12/04/mybatis-xue-xi-zong-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="MyBatis的执行器："><a href="#MyBatis的执行器：" class="headerlink" title="MyBatis的执行器："></a>MyBatis的执行器：</h2><pre class=" language-shell"><code class="language-shell">simpleExecutor：每次执行update和select语句，都会创建一个Statement对象，执行完毕后立即释放Statement对象ReuseExecutor：每次执行update和select语句，会先查看有没有Statement对象，如果有则使用，没有就创建，并把Statement对象放在Map中，语句执行完不关闭Statement对象，供下次使用，简单来说就是循环使用此对象。BatchExecutor：每次执行update，将所有sql都添加到批处理中（addBatch()），等待统一执行（executeBatch()），它缓存了多个Statement对象，每个Statement对象都是addBatch()完毕后，等待逐一执行executeBatch()批处理。与JDBC批处理相同。</code></pre><h2 id="MyBatis的延迟加载策略"><a href="#MyBatis的延迟加载策略" class="headerlink" title="MyBatis的延迟加载策略"></a>MyBatis的延迟加载策略</h2><pre class=" language-shell"><code class="language-shell">延迟加载只对分布查询有一定的效果，分布查询就是用到实体类里面的引用属性的时候再加载。分布查询：         实体类里面有引用类型的属性，在xml里面用association标签实现分布查询，之前一查询就会将引用的也查出来，现在我们是查询出来不使用引用的属性，这样就会浪费资源，为了解决这个问题，我们就使用延迟加载，也就是只有在业务层查询出来数据之后，使用到引用的属性，那么执行sql语句的时候才会执行查询引用属性的sql语句，不然是不会执行的。需要在mybatis.xml里面写配置，将延迟加载和下面的标签写上，开启延迟加载。</code></pre><ul><li>简单来说，就是在mybatis.xml文件中使用setting标签开启延迟加载</li><li>&lt; setting name = “lazyloadingenable”  value = “true”&gt;</li></ul><h2 id="Mybatis如何实现分页的"><a href="#Mybatis如何实现分页的" class="headerlink" title="Mybatis如何实现分页的"></a>Mybatis如何实现分页的</h2><pre class=" language-shell"><code class="language-shell">1）Mybatis使用RowBounds对象进行分页，也可以直接编写sql实现分页，也可以使用Mybatis的分页插件。2）分页插件的原理：实现Mybatis提供的接口，实现自定义插件，在插件的拦截方法内拦截待执行的sql，然后重写sql。举例：select * from student，拦截sql后重写为：select t.* from （select * from student）t limit 0，10</code></pre><h2 id="Mybatis的动态sql如何写"><a href="#Mybatis的动态sql如何写" class="headerlink" title="Mybatis的动态sql如何写"></a>Mybatis的动态sql如何写</h2><pre class=" language-shell"><code class="language-shell">Mybatis动态sql可以在Xml映射文件内，以标签的形式编写动态sql，执行原理是根据表达式的值完成逻辑判断并动态拼接sql的功能。Mybatis提供了9种动态sql标签：trim | where | set | foreach | if | choose | when | otherwise | bind。</code></pre>]]></content>
      
      
      <categories>
          
          <category> MyBatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MyBatis总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot整合ElasticSearch</title>
      <link href="2020/12/04/spring-boot-zheng-he-elasticsearch/"/>
      <url>2020/12/04/spring-boot-zheng-he-elasticsearch/</url>
      
        <content type="html"><![CDATA[<h2 id="SpringBoot整合ElasticSearch"><a href="#SpringBoot整合ElasticSearch" class="headerlink" title="SpringBoot整合ElasticSearch"></a>SpringBoot整合ElasticSearch</h2><h3 id="1、导入依赖"><a href="#1、导入依赖" class="headerlink" title="1、导入依赖"></a>1、导入依赖</h3><p>这里的版本要和所按照的ELK版本匹配。</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.elasticsearch.client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>elasticsearch-rest-high-level-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>7.6.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>在spring-boot-dependencies中所依赖的ELK版本位6.8.7</p><pre><code>    &lt;elasticsearch.version&gt;6.8.7&lt;/elasticsearch.version&gt;</code></pre><p>需要在项目中将它改为7.6.2</p><pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>        ...        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>elasticsearch.version</span><span class="token punctuation">></span></span>7.6.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>elasticsearch.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span></code></pre><h3 id="2、编写测试类"><a href="#2、编写测试类" class="headerlink" title="2、编写测试类"></a>2、编写测试类</h3><h4 id="1）测试保存数据"><a href="#1）测试保存数据" class="headerlink" title="1）测试保存数据"></a>1）测试保存数据</h4><p> <a href="https://www.elastic.co/guide/en/elasticsearch/client/java-rest/current/java-rest-high-document-index.html">https://www.elastic.co/guide/en/elasticsearch/client/java-rest/current/java-rest-high-document-index.html</a> </p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">indexData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        IndexRequest indexRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IndexRequest</span> <span class="token punctuation">(</span><span class="token string">"users"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setUserName</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setGender</span><span class="token punctuation">(</span><span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String jsonString <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置要保存的内容</span>        indexRequest<span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span>jsonString<span class="token punctuation">,</span> XContentType<span class="token punctuation">.</span>JSON<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//执行创建索引和保存数据</span>        IndexResponse index <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span>indexRequest<span class="token punctuation">,</span> GulimallElasticSearchConfig<span class="token punctuation">.</span>COMMON_OPTIONS<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h4 id="2）测试获取数据"><a href="#2）测试获取数据" class="headerlink" title="2）测试获取数据"></a>2）测试获取数据</h4><p> <a href="https://www.elastic.co/guide/en/elasticsearch/client/java-rest/current/java-rest-high-search.html">https://www.elastic.co/guide/en/elasticsearch/client/java-rest/current/java-rest-high-search.html</a> </p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">searchData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        GetRequest getRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GetRequest</span><span class="token punctuation">(</span>                <span class="token string">"users"</span><span class="token punctuation">,</span>                <span class="token string">"_-2vAHIB0nzmLJLkxKWk"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        GetResponse getResponse <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>getRequest<span class="token punctuation">,</span> RequestOptions<span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>getResponse<span class="token punctuation">)</span><span class="token punctuation">;</span>        String index <span class="token operator">=</span> getResponse<span class="token punctuation">.</span><span class="token function">getIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        String id <span class="token operator">=</span> getResponse<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>getResponse<span class="token punctuation">.</span><span class="token function">isExists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">long</span> version <span class="token operator">=</span> getResponse<span class="token punctuation">.</span><span class="token function">getVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>version<span class="token punctuation">)</span><span class="token punctuation">;</span>            String sourceAsString <span class="token operator">=</span> getResponse<span class="token punctuation">.</span><span class="token function">getSourceAsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sourceAsString<span class="token punctuation">)</span><span class="token punctuation">;</span>            Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> sourceAsMap <span class="token operator">=</span> getResponse<span class="token punctuation">.</span><span class="token function">getSourceAsMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sourceAsMap<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> sourceAsBytes <span class="token operator">=</span> getResponse<span class="token punctuation">.</span><span class="token function">getSourceAsBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>查询state=”AK”的文档：</p><pre><code></code></pre><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"took"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token property">"timed_out"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token property">"_shards"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"total"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"successful"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"skipped"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token property">"failed"</span><span class="token operator">:</span> <span class="token number">0</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"hits"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"total"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"value"</span><span class="token operator">:</span> <span class="token number">22</span><span class="token punctuation">,</span>   //匹配到了<span class="token number">22</span>条            <span class="token property">"relation"</span><span class="token operator">:</span> <span class="token string">"eq"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"max_score"</span><span class="token operator">:</span> <span class="token number">3.7952394</span><span class="token punctuation">,</span>        <span class="token property">"hits"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>            <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"bank"</span><span class="token punctuation">,</span>            <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"account"</span><span class="token punctuation">,</span>            <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"210"</span><span class="token punctuation">,</span>            <span class="token property">"_score"</span><span class="token operator">:</span> <span class="token number">3.7952394</span><span class="token punctuation">,</span>            <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token property">"account_number"</span><span class="token operator">:</span> <span class="token number">210</span><span class="token punctuation">,</span>                <span class="token property">"balance"</span><span class="token operator">:</span> <span class="token number">33946</span><span class="token punctuation">,</span>                <span class="token property">"firstname"</span><span class="token operator">:</span> <span class="token string">"Cherry"</span><span class="token punctuation">,</span>                <span class="token property">"lastname"</span><span class="token operator">:</span> <span class="token string">"Carey"</span><span class="token punctuation">,</span>                <span class="token property">"age"</span><span class="token operator">:</span> <span class="token number">24</span><span class="token punctuation">,</span>                <span class="token property">"gender"</span><span class="token operator">:</span> <span class="token string">"M"</span><span class="token punctuation">,</span>                <span class="token property">"address"</span><span class="token operator">:</span> <span class="token string">"539 Tiffany Place"</span><span class="token punctuation">,</span>                <span class="token property">"employer"</span><span class="token operator">:</span> <span class="token string">"Martgo"</span><span class="token punctuation">,</span>                <span class="token property">"email"</span><span class="token operator">:</span> <span class="token string">"cherrycarey@martgo.com"</span><span class="token punctuation">,</span>                <span class="token property">"city"</span><span class="token operator">:</span> <span class="token string">"Fairacres"</span><span class="token punctuation">,</span>                <span class="token property">"state"</span><span class="token operator">:</span> <span class="token string">"AK"</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>           ....//省略其他          <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>搜索address中包含mill的所有人的年龄分布以及平均年龄，平均薪资</strong></p><pre class=" language-json"><code class="language-json">GET bank/_search<span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"match"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"address"</span><span class="token operator">:</span> <span class="token string">"Mill"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"aggs"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"ageAgg"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"terms"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"field"</span><span class="token operator">:</span> <span class="token string">"age"</span><span class="token punctuation">,</span>        <span class="token property">"size"</span><span class="token operator">:</span> <span class="token number">10</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"ageAvg"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"avg"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"field"</span><span class="token operator">:</span> <span class="token string">"age"</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"balanceAvg"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"avg"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"field"</span><span class="token operator">:</span> <span class="token string">"balance"</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>java实现</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * 复杂检索:在bank中搜索address中包含mill的所有人的年龄分布以及平均年龄，平均薪资     * @throws IOException     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">searchData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1. 创建检索请求</span>        SearchRequest searchRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//1.1）指定索引</span>        searchRequest<span class="token punctuation">.</span><span class="token function">indices</span><span class="token punctuation">(</span><span class="token string">"bank"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//1.2）构造检索条件</span>        SearchSourceBuilder sourceBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchSourceBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sourceBuilder<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>QueryBuilders<span class="token punctuation">.</span><span class="token function">matchQuery</span><span class="token punctuation">(</span><span class="token string">"address"</span><span class="token punctuation">,</span><span class="token string">"Mill"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//1.2.1)按照年龄分布进行聚合</span>        TermsAggregationBuilder ageAgg<span class="token operator">=</span>AggregationBuilders<span class="token punctuation">.</span><span class="token function">terms</span><span class="token punctuation">(</span><span class="token string">"ageAgg"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sourceBuilder<span class="token punctuation">.</span><span class="token function">aggregation</span><span class="token punctuation">(</span>ageAgg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//1.2.2)计算平均年龄</span>        AvgAggregationBuilder ageAvg <span class="token operator">=</span> AggregationBuilders<span class="token punctuation">.</span><span class="token function">avg</span><span class="token punctuation">(</span><span class="token string">"ageAvg"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sourceBuilder<span class="token punctuation">.</span><span class="token function">aggregation</span><span class="token punctuation">(</span>ageAvg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//1.2.3)计算平均薪资</span>        AvgAggregationBuilder balanceAvg <span class="token operator">=</span> AggregationBuilders<span class="token punctuation">.</span><span class="token function">avg</span><span class="token punctuation">(</span><span class="token string">"balanceAvg"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token string">"balance"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sourceBuilder<span class="token punctuation">.</span><span class="token function">aggregation</span><span class="token punctuation">(</span>balanceAvg<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"检索条件："</span><span class="token operator">+</span>sourceBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span>        searchRequest<span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span>sourceBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2. 执行检索</span>        SearchResponse searchResponse <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>searchRequest<span class="token punctuation">,</span> RequestOptions<span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"检索结果："</span><span class="token operator">+</span>searchResponse<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3. 将检索结果封装为Bean</span>        SearchHits hits <span class="token operator">=</span> searchResponse<span class="token punctuation">.</span><span class="token function">getHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        SearchHit<span class="token punctuation">[</span><span class="token punctuation">]</span> searchHits <span class="token operator">=</span> hits<span class="token punctuation">.</span><span class="token function">getHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>SearchHit searchHit <span class="token operator">:</span> searchHits<span class="token punctuation">)</span> <span class="token punctuation">{</span>            String sourceAsString <span class="token operator">=</span> searchHit<span class="token punctuation">.</span><span class="token function">getSourceAsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Account account <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>sourceAsString<span class="token punctuation">,</span> Account<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>account<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//4. 获取聚合信息</span>        Aggregations aggregations <span class="token operator">=</span> searchResponse<span class="token punctuation">.</span><span class="token function">getAggregations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Terms ageAgg1 <span class="token operator">=</span> aggregations<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"ageAgg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Terms<span class="token punctuation">.</span>Bucket bucket <span class="token operator">:</span> ageAgg1<span class="token punctuation">.</span><span class="token function">getBuckets</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            String keyAsString <span class="token operator">=</span> bucket<span class="token punctuation">.</span><span class="token function">getKeyAsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"年龄："</span><span class="token operator">+</span>keyAsString<span class="token operator">+</span><span class="token string">" ==> "</span><span class="token operator">+</span>bucket<span class="token punctuation">.</span><span class="token function">getDocCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Avg ageAvg1 <span class="token operator">=</span> aggregations<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"ageAvg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"平均年龄："</span><span class="token operator">+</span>ageAvg1<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Avg balanceAvg1 <span class="token operator">=</span> aggregations<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"balanceAvg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"平均薪资："</span><span class="token operator">+</span>balanceAvg1<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  </code></pre><p>可以尝试对比打印的条件和执行结果，和前面的ElasticSearch的检索语句和检索结果进行比较；</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="1-kibana控制台命令"><a href="#1-kibana控制台命令" class="headerlink" title="1. kibana控制台命令"></a>1. kibana控制台命令</h3><p>ctrl+home：回到文档首部；</p><p>ctril+end：回到文档尾部。</p><h2 id="商品上架"><a href="#商品上架" class="headerlink" title="商品上架"></a>商品上架</h2><h3 id="spu在es中的存储模型分析"><a href="#spu在es中的存储模型分析" class="headerlink" title="spu在es中的存储模型分析"></a>spu在es中的存储模型分析</h3><p>如果每个sku都存储规格参数，会有冗余存储，因为每个spu对应的sku的规格参数都一样</p><p>但是如果将规格参数单独建立索引会出现检索时出现大量数据传输的问题，会阻塞网络</p><p>因此我们选用第一种存储模型，以空间换时间</p><p><img src="images/Snipaste_2020-08-30_11-32-42.png"></p><h3 id="向ES添加商品属性映射"><a href="#向ES添加商品属性映射" class="headerlink" title="向ES添加商品属性映射"></a>向ES添加商品属性映射</h3><pre class=" language-json"><code class="language-json">PUT product<span class="token punctuation">{</span>    <span class="token property">"mappings"</span><span class="token operator">:</span><span class="token punctuation">{</span>        <span class="token property">"properties"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"skuId"</span><span class="token operator">:</span><span class="token punctuation">{</span>                <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"long"</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token property">"spuId"</span><span class="token operator">:</span><span class="token punctuation">{</span>                <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"keyword"</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token property">"skuTitle"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"text"</span><span class="token punctuation">,</span>                <span class="token property">"analyzer"</span><span class="token operator">:</span> <span class="token string">"ik_smart"</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token property">"skuPrice"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"keyword"</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token property">"skuImg"</span><span class="token operator">:</span><span class="token punctuation">{</span>                <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"keyword"</span><span class="token punctuation">,</span>                <span class="token property">"index"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>                <span class="token property">"doc_values"</span><span class="token operator">:</span> <span class="token boolean">false</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token property">"saleCount"</span><span class="token operator">:</span><span class="token punctuation">{</span>                <span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"long"</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token property">"hasStock"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"boolean"</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token property">"hotScore"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"long"</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token property">"brandId"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"long"</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token property">"catalogId"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"long"</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token property">"brandName"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"keyword"</span><span class="token punctuation">,</span>                <span class="token property">"index"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>                <span class="token property">"doc_values"</span><span class="token operator">:</span> <span class="token boolean">false</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token property">"brandImg"</span><span class="token operator">:</span><span class="token punctuation">{</span>                <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"keyword"</span><span class="token punctuation">,</span>                 <span class="token property">"index"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>                <span class="token property">"doc_values"</span><span class="token operator">:</span> <span class="token boolean">false</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token property">"catalogName"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"keyword"</span><span class="token punctuation">,</span>                <span class="token property">"index"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>                <span class="token property">"doc_values"</span><span class="token operator">:</span> <span class="token boolean">false</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token property">"attrs"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"nested"</span><span class="token punctuation">,</span>                <span class="token property">"properties"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                    <span class="token property">"attrId"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"long"</span>                    <span class="token punctuation">}</span><span class="token punctuation">,</span>                    <span class="token property">"attrName"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"keyword"</span><span class="token punctuation">,</span>                        <span class="token property">"index"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>                        <span class="token property">"doc_values"</span><span class="token operator">:</span> <span class="token boolean">false</span>                    <span class="token punctuation">}</span><span class="token punctuation">,</span>                    <span class="token property">"attrValue"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"keyword"</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> SpringBoot &amp;&amp; ElasticSearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ElasticSearch首次见面 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ElasticSearch初次见面</title>
      <link href="2020/11/29/elasticsearch-chu-ci-jian-mian/"/>
      <url>2020/11/29/elasticsearch-chu-ci-jian-mian/</url>
      
        <content type="html"><![CDATA[<h2 id="1-ELASTICSEARCH"><a href="#1-ELASTICSEARCH" class="headerlink" title="1. ELASTICSEARCH"></a>1. ELASTICSEARCH</h2><h3 id="1、安装elastic-search"><a href="#1、安装elastic-search" class="headerlink" title="1、安装elastic search"></a>1、安装elastic search</h3><p> dokcer中安装elastic search</p><p>（1）下载ealastic search和kibana</p><pre class=" language-shell"><code class="language-shell">docker pull elasticsearch:7.6.2docker pull kibana:7.6.2</code></pre><p>（2）配置</p><pre class=" language-shell"><code class="language-shell">mkdir -p /mydata/elasticsearch/configmkdir -p /mydata/elasticsearch/dataecho "http.host: 0.0.0.0" >/mydata/elasticsearch/config/elasticsearch.ymlchmod -R 777 /mydata/elasticsearch/</code></pre><p>（3）启动Elastic search</p><pre class=" language-shell"><code class="language-shell">docker run --name elasticsearch -p 9200:9200 -p 9300:9300 \-e  "discovery.type=single-node" \-e ES_JAVA_OPTS="-Xms64m -Xmx512m" \-v /mydata/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml \-v /mydata/elasticsearch/data:/usr/share/elasticsearch/data \-v  /mydata/elasticsearch/plugins:/usr/share/elasticsearch/plugins \-d elasticsearch:7.6.2 </code></pre><p>设置开机启动elasticsearch</p><pre class=" language-shell"><code class="language-shell">docker update elasticsearch --restart=always</code></pre><p>（4）启动kibana：</p><pre class=" language-shell"><code class="language-shell">docker run --name kibana -e ELASTICSEARCH_HOSTS=http://172.17.0.3:9200 -p 5601:5601 -d kibana:7.6.2</code></pre><p>设置开机启动kibana</p><pre class=" language-shell"><code class="language-shell">docker update kibana  --restart=always</code></pre><p>（5）测试</p><p>查看elasticsearch版本信息： http://#:9200/ </p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"0adeb7852e00"</span><span class="token punctuation">,</span>    <span class="token property">"cluster_name"</span><span class="token operator">:</span> <span class="token string">"elasticsearch"</span><span class="token punctuation">,</span>    <span class="token property">"cluster_uuid"</span><span class="token operator">:</span> <span class="token string">"9gglpP0HTfyOTRAaSe2rIg"</span><span class="token punctuation">,</span>    <span class="token property">"version"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"number"</span><span class="token operator">:</span> <span class="token string">"7.6.2"</span><span class="token punctuation">,</span>        <span class="token property">"build_flavor"</span><span class="token operator">:</span> <span class="token string">"default"</span><span class="token punctuation">,</span>        <span class="token property">"build_type"</span><span class="token operator">:</span> <span class="token string">"docker"</span><span class="token punctuation">,</span>        <span class="token property">"build_hash"</span><span class="token operator">:</span> <span class="token string">"ef48eb35cf30adf4db14086e8aabd07ef6fb113f"</span><span class="token punctuation">,</span>        <span class="token property">"build_date"</span><span class="token operator">:</span> <span class="token string">"2020-03-26T06:34:37.794943Z"</span><span class="token punctuation">,</span>        <span class="token property">"build_snapshot"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        <span class="token property">"lucene_version"</span><span class="token operator">:</span> <span class="token string">"8.4.0"</span><span class="token punctuation">,</span>        <span class="token property">"minimum_wire_compatibility_version"</span><span class="token operator">:</span> <span class="token string">"6.8.0"</span><span class="token punctuation">,</span>        <span class="token property">"minimum_index_compatibility_version"</span><span class="token operator">:</span> <span class="token string">"6.0.0-beta1"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"tagline"</span><span class="token operator">:</span> <span class="token string">"You Know, for Search"</span><span class="token punctuation">}</span></code></pre><p>显示elasticsearch 节点信息http://#:9200/_cat/nodes ，</p><pre class=" language-json"><code class="language-json"><span class="token number">127.0</span>.<span class="token number">0.1</span> <span class="token number">76</span> <span class="token number">95</span> <span class="token number">1</span> <span class="token number">0.26</span> <span class="token number">1.40</span> <span class="token number">1.22</span> dilm * 0adeb7852e00</code></pre><p>访问Kibana： http://#:5601/app/kibana </p><h3 id="2、初步检索"><a href="#2、初步检索" class="headerlink" title="2、初步检索"></a>2、初步检索</h3><h4 id="1）-CAT"><a href="#1）-CAT" class="headerlink" title="1）_CAT"></a>1）_CAT</h4><p>（1）GET/<em>cat/nodes：查看所有节点</em></p><p> 如：http://#:9200/_cat/nodes :</p><pre><code>127.0.0.1 61 91 11 0.08 0.49 0.87 dilm * 0adeb7852e00</code></pre><p>注：*表示集群中的主节点</p><p>（2）GET/<em>cat/health：查看es健康状况</em></p><p>如： http://#:9200/_cat/health </p><pre><code>1588332616 11:30:16 elasticsearch green 1 1 3 3 0 0 0 0 - 100.0%</code></pre><p>注：green表示健康值正常</p><p>（3）GET/<em>cat/master：查看主节点</em></p><p>如： http://#:9200/_cat/master </p><pre><code>vfpgxbusTC6-W3C2Np31EQ 127.0.0.1 127.0.0.1 0adeb7852e00</code></pre><p>（4）GET/_cat/indicies：查看所有索引 ，等价于mysql数据库的show databases;</p><p>如： http://#:9200/_cat/indices </p><pre class=" language-json"><code class="language-json">green open .kibana_task_manager_1   KWLtjcKRRuaV9so_v15WYg <span class="token number">1</span> <span class="token number">0</span> <span class="token number">2</span> <span class="token number">0</span> <span class="token number">39</span>.8kb <span class="token number">39</span>.8kbgreen open .apm-agent-configuration cuwCpJ5ER0OYsSgAJ7bVYA <span class="token number">1</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span>   283b   283bgreen open .kibana_1                PqK_LdUYRpWMy4fK0tMSPw <span class="token number">1</span> <span class="token number">0</span> <span class="token number">7</span> <span class="token number">0</span> <span class="token number">31</span>.2kb <span class="token number">31</span>.2kb</code></pre><h4 id="2）索引一个文档"><a href="#2）索引一个文档" class="headerlink" title="2）索引一个文档"></a>2）索引一个文档</h4><p>保存一个数据，保存在哪个索引的哪个类型下，指定用那个唯一标识<br>PUT customer/external/1;在customer索引下的external类型下保存1号数据为</p><pre><code>PUT customer/external/1</code></pre><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span> <span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"John Doe"</span><span class="token punctuation">}</span></code></pre><p>PUT和POST都可以<br>POST新增。如果不指定id，会自动生成id。指定id就会修改这个数据，并新增版本号；<br>PUT可以新增也可以修改。PUT必须指定id；由于PUT需要指定id，我们一般用来做修改操作，不指定id会报错。</p><p>下面是在postman中的测试数据：</p><p>创建数据成功后，显示201 created表示插入记录成功。</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"customer"</span><span class="token punctuation">,</span>    <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"external"</span><span class="token punctuation">,</span>    <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span>    <span class="token property">"_version"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token property">"result"</span><span class="token operator">:</span> <span class="token string">"created"</span><span class="token punctuation">,</span>    <span class="token property">"_shards"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"total"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>        <span class="token property">"successful"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"failed"</span><span class="token operator">:</span> <span class="token number">0</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"_seq_no"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token property">"_primary_term"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">}</span></code></pre><p>这些返回的JSON串的含义；这些带有下划线开头的，称为元数据，反映了当前的基本信息。</p><p>“_index”: “customer” 表明该数据在哪个数据库下；</p><p>“_type”: “external”     表明该数据在哪个类型下；</p><p>“_id”: “1”                    表明被保存数据的id；</p><p> “_version”: 1,            被保存数据的版本</p><p>“result”: “created”      这里是创建了一条数据，如果重新put一条数据，则该状态会变为updated，并且版本号也会发生变化。</p><p>下面选用POST方式：</p><p>添加数据的时候，不指定ID，会自动的生成id，并且类型是新增：</p><img src="images/image-20200501195619925.png" alt="image-20200501195619925" style="zoom: 52%;"><p>再次使用POST插入数据，仍然是新增的：</p><img src="images/image-20200501195732492.png" alt="image-20200501195732492" style="zoom: 80%;"><p>添加数据的时候，指定ID，会使用该id，并且类型是新增：</p><img src="images/image-20200501200048361.png" alt="image-20200501200048361" style="zoom: 66%;"><p>再次使用POST插入数据，类型为updated</p><img src="images/image-20200501200132199.png" alt="image-20200501200132199" style="zoom:67%;"><h4 id="3）查看文档"><a href="#3）查看文档" class="headerlink" title="3）查看文档"></a>3）查看文档</h4><p>GET /customer/external/1</p><p> http://#:9200/customer/external/1 </p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"customer"</span><span class="token punctuation">,</span>//在哪个索引    <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"external"</span><span class="token punctuation">,</span>//在哪个类型    <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span>//记录id    <span class="token property">"_version"</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>//版本号    <span class="token property">"_seq_no"</span><span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span>//并发控制字段，每次更新都会+<span class="token number">1</span>，用来做乐观锁    <span class="token property">"_primary_term"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>//同上，主分片重新分配，如重启，就会变化    <span class="token property">"found"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"John Doe"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>通过“if_seq_no=1&amp;if_primary_term=1 ”，当序列号匹配的时候，才进行修改，否则不修改。</p><p>实例：将id=1的数据更新为name=1，然后再次更新为name=2，起始_seq_no=6，_primary_term=1</p><p>（1）将name更新为1</p><p> http://#:9200/customer/external/1?if_seq_no=6&amp;if_primary_term=1 </p><img src="images/image-20200501212224983.png" alt="image-20200501212224983" style="zoom: 61%;"><p> （2）将name更新为2，更新过程中使用seq_no=6</p><p>http://#:9200/customer/external/1?if_seq_no=6&amp;if_primary_term=1 </p><img src="images/image-20200501213047499.png" alt="image-20200501213047499" style="zoom: 60%;"><p>出现更新错误。</p><p>（3）查询新的数据</p><p> http://#:9200/customer/external/1 </p><p>能够看到_seq_no变为7。</p><p>（4）再次更新，更新成功</p><p> http://#:9200/customer/external/1?if_seq_no=7&amp;if_primary_term=1 </p><img src="images/image-20200501213130001.png" alt="image-20200501213130001" style="zoom:75%;"><h4 id="4）更新文档"><a href="#4）更新文档" class="headerlink" title="4）更新文档"></a>4）更新文档</h4><p>（1）POST更新文档，带有_update</p><p>http://#:9200/customer/external/1/_update </p><p>如果再次执行更新，则不执行任何操作，序列号也不发生变化</p><p>POST更新方式，会对比原来的数据，和原来的相同，则不执行任何操作（version和_seq_no）都不变。</p><p> （2）POST更新文档，不带_update</p><p>在更新过程中，重复执行更新操作，数据也能够更新成功，不会和原来的数据进行对比。</p><h4 id="5）删除文档或索引"><a href="#5）删除文档或索引" class="headerlink" title="5）删除文档或索引"></a>5）删除文档或索引</h4><pre><code>DELETE customer/external/1DELETE customer</code></pre><p>注：elasticsearch并没有提供删除类型的操作，只提供了删除索引和文档的操作。</p><p>实例：删除id=1的数据，删除后继续查询</p><img src="images/image-20200501220559094.png" alt="image-20200501220559094" style="zoom:67%;"><p>实例：删除整个costomer索引数据</p><p>删除前，所有的索引</p><pre><code>green  open .kibana_task_manager_1   KWLtjcKRRuaV9so_v15WYg 1 0 2 0 39.8kb 39.8kbgreen  open .apm-agent-configuration cuwCpJ5ER0OYsSgAJ7bVYA 1 0 0 0   283b   283bgreen  open .kibana_1                PqK_LdUYRpWMy4fK0tMSPw 1 0 7 0 31.2kb 31.2kbyellow open customer                 nzDYCdnvQjSsapJrAIT8Zw 1 1 4 0  4.4kb  4.4kb</code></pre><p>删除“ customer ”索引</p><p>删除后，所有的索引</p><pre><code>green  open .kibana_task_manager_1   KWLtjcKRRuaV9so_v15WYg 1 0 2 0 39.8kb 39.8kbgreen  open .apm-agent-configuration cuwCpJ5ER0OYsSgAJ7bVYA 1 0 0 0   283b   283bgreen  open .kibana_1                PqK_LdUYRpWMy4fK0tMSPw 1 0 7 0 31.2kb 31.2kb</code></pre><h4 id="6）eleasticsearch的批量操作——bulk"><a href="#6）eleasticsearch的批量操作——bulk" class="headerlink" title="6）eleasticsearch的批量操作——bulk"></a>6）eleasticsearch的批量操作——bulk</h4><p>语法格式：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>action<span class="token operator">:</span><span class="token punctuation">{</span>metadata<span class="token punctuation">}</span><span class="token punctuation">}</span>\n<span class="token punctuation">{</span>request body  <span class="token punctuation">}</span>\n<span class="token punctuation">{</span>action<span class="token operator">:</span><span class="token punctuation">{</span>metadata<span class="token punctuation">}</span><span class="token punctuation">}</span>\n<span class="token punctuation">{</span>request body  <span class="token punctuation">}</span>\n</code></pre><p>这里的批量操作，当发生某一条执行发生失败时，其他的数据仍然能够接着执行，也就是说彼此之间是独立的。</p><p>bulk api以此按顺序执行所有的action（动作）。如果一个单个的动作因任何原因失败，它将继续处理它后面剩余的动作。当bulk api返回时，它将提供每个动作的状态（与发送的顺序相同），所以您可以检查是否一个指定的动作是否失败了。</p><p>实例1: 执行多条数据</p><pre class=" language-json"><code class="language-json">POST customer/external/_bulk<span class="token punctuation">{</span><span class="token property">"index"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">"_id"</span><span class="token operator">:</span><span class="token string">"1"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"John Doe"</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token property">"index"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">"_id"</span><span class="token operator">:</span><span class="token string">"2"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"John Doe"</span><span class="token punctuation">}</span></code></pre><p>执行结果</p><pre class=" language-json"><code class="language-json">#! Deprecation<span class="token operator">:</span> <span class="token punctuation">[</span>types removal<span class="token punctuation">]</span> Specifying types in bulk requests is deprecated.<span class="token punctuation">{</span>  <span class="token property">"took"</span> <span class="token operator">:</span> <span class="token number">491</span><span class="token punctuation">,</span>  <span class="token property">"errors"</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token property">"items"</span> <span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      <span class="token property">"index"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"_index"</span> <span class="token operator">:</span> <span class="token string">"customer"</span><span class="token punctuation">,</span>        <span class="token property">"_type"</span> <span class="token operator">:</span> <span class="token string">"external"</span><span class="token punctuation">,</span>        <span class="token property">"_id"</span> <span class="token operator">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span>        <span class="token property">"_version"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"result"</span> <span class="token operator">:</span> <span class="token string">"created"</span><span class="token punctuation">,</span>        <span class="token property">"_shards"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token property">"total"</span> <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>          <span class="token property">"successful"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>          <span class="token property">"failed"</span> <span class="token operator">:</span> <span class="token number">0</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"_seq_no"</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token property">"_primary_term"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"status"</span> <span class="token operator">:</span> <span class="token number">201</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token property">"index"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"_index"</span> <span class="token operator">:</span> <span class="token string">"customer"</span><span class="token punctuation">,</span>        <span class="token property">"_type"</span> <span class="token operator">:</span> <span class="token string">"external"</span><span class="token punctuation">,</span>        <span class="token property">"_id"</span> <span class="token operator">:</span> <span class="token string">"2"</span><span class="token punctuation">,</span>        <span class="token property">"_version"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"result"</span> <span class="token operator">:</span> <span class="token string">"created"</span><span class="token punctuation">,</span>        <span class="token property">"_shards"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token property">"total"</span> <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>          <span class="token property">"successful"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>          <span class="token property">"failed"</span> <span class="token operator">:</span> <span class="token number">0</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"_seq_no"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"_primary_term"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"status"</span> <span class="token operator">:</span> <span class="token number">201</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><p>实例2：对于整个索引执行批量操作</p><pre class=" language-json"><code class="language-json">POST /_bulk<span class="token punctuation">{</span><span class="token property">"delete"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">"_index"</span><span class="token operator">:</span><span class="token string">"website"</span><span class="token punctuation">,</span><span class="token property">"_type"</span><span class="token operator">:</span><span class="token string">"blog"</span><span class="token punctuation">,</span><span class="token property">"_id"</span><span class="token operator">:</span><span class="token string">"123"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token property">"create"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">"_index"</span><span class="token operator">:</span><span class="token string">"website"</span><span class="token punctuation">,</span><span class="token property">"_type"</span><span class="token operator">:</span><span class="token string">"blog"</span><span class="token punctuation">,</span><span class="token property">"_id"</span><span class="token operator">:</span><span class="token string">"123"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token property">"title"</span><span class="token operator">:</span><span class="token string">"my first blog post"</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token property">"index"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">"_index"</span><span class="token operator">:</span><span class="token string">"website"</span><span class="token punctuation">,</span><span class="token property">"_type"</span><span class="token operator">:</span><span class="token string">"blog"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token property">"title"</span><span class="token operator">:</span><span class="token string">"my second blog post"</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token property">"update"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">"_index"</span><span class="token operator">:</span><span class="token string">"website"</span><span class="token punctuation">,</span><span class="token property">"_type"</span><span class="token operator">:</span><span class="token string">"blog"</span><span class="token punctuation">,</span><span class="token property">"_id"</span><span class="token operator">:</span><span class="token string">"123"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token property">"doc"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">"title"</span><span class="token operator">:</span><span class="token string">"my updated blog post"</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>运行结果：</p><pre class=" language-json"><code class="language-json">#! Deprecation<span class="token operator">:</span> <span class="token punctuation">[</span>types removal<span class="token punctuation">]</span> Specifying types in bulk requests is deprecated.<span class="token punctuation">{</span>  <span class="token property">"took"</span> <span class="token operator">:</span> <span class="token number">608</span><span class="token punctuation">,</span>  <span class="token property">"errors"</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token property">"items"</span> <span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      <span class="token property">"delete"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"_index"</span> <span class="token operator">:</span> <span class="token string">"website"</span><span class="token punctuation">,</span>        <span class="token property">"_type"</span> <span class="token operator">:</span> <span class="token string">"blog"</span><span class="token punctuation">,</span>        <span class="token property">"_id"</span> <span class="token operator">:</span> <span class="token string">"123"</span><span class="token punctuation">,</span>        <span class="token property">"_version"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"result"</span> <span class="token operator">:</span> <span class="token string">"not_found"</span><span class="token punctuation">,</span>        <span class="token property">"_shards"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token property">"total"</span> <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>          <span class="token property">"successful"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>          <span class="token property">"failed"</span> <span class="token operator">:</span> <span class="token number">0</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"_seq_no"</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token property">"_primary_term"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"status"</span> <span class="token operator">:</span> <span class="token number">404</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token property">"create"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"_index"</span> <span class="token operator">:</span> <span class="token string">"website"</span><span class="token punctuation">,</span>        <span class="token property">"_type"</span> <span class="token operator">:</span> <span class="token string">"blog"</span><span class="token punctuation">,</span>        <span class="token property">"_id"</span> <span class="token operator">:</span> <span class="token string">"123"</span><span class="token punctuation">,</span>        <span class="token property">"_version"</span> <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>        <span class="token property">"result"</span> <span class="token operator">:</span> <span class="token string">"created"</span><span class="token punctuation">,</span>        <span class="token property">"_shards"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token property">"total"</span> <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>          <span class="token property">"successful"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>          <span class="token property">"failed"</span> <span class="token operator">:</span> <span class="token number">0</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"_seq_no"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"_primary_term"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"status"</span> <span class="token operator">:</span> <span class="token number">201</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token property">"index"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"_index"</span> <span class="token operator">:</span> <span class="token string">"website"</span><span class="token punctuation">,</span>        <span class="token property">"_type"</span> <span class="token operator">:</span> <span class="token string">"blog"</span><span class="token punctuation">,</span>        <span class="token property">"_id"</span> <span class="token operator">:</span> <span class="token string">"MCOs0HEBHYK_MJXUyYIz"</span><span class="token punctuation">,</span>        <span class="token property">"_version"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"result"</span> <span class="token operator">:</span> <span class="token string">"created"</span><span class="token punctuation">,</span>        <span class="token property">"_shards"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token property">"total"</span> <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>          <span class="token property">"successful"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>          <span class="token property">"failed"</span> <span class="token operator">:</span> <span class="token number">0</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"_seq_no"</span> <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>        <span class="token property">"_primary_term"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"status"</span> <span class="token operator">:</span> <span class="token number">201</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token property">"update"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"_index"</span> <span class="token operator">:</span> <span class="token string">"website"</span><span class="token punctuation">,</span>        <span class="token property">"_type"</span> <span class="token operator">:</span> <span class="token string">"blog"</span><span class="token punctuation">,</span>        <span class="token property">"_id"</span> <span class="token operator">:</span> <span class="token string">"123"</span><span class="token punctuation">,</span>        <span class="token property">"_version"</span> <span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>        <span class="token property">"result"</span> <span class="token operator">:</span> <span class="token string">"updated"</span><span class="token punctuation">,</span>        <span class="token property">"_shards"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token property">"total"</span> <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>          <span class="token property">"successful"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>          <span class="token property">"failed"</span> <span class="token operator">:</span> <span class="token number">0</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"_seq_no"</span> <span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>        <span class="token property">"_primary_term"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"status"</span> <span class="token operator">:</span> <span class="token number">200</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><h4 id="7）样本测试数据"><a href="#7）样本测试数据" class="headerlink" title="7）样本测试数据"></a>7）样本测试数据</h4><p>准备了一份顾客银行账户信息的虚构的JSON文档样本。每个文档都有下列的schema（模式）。</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"account_number"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token property">"balance"</span><span class="token operator">:</span> <span class="token number">39225</span><span class="token punctuation">,</span>    <span class="token property">"firstname"</span><span class="token operator">:</span> <span class="token string">"Amber"</span><span class="token punctuation">,</span>    <span class="token property">"lastname"</span><span class="token operator">:</span> <span class="token string">"Duke"</span><span class="token punctuation">,</span>    <span class="token property">"age"</span><span class="token operator">:</span> <span class="token number">32</span><span class="token punctuation">,</span>    <span class="token property">"gender"</span><span class="token operator">:</span> <span class="token string">"M"</span><span class="token punctuation">,</span>    <span class="token property">"address"</span><span class="token operator">:</span> <span class="token string">"880 Holmes Lane"</span><span class="token punctuation">,</span>    <span class="token property">"employer"</span><span class="token operator">:</span> <span class="token string">"Pyrami"</span><span class="token punctuation">,</span>    <span class="token property">"email"</span><span class="token operator">:</span> <span class="token string">"amberduke@pyrami.com"</span><span class="token punctuation">,</span>    <span class="token property">"city"</span><span class="token operator">:</span> <span class="token string">"Brogan"</span><span class="token punctuation">,</span>    <span class="token property">"state"</span><span class="token operator">:</span> <span class="token string">"IL"</span><span class="token punctuation">}</span></code></pre><p> <a href="https://github.com/elastic/elasticsearch/blob/master/docs/src/test/resources/accounts.json">https://github.com/elastic/elasticsearch/blob/master/docs/src/test/resources/accounts.json</a> ，导入测试数据，</p><p>POST bank/account/_bulk</p><h3 id="3、检索"><a href="#3、检索" class="headerlink" title="3、检索"></a>3、检索</h3><h4 id="1）search-Api"><a href="#1）search-Api" class="headerlink" title="1）search Api"></a>1）search Api</h4><p>ES支持两种基本方式检索；</p><ul><li>通过REST request uri 发送搜索参数 （uri +检索参数）；</li><li>通过REST request body 来发送它们（uri+请求体）；</li></ul><p>信息检索</p><p>uri+请求体进行检索</p><pre class=" language-json"><code class="language-json">GET /bank/_search<span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">"match_all"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"sort"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span> <span class="token property">"account_number"</span><span class="token operator">:</span> <span class="token string">"asc"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token property">"balance"</span><span class="token operator">:</span><span class="token string">"desc"</span><span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><p>HTTP客户端工具（），get请求不能够携带请求体，</p><pre><code>GET bank/_search?q=*&amp;sort=account_number:asc</code></pre><p>返回结果：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"took"</span> <span class="token operator">:</span> <span class="token number">235</span><span class="token punctuation">,</span>  <span class="token property">"timed_out"</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token property">"_shards"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"total"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token property">"successful"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token property">"skipped"</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token property">"failed"</span> <span class="token operator">:</span> <span class="token number">0</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"hits"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"total"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"value"</span> <span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">,</span>      <span class="token property">"relation"</span> <span class="token operator">:</span> <span class="token string">"eq"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"max_score"</span> <span class="token operator">:</span> <span class="token null">null</span><span class="token punctuation">,</span>    <span class="token property">"hits"</span> <span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        <span class="token property">"_index"</span> <span class="token operator">:</span> <span class="token string">"bank"</span><span class="token punctuation">,</span>        <span class="token property">"_type"</span> <span class="token operator">:</span> <span class="token string">"account"</span><span class="token punctuation">,</span>        <span class="token property">"_id"</span> <span class="token operator">:</span> <span class="token string">"0"</span><span class="token punctuation">,</span>        <span class="token property">"_score"</span> <span class="token operator">:</span> <span class="token null">null</span><span class="token punctuation">,</span>        <span class="token property">"_source"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token property">"account_number"</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>          <span class="token property">"balance"</span> <span class="token operator">:</span> <span class="token number">16623</span><span class="token punctuation">,</span>          <span class="token property">"firstname"</span> <span class="token operator">:</span> <span class="token string">"Bradshaw"</span><span class="token punctuation">,</span>          <span class="token property">"lastname"</span> <span class="token operator">:</span> <span class="token string">"Mckenzie"</span><span class="token punctuation">,</span>          <span class="token property">"age"</span> <span class="token operator">:</span> <span class="token number">29</span><span class="token punctuation">,</span>          <span class="token property">"gender"</span> <span class="token operator">:</span> <span class="token string">"F"</span><span class="token punctuation">,</span>          <span class="token property">"address"</span> <span class="token operator">:</span> <span class="token string">"244 Columbus Place"</span><span class="token punctuation">,</span>          <span class="token property">"employer"</span> <span class="token operator">:</span> <span class="token string">"Euron"</span><span class="token punctuation">,</span>          <span class="token property">"email"</span> <span class="token operator">:</span> <span class="token string">"bradshawmckenzie@euron.com"</span><span class="token punctuation">,</span>          <span class="token property">"city"</span> <span class="token operator">:</span> <span class="token string">"Hobucken"</span><span class="token punctuation">,</span>          <span class="token property">"state"</span> <span class="token operator">:</span> <span class="token string">"CO"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"sort"</span> <span class="token operator">:</span> <span class="token punctuation">[</span>          <span class="token number">0</span>        <span class="token punctuation">]</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        <span class="token property">"_index"</span> <span class="token operator">:</span> <span class="token string">"bank"</span><span class="token punctuation">,</span>        <span class="token property">"_type"</span> <span class="token operator">:</span> <span class="token string">"account"</span><span class="token punctuation">,</span>        <span class="token property">"_id"</span> <span class="token operator">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span>        <span class="token property">"_score"</span> <span class="token operator">:</span> <span class="token null">null</span><span class="token punctuation">,</span>        <span class="token property">"_source"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token property">"account_number"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>          <span class="token property">"balance"</span> <span class="token operator">:</span> <span class="token number">39225</span><span class="token punctuation">,</span>          <span class="token property">"firstname"</span> <span class="token operator">:</span> <span class="token string">"Amber"</span><span class="token punctuation">,</span>          <span class="token property">"lastname"</span> <span class="token operator">:</span> <span class="token string">"Duke"</span><span class="token punctuation">,</span>          <span class="token property">"age"</span> <span class="token operator">:</span> <span class="token number">32</span><span class="token punctuation">,</span>          <span class="token property">"gender"</span> <span class="token operator">:</span> <span class="token string">"M"</span><span class="token punctuation">,</span>          <span class="token property">"address"</span> <span class="token operator">:</span> <span class="token string">"880 Holmes Lane"</span><span class="token punctuation">,</span>          <span class="token property">"employer"</span> <span class="token operator">:</span> <span class="token string">"Pyrami"</span><span class="token punctuation">,</span>          <span class="token property">"email"</span> <span class="token operator">:</span> <span class="token string">"amberduke@pyrami.com"</span><span class="token punctuation">,</span>          <span class="token property">"city"</span> <span class="token operator">:</span> <span class="token string">"Brogan"</span><span class="token punctuation">,</span>          <span class="token property">"state"</span> <span class="token operator">:</span> <span class="token string">"IL"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"sort"</span> <span class="token operator">:</span> <span class="token punctuation">[</span>          <span class="token number">1</span>        <span class="token punctuation">]</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        <span class="token property">"_index"</span> <span class="token operator">:</span> <span class="token string">"bank"</span><span class="token punctuation">,</span>        <span class="token property">"_type"</span> <span class="token operator">:</span> <span class="token string">"account"</span><span class="token punctuation">,</span>        <span class="token property">"_id"</span> <span class="token operator">:</span> <span class="token string">"2"</span><span class="token punctuation">,</span>        <span class="token property">"_score"</span> <span class="token operator">:</span> <span class="token null">null</span><span class="token punctuation">,</span>        <span class="token property">"_source"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token property">"account_number"</span> <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>          <span class="token property">"balance"</span> <span class="token operator">:</span> <span class="token number">28838</span><span class="token punctuation">,</span>          <span class="token property">"firstname"</span> <span class="token operator">:</span> <span class="token string">"Roberta"</span><span class="token punctuation">,</span>          <span class="token property">"lastname"</span> <span class="token operator">:</span> <span class="token string">"Bender"</span><span class="token punctuation">,</span>          <span class="token property">"age"</span> <span class="token operator">:</span> <span class="token number">22</span><span class="token punctuation">,</span>          <span class="token property">"gender"</span> <span class="token operator">:</span> <span class="token string">"F"</span><span class="token punctuation">,</span>          <span class="token property">"address"</span> <span class="token operator">:</span> <span class="token string">"560 Kingsway Place"</span><span class="token punctuation">,</span>          <span class="token property">"employer"</span> <span class="token operator">:</span> <span class="token string">"Chillium"</span><span class="token punctuation">,</span>          <span class="token property">"email"</span> <span class="token operator">:</span> <span class="token string">"robertabender@chillium.com"</span><span class="token punctuation">,</span>          <span class="token property">"city"</span> <span class="token operator">:</span> <span class="token string">"Bennett"</span><span class="token punctuation">,</span>          <span class="token property">"state"</span> <span class="token operator">:</span> <span class="token string">"LA"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"sort"</span> <span class="token operator">:</span> <span class="token punctuation">[</span>          <span class="token number">2</span>        <span class="token punctuation">]</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        <span class="token property">"_index"</span> <span class="token operator">:</span> <span class="token string">"bank"</span><span class="token punctuation">,</span>        <span class="token property">"_type"</span> <span class="token operator">:</span> <span class="token string">"account"</span><span class="token punctuation">,</span>        <span class="token property">"_id"</span> <span class="token operator">:</span> <span class="token string">"3"</span><span class="token punctuation">,</span>        <span class="token property">"_score"</span> <span class="token operator">:</span> <span class="token null">null</span><span class="token punctuation">,</span>        <span class="token property">"_source"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token property">"account_number"</span> <span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>          <span class="token property">"balance"</span> <span class="token operator">:</span> <span class="token number">44947</span><span class="token punctuation">,</span>          <span class="token property">"firstname"</span> <span class="token operator">:</span> <span class="token string">"Levine"</span><span class="token punctuation">,</span>          <span class="token property">"lastname"</span> <span class="token operator">:</span> <span class="token string">"Burks"</span><span class="token punctuation">,</span>          <span class="token property">"age"</span> <span class="token operator">:</span> <span class="token number">26</span><span class="token punctuation">,</span>          <span class="token property">"gender"</span> <span class="token operator">:</span> <span class="token string">"F"</span><span class="token punctuation">,</span>          <span class="token property">"address"</span> <span class="token operator">:</span> <span class="token string">"328 Wilson Avenue"</span><span class="token punctuation">,</span>          <span class="token property">"employer"</span> <span class="token operator">:</span> <span class="token string">"Amtap"</span><span class="token punctuation">,</span>          <span class="token property">"email"</span> <span class="token operator">:</span> <span class="token string">"levineburks@amtap.com"</span><span class="token punctuation">,</span>          <span class="token property">"city"</span> <span class="token operator">:</span> <span class="token string">"Cochranville"</span><span class="token punctuation">,</span>          <span class="token property">"state"</span> <span class="token operator">:</span> <span class="token string">"HI"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"sort"</span> <span class="token operator">:</span> <span class="token punctuation">[</span>          <span class="token number">3</span>        <span class="token punctuation">]</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        <span class="token property">"_index"</span> <span class="token operator">:</span> <span class="token string">"bank"</span><span class="token punctuation">,</span>        <span class="token property">"_type"</span> <span class="token operator">:</span> <span class="token string">"account"</span><span class="token punctuation">,</span>        <span class="token property">"_id"</span> <span class="token operator">:</span> <span class="token string">"4"</span><span class="token punctuation">,</span>        <span class="token property">"_score"</span> <span class="token operator">:</span> <span class="token null">null</span><span class="token punctuation">,</span>        <span class="token property">"_source"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token property">"account_number"</span> <span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>          <span class="token property">"balance"</span> <span class="token operator">:</span> <span class="token number">27658</span><span class="token punctuation">,</span>          <span class="token property">"firstname"</span> <span class="token operator">:</span> <span class="token string">"Rodriquez"</span><span class="token punctuation">,</span>          <span class="token property">"lastname"</span> <span class="token operator">:</span> <span class="token string">"Flores"</span><span class="token punctuation">,</span>          <span class="token property">"age"</span> <span class="token operator">:</span> <span class="token number">31</span><span class="token punctuation">,</span>          <span class="token property">"gender"</span> <span class="token operator">:</span> <span class="token string">"F"</span><span class="token punctuation">,</span>          <span class="token property">"address"</span> <span class="token operator">:</span> <span class="token string">"986 Wyckoff Avenue"</span><span class="token punctuation">,</span>          <span class="token property">"employer"</span> <span class="token operator">:</span> <span class="token string">"Tourmania"</span><span class="token punctuation">,</span>          <span class="token property">"email"</span> <span class="token operator">:</span> <span class="token string">"rodriquezflores@tourmania.com"</span><span class="token punctuation">,</span>          <span class="token property">"city"</span> <span class="token operator">:</span> <span class="token string">"Eastvale"</span><span class="token punctuation">,</span>          <span class="token property">"state"</span> <span class="token operator">:</span> <span class="token string">"HI"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"sort"</span> <span class="token operator">:</span> <span class="token punctuation">[</span>          <span class="token number">4</span>        <span class="token punctuation">]</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        <span class="token property">"_index"</span> <span class="token operator">:</span> <span class="token string">"bank"</span><span class="token punctuation">,</span>        <span class="token property">"_type"</span> <span class="token operator">:</span> <span class="token string">"account"</span><span class="token punctuation">,</span>        <span class="token property">"_id"</span> <span class="token operator">:</span> <span class="token string">"5"</span><span class="token punctuation">,</span>        <span class="token property">"_score"</span> <span class="token operator">:</span> <span class="token null">null</span><span class="token punctuation">,</span>        <span class="token property">"_source"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token property">"account_number"</span> <span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>          <span class="token property">"balance"</span> <span class="token operator">:</span> <span class="token number">29342</span><span class="token punctuation">,</span>          <span class="token property">"firstname"</span> <span class="token operator">:</span> <span class="token string">"Leola"</span><span class="token punctuation">,</span>          <span class="token property">"lastname"</span> <span class="token operator">:</span> <span class="token string">"Stewart"</span><span class="token punctuation">,</span>          <span class="token property">"age"</span> <span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span>          <span class="token property">"gender"</span> <span class="token operator">:</span> <span class="token string">"F"</span><span class="token punctuation">,</span>          <span class="token property">"address"</span> <span class="token operator">:</span> <span class="token string">"311 Elm Place"</span><span class="token punctuation">,</span>          <span class="token property">"employer"</span> <span class="token operator">:</span> <span class="token string">"Diginetic"</span><span class="token punctuation">,</span>          <span class="token property">"email"</span> <span class="token operator">:</span> <span class="token string">"leolastewart@diginetic.com"</span><span class="token punctuation">,</span>          <span class="token property">"city"</span> <span class="token operator">:</span> <span class="token string">"Fairview"</span><span class="token punctuation">,</span>          <span class="token property">"state"</span> <span class="token operator">:</span> <span class="token string">"NJ"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"sort"</span> <span class="token operator">:</span> <span class="token punctuation">[</span>          <span class="token number">5</span>        <span class="token punctuation">]</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        <span class="token property">"_index"</span> <span class="token operator">:</span> <span class="token string">"bank"</span><span class="token punctuation">,</span>        <span class="token property">"_type"</span> <span class="token operator">:</span> <span class="token string">"account"</span><span class="token punctuation">,</span>        <span class="token property">"_id"</span> <span class="token operator">:</span> <span class="token string">"6"</span><span class="token punctuation">,</span>        <span class="token property">"_score"</span> <span class="token operator">:</span> <span class="token null">null</span><span class="token punctuation">,</span>        <span class="token property">"_source"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token property">"account_number"</span> <span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span>          <span class="token property">"balance"</span> <span class="token operator">:</span> <span class="token number">5686</span><span class="token punctuation">,</span>          <span class="token property">"firstname"</span> <span class="token operator">:</span> <span class="token string">"Hattie"</span><span class="token punctuation">,</span>          <span class="token property">"lastname"</span> <span class="token operator">:</span> <span class="token string">"Bond"</span><span class="token punctuation">,</span>          <span class="token property">"age"</span> <span class="token operator">:</span> <span class="token number">36</span><span class="token punctuation">,</span>          <span class="token property">"gender"</span> <span class="token operator">:</span> <span class="token string">"M"</span><span class="token punctuation">,</span>          <span class="token property">"address"</span> <span class="token operator">:</span> <span class="token string">"671 Bristol Street"</span><span class="token punctuation">,</span>          <span class="token property">"employer"</span> <span class="token operator">:</span> <span class="token string">"Netagy"</span><span class="token punctuation">,</span>          <span class="token property">"email"</span> <span class="token operator">:</span> <span class="token string">"hattiebond@netagy.com"</span><span class="token punctuation">,</span>          <span class="token property">"city"</span> <span class="token operator">:</span> <span class="token string">"Dante"</span><span class="token punctuation">,</span>          <span class="token property">"state"</span> <span class="token operator">:</span> <span class="token string">"TN"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"sort"</span> <span class="token operator">:</span> <span class="token punctuation">[</span>          <span class="token number">6</span>        <span class="token punctuation">]</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        <span class="token property">"_index"</span> <span class="token operator">:</span> <span class="token string">"bank"</span><span class="token punctuation">,</span>        <span class="token property">"_type"</span> <span class="token operator">:</span> <span class="token string">"account"</span><span class="token punctuation">,</span>        <span class="token property">"_id"</span> <span class="token operator">:</span> <span class="token string">"7"</span><span class="token punctuation">,</span>        <span class="token property">"_score"</span> <span class="token operator">:</span> <span class="token null">null</span><span class="token punctuation">,</span>        <span class="token property">"_source"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token property">"account_number"</span> <span class="token operator">:</span> <span class="token number">7</span><span class="token punctuation">,</span>          <span class="token property">"balance"</span> <span class="token operator">:</span> <span class="token number">39121</span><span class="token punctuation">,</span>          <span class="token property">"firstname"</span> <span class="token operator">:</span> <span class="token string">"Levy"</span><span class="token punctuation">,</span>          <span class="token property">"lastname"</span> <span class="token operator">:</span> <span class="token string">"Richard"</span><span class="token punctuation">,</span>          <span class="token property">"age"</span> <span class="token operator">:</span> <span class="token number">22</span><span class="token punctuation">,</span>          <span class="token property">"gender"</span> <span class="token operator">:</span> <span class="token string">"M"</span><span class="token punctuation">,</span>          <span class="token property">"address"</span> <span class="token operator">:</span> <span class="token string">"820 Logan Street"</span><span class="token punctuation">,</span>          <span class="token property">"employer"</span> <span class="token operator">:</span> <span class="token string">"Teraprene"</span><span class="token punctuation">,</span>          <span class="token property">"email"</span> <span class="token operator">:</span> <span class="token string">"levyrichard@teraprene.com"</span><span class="token punctuation">,</span>          <span class="token property">"city"</span> <span class="token operator">:</span> <span class="token string">"Shrewsbury"</span><span class="token punctuation">,</span>          <span class="token property">"state"</span> <span class="token operator">:</span> <span class="token string">"MO"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"sort"</span> <span class="token operator">:</span> <span class="token punctuation">[</span>          <span class="token number">7</span>        <span class="token punctuation">]</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        <span class="token property">"_index"</span> <span class="token operator">:</span> <span class="token string">"bank"</span><span class="token punctuation">,</span>        <span class="token property">"_type"</span> <span class="token operator">:</span> <span class="token string">"account"</span><span class="token punctuation">,</span>        <span class="token property">"_id"</span> <span class="token operator">:</span> <span class="token string">"8"</span><span class="token punctuation">,</span>        <span class="token property">"_score"</span> <span class="token operator">:</span> <span class="token null">null</span><span class="token punctuation">,</span>        <span class="token property">"_source"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token property">"account_number"</span> <span class="token operator">:</span> <span class="token number">8</span><span class="token punctuation">,</span>          <span class="token property">"balance"</span> <span class="token operator">:</span> <span class="token number">48868</span><span class="token punctuation">,</span>          <span class="token property">"firstname"</span> <span class="token operator">:</span> <span class="token string">"Jan"</span><span class="token punctuation">,</span>          <span class="token property">"lastname"</span> <span class="token operator">:</span> <span class="token string">"Burns"</span><span class="token punctuation">,</span>          <span class="token property">"age"</span> <span class="token operator">:</span> <span class="token number">35</span><span class="token punctuation">,</span>          <span class="token property">"gender"</span> <span class="token operator">:</span> <span class="token string">"M"</span><span class="token punctuation">,</span>          <span class="token property">"address"</span> <span class="token operator">:</span> <span class="token string">"699 Visitation Place"</span><span class="token punctuation">,</span>          <span class="token property">"employer"</span> <span class="token operator">:</span> <span class="token string">"Glasstep"</span><span class="token punctuation">,</span>          <span class="token property">"email"</span> <span class="token operator">:</span> <span class="token string">"janburns@glasstep.com"</span><span class="token punctuation">,</span>          <span class="token property">"city"</span> <span class="token operator">:</span> <span class="token string">"Wakulla"</span><span class="token punctuation">,</span>          <span class="token property">"state"</span> <span class="token operator">:</span> <span class="token string">"AZ"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"sort"</span> <span class="token operator">:</span> <span class="token punctuation">[</span>          <span class="token number">8</span>        <span class="token punctuation">]</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        <span class="token property">"_index"</span> <span class="token operator">:</span> <span class="token string">"bank"</span><span class="token punctuation">,</span>        <span class="token property">"_type"</span> <span class="token operator">:</span> <span class="token string">"account"</span><span class="token punctuation">,</span>        <span class="token property">"_id"</span> <span class="token operator">:</span> <span class="token string">"9"</span><span class="token punctuation">,</span>        <span class="token property">"_score"</span> <span class="token operator">:</span> <span class="token null">null</span><span class="token punctuation">,</span>        <span class="token property">"_source"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token property">"account_number"</span> <span class="token operator">:</span> <span class="token number">9</span><span class="token punctuation">,</span>          <span class="token property">"balance"</span> <span class="token operator">:</span> <span class="token number">24776</span><span class="token punctuation">,</span>          <span class="token property">"firstname"</span> <span class="token operator">:</span> <span class="token string">"Opal"</span><span class="token punctuation">,</span>          <span class="token property">"lastname"</span> <span class="token operator">:</span> <span class="token string">"Meadows"</span><span class="token punctuation">,</span>          <span class="token property">"age"</span> <span class="token operator">:</span> <span class="token number">39</span><span class="token punctuation">,</span>          <span class="token property">"gender"</span> <span class="token operator">:</span> <span class="token string">"M"</span><span class="token punctuation">,</span>          <span class="token property">"address"</span> <span class="token operator">:</span> <span class="token string">"963 Neptune Avenue"</span><span class="token punctuation">,</span>          <span class="token property">"employer"</span> <span class="token operator">:</span> <span class="token string">"Cedward"</span><span class="token punctuation">,</span>          <span class="token property">"email"</span> <span class="token operator">:</span> <span class="token string">"opalmeadows@cedward.com"</span><span class="token punctuation">,</span>          <span class="token property">"city"</span> <span class="token operator">:</span> <span class="token string">"Olney"</span><span class="token punctuation">,</span>          <span class="token property">"state"</span> <span class="token operator">:</span> <span class="token string">"OH"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"sort"</span> <span class="token operator">:</span> <span class="token punctuation">[</span>          <span class="token number">9</span>        <span class="token punctuation">]</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>（1）只有6条数据，这是因为存在分页查询；</p><p>使用<code>from</code>和<code>size</code>可以指定查询</p><pre class=" language-http"><code class="language-http">GET /bank/_search{  "query": { "match_all": {} },  "sort": [    { "account_number": "asc" },    {"balance":"desc"}  ],  "from": 20,  "size": 10}</code></pre><p>（2）详细的字段信息，参照： <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/getting-started-search.html">https://www.elastic.co/guide/en/elasticsearch/reference/current/getting-started-search.html</a> </p><blockquote><p>The response also provides the following information about the search request:</p><ul><li><code>took</code> – how long it took Elasticsearch to run the query, in milliseconds</li><li><code>timed_out</code> – whether or not the search request timed out</li><li><code>_shards</code> – how many shards were searched and a breakdown of how many shards succeeded, failed, or were skipped.</li><li><code>max_score</code> – the score of the most relevant document found</li><li><code>hits.total.value</code> - how many matching documents were found</li><li><code>hits.sort</code> - the document’s sort position (when not sorting by relevance score)</li><li><code>hits._score</code> - the document’s relevance score (not applicable when using <code>match_all</code>)</li></ul></blockquote><h4 id="2）Query-DSL"><a href="#2）Query-DSL" class="headerlink" title="2）Query DSL"></a>2）Query DSL</h4><h5 id="（1）基本语法格式"><a href="#（1）基本语法格式" class="headerlink" title="（1）基本语法格式"></a>（1）基本语法格式</h5><p>Elasticsearch提供了一个可以执行查询的Json风格的DSL。这个被称为Query DSL，该查询语言非常全面。</p><p>一个查询语句的典型结构</p><pre class=" language-json"><code class="language-json">QUERY_NAME<span class="token operator">:</span><span class="token punctuation">{</span>   ARGUMENT<span class="token operator">:</span>VALUE<span class="token punctuation">,</span>   ARGUMENT<span class="token operator">:</span>VALUE<span class="token punctuation">,</span>...<span class="token punctuation">}</span></code></pre><p>如果针对于某个字段，那么它的结构如下：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  QUERY_NAME<span class="token operator">:</span><span class="token punctuation">{</span>     FIELD_NAME<span class="token operator">:</span><span class="token punctuation">{</span>       ARGUMENT<span class="token operator">:</span>VALUE<span class="token punctuation">,</span>       ARGUMENT<span class="token operator">:</span>VALUE<span class="token punctuation">,</span>...      <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-json"><code class="language-json">GET bank/_search<span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"match_all"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"from"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token property">"size"</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>  <span class="token property">"sort"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      <span class="token property">"account_number"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"order"</span><span class="token operator">:</span> <span class="token string">"desc"</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><p>query定义如何查询；</p><ul><li>match_all查询类型【代表查询所有的所有】，es中可以在query中组合非常多的查询类型完成复杂查询；</li><li>除了query参数之外，我们可也传递其他的参数以改变查询结果，如sort，size；</li><li>from+size限定，完成分页功能；</li><li>sort排序，多字段排序，会在前序字段相等时后续字段内部排序，否则以前序为准；</li></ul><h5 id="（2）返回部分字段"><a href="#（2）返回部分字段" class="headerlink" title="（2）返回部分字段"></a>（2）返回部分字段</h5><pre class=" language-json"><code class="language-json">GET bank/_search<span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"match_all"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"from"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token property">"size"</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>  <span class="token property">"sort"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      <span class="token property">"account_number"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"order"</span><span class="token operator">:</span> <span class="token string">"desc"</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"balance"</span><span class="token punctuation">,</span><span class="token string">"firstname"</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span></code></pre><p>查询结果：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"took"</span> <span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>  <span class="token property">"timed_out"</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token property">"_shards"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"total"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token property">"successful"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token property">"skipped"</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token property">"failed"</span> <span class="token operator">:</span> <span class="token number">0</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"hits"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"total"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"value"</span> <span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">,</span>      <span class="token property">"relation"</span> <span class="token operator">:</span> <span class="token string">"eq"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"max_score"</span> <span class="token operator">:</span> <span class="token null">null</span><span class="token punctuation">,</span>    <span class="token property">"hits"</span> <span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        <span class="token property">"_index"</span> <span class="token operator">:</span> <span class="token string">"bank"</span><span class="token punctuation">,</span>        <span class="token property">"_type"</span> <span class="token operator">:</span> <span class="token string">"account"</span><span class="token punctuation">,</span>        <span class="token property">"_id"</span> <span class="token operator">:</span> <span class="token string">"999"</span><span class="token punctuation">,</span>        <span class="token property">"_score"</span> <span class="token operator">:</span> <span class="token null">null</span><span class="token punctuation">,</span>        <span class="token property">"_source"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token property">"firstname"</span> <span class="token operator">:</span> <span class="token string">"Dorothy"</span><span class="token punctuation">,</span>          <span class="token property">"balance"</span> <span class="token operator">:</span> <span class="token number">6087</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"sort"</span> <span class="token operator">:</span> <span class="token punctuation">[</span>          <span class="token number">999</span>        <span class="token punctuation">]</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        <span class="token property">"_index"</span> <span class="token operator">:</span> <span class="token string">"bank"</span><span class="token punctuation">,</span>        <span class="token property">"_type"</span> <span class="token operator">:</span> <span class="token string">"account"</span><span class="token punctuation">,</span>        <span class="token property">"_id"</span> <span class="token operator">:</span> <span class="token string">"998"</span><span class="token punctuation">,</span>        <span class="token property">"_score"</span> <span class="token operator">:</span> <span class="token null">null</span><span class="token punctuation">,</span>        <span class="token property">"_source"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token property">"firstname"</span> <span class="token operator">:</span> <span class="token string">"Letha"</span><span class="token punctuation">,</span>          <span class="token property">"balance"</span> <span class="token operator">:</span> <span class="token number">16869</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"sort"</span> <span class="token operator">:</span> <span class="token punctuation">[</span>          <span class="token number">998</span>        <span class="token punctuation">]</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        <span class="token property">"_index"</span> <span class="token operator">:</span> <span class="token string">"bank"</span><span class="token punctuation">,</span>        <span class="token property">"_type"</span> <span class="token operator">:</span> <span class="token string">"account"</span><span class="token punctuation">,</span>        <span class="token property">"_id"</span> <span class="token operator">:</span> <span class="token string">"997"</span><span class="token punctuation">,</span>        <span class="token property">"_score"</span> <span class="token operator">:</span> <span class="token null">null</span><span class="token punctuation">,</span>        <span class="token property">"_source"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token property">"firstname"</span> <span class="token operator">:</span> <span class="token string">"Combs"</span><span class="token punctuation">,</span>          <span class="token property">"balance"</span> <span class="token operator">:</span> <span class="token number">25311</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"sort"</span> <span class="token operator">:</span> <span class="token punctuation">[</span>          <span class="token number">997</span>        <span class="token punctuation">]</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        <span class="token property">"_index"</span> <span class="token operator">:</span> <span class="token string">"bank"</span><span class="token punctuation">,</span>        <span class="token property">"_type"</span> <span class="token operator">:</span> <span class="token string">"account"</span><span class="token punctuation">,</span>        <span class="token property">"_id"</span> <span class="token operator">:</span> <span class="token string">"996"</span><span class="token punctuation">,</span>        <span class="token property">"_score"</span> <span class="token operator">:</span> <span class="token null">null</span><span class="token punctuation">,</span>        <span class="token property">"_source"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token property">"firstname"</span> <span class="token operator">:</span> <span class="token string">"Andrews"</span><span class="token punctuation">,</span>          <span class="token property">"balance"</span> <span class="token operator">:</span> <span class="token number">17541</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"sort"</span> <span class="token operator">:</span> <span class="token punctuation">[</span>          <span class="token number">996</span>        <span class="token punctuation">]</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        <span class="token property">"_index"</span> <span class="token operator">:</span> <span class="token string">"bank"</span><span class="token punctuation">,</span>        <span class="token property">"_type"</span> <span class="token operator">:</span> <span class="token string">"account"</span><span class="token punctuation">,</span>        <span class="token property">"_id"</span> <span class="token operator">:</span> <span class="token string">"995"</span><span class="token punctuation">,</span>        <span class="token property">"_score"</span> <span class="token operator">:</span> <span class="token null">null</span><span class="token punctuation">,</span>        <span class="token property">"_source"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token property">"firstname"</span> <span class="token operator">:</span> <span class="token string">"Phelps"</span><span class="token punctuation">,</span>          <span class="token property">"balance"</span> <span class="token operator">:</span> <span class="token number">21153</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"sort"</span> <span class="token operator">:</span> <span class="token punctuation">[</span>          <span class="token number">995</span>        <span class="token punctuation">]</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="（3）match匹配查询"><a href="#（3）match匹配查询" class="headerlink" title="（3）match匹配查询"></a>（3）match匹配查询</h5><ul><li>基本类型（非字符串），精确控制</li></ul><pre class=" language-json"><code class="language-json">GET bank/_search<span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"match"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"account_number"</span><span class="token operator">:</span> <span class="token string">"20"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>match返回account_number=20的数据。</p><p>查询结果：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"took"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token property">"timed_out"</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token property">"_shards"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"total"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token property">"successful"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token property">"skipped"</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token property">"failed"</span> <span class="token operator">:</span> <span class="token number">0</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"hits"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"total"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"value"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>      <span class="token property">"relation"</span> <span class="token operator">:</span> <span class="token string">"eq"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"max_score"</span> <span class="token operator">:</span> <span class="token number">1.0</span><span class="token punctuation">,</span>    <span class="token property">"hits"</span> <span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        <span class="token property">"_index"</span> <span class="token operator">:</span> <span class="token string">"bank"</span><span class="token punctuation">,</span>        <span class="token property">"_type"</span> <span class="token operator">:</span> <span class="token string">"account"</span><span class="token punctuation">,</span>        <span class="token property">"_id"</span> <span class="token operator">:</span> <span class="token string">"20"</span><span class="token punctuation">,</span>        <span class="token property">"_score"</span> <span class="token operator">:</span> <span class="token number">1.0</span><span class="token punctuation">,</span>        <span class="token property">"_source"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token property">"account_number"</span> <span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span>          <span class="token property">"balance"</span> <span class="token operator">:</span> <span class="token number">16418</span><span class="token punctuation">,</span>          <span class="token property">"firstname"</span> <span class="token operator">:</span> <span class="token string">"Elinor"</span><span class="token punctuation">,</span>          <span class="token property">"lastname"</span> <span class="token operator">:</span> <span class="token string">"Ratliff"</span><span class="token punctuation">,</span>          <span class="token property">"age"</span> <span class="token operator">:</span> <span class="token number">36</span><span class="token punctuation">,</span>          <span class="token property">"gender"</span> <span class="token operator">:</span> <span class="token string">"M"</span><span class="token punctuation">,</span>          <span class="token property">"address"</span> <span class="token operator">:</span> <span class="token string">"282 Kings Place"</span><span class="token punctuation">,</span>          <span class="token property">"employer"</span> <span class="token operator">:</span> <span class="token string">"Scentric"</span><span class="token punctuation">,</span>          <span class="token property">"email"</span> <span class="token operator">:</span> <span class="token string">"elinorratliff@scentric.com"</span><span class="token punctuation">,</span>          <span class="token property">"city"</span> <span class="token operator">:</span> <span class="token string">"Ribera"</span><span class="token punctuation">,</span>          <span class="token property">"state"</span> <span class="token operator">:</span> <span class="token string">"WA"</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>字符串，全文检索</li></ul><pre class=" language-json"><code class="language-json">GET bank/_search<span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"match"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"address"</span><span class="token operator">:</span> <span class="token string">"kings"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>全文检索，最终会按照评分进行排序，会对检索条件进行分词匹配。</p><p>查询结果：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"took"</span> <span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span>  <span class="token property">"timed_out"</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token property">"_shards"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"total"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token property">"successful"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token property">"skipped"</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token property">"failed"</span> <span class="token operator">:</span> <span class="token number">0</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"hits"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"total"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"value"</span> <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>      <span class="token property">"relation"</span> <span class="token operator">:</span> <span class="token string">"eq"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"max_score"</span> <span class="token operator">:</span> <span class="token number">5.990829</span><span class="token punctuation">,</span>    <span class="token property">"hits"</span> <span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        <span class="token property">"_index"</span> <span class="token operator">:</span> <span class="token string">"bank"</span><span class="token punctuation">,</span>        <span class="token property">"_type"</span> <span class="token operator">:</span> <span class="token string">"account"</span><span class="token punctuation">,</span>        <span class="token property">"_id"</span> <span class="token operator">:</span> <span class="token string">"20"</span><span class="token punctuation">,</span>        <span class="token property">"_score"</span> <span class="token operator">:</span> <span class="token number">5.990829</span><span class="token punctuation">,</span>        <span class="token property">"_source"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token property">"account_number"</span> <span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span>          <span class="token property">"balance"</span> <span class="token operator">:</span> <span class="token number">16418</span><span class="token punctuation">,</span>          <span class="token property">"firstname"</span> <span class="token operator">:</span> <span class="token string">"Elinor"</span><span class="token punctuation">,</span>          <span class="token property">"lastname"</span> <span class="token operator">:</span> <span class="token string">"Ratliff"</span><span class="token punctuation">,</span>          <span class="token property">"age"</span> <span class="token operator">:</span> <span class="token number">36</span><span class="token punctuation">,</span>          <span class="token property">"gender"</span> <span class="token operator">:</span> <span class="token string">"M"</span><span class="token punctuation">,</span>          <span class="token property">"address"</span> <span class="token operator">:</span> <span class="token string">"282 Kings Place"</span><span class="token punctuation">,</span>          <span class="token property">"employer"</span> <span class="token operator">:</span> <span class="token string">"Scentric"</span><span class="token punctuation">,</span>          <span class="token property">"email"</span> <span class="token operator">:</span> <span class="token string">"elinorratliff@scentric.com"</span><span class="token punctuation">,</span>          <span class="token property">"city"</span> <span class="token operator">:</span> <span class="token string">"Ribera"</span><span class="token punctuation">,</span>          <span class="token property">"state"</span> <span class="token operator">:</span> <span class="token string">"WA"</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        <span class="token property">"_index"</span> <span class="token operator">:</span> <span class="token string">"bank"</span><span class="token punctuation">,</span>        <span class="token property">"_type"</span> <span class="token operator">:</span> <span class="token string">"account"</span><span class="token punctuation">,</span>        <span class="token property">"_id"</span> <span class="token operator">:</span> <span class="token string">"722"</span><span class="token punctuation">,</span>        <span class="token property">"_score"</span> <span class="token operator">:</span> <span class="token number">5.990829</span><span class="token punctuation">,</span>        <span class="token property">"_source"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token property">"account_number"</span> <span class="token operator">:</span> <span class="token number">722</span><span class="token punctuation">,</span>          <span class="token property">"balance"</span> <span class="token operator">:</span> <span class="token number">27256</span><span class="token punctuation">,</span>          <span class="token property">"firstname"</span> <span class="token operator">:</span> <span class="token string">"Roberts"</span><span class="token punctuation">,</span>          <span class="token property">"lastname"</span> <span class="token operator">:</span> <span class="token string">"Beasley"</span><span class="token punctuation">,</span>          <span class="token property">"age"</span> <span class="token operator">:</span> <span class="token number">34</span><span class="token punctuation">,</span>          <span class="token property">"gender"</span> <span class="token operator">:</span> <span class="token string">"F"</span><span class="token punctuation">,</span>          <span class="token property">"address"</span> <span class="token operator">:</span> <span class="token string">"305 Kings Hwy"</span><span class="token punctuation">,</span>          <span class="token property">"employer"</span> <span class="token operator">:</span> <span class="token string">"Quintity"</span><span class="token punctuation">,</span>          <span class="token property">"email"</span> <span class="token operator">:</span> <span class="token string">"robertsbeasley@quintity.com"</span><span class="token punctuation">,</span>          <span class="token property">"city"</span> <span class="token operator">:</span> <span class="token string">"Hayden"</span><span class="token punctuation">,</span>          <span class="token property">"state"</span> <span class="token operator">:</span> <span class="token string">"PA"</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="（4）-match-phrase-短句匹配"><a href="#（4）-match-phrase-短句匹配" class="headerlink" title="（4） match_phrase [短句匹配]"></a>（4） match_phrase [短句匹配]</h5><p>将需要匹配的值当成一整个单词（不分词）进行检索</p><pre class=" language-json"><code class="language-json">GET bank/_search<span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"match_phrase"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"address"</span><span class="token operator">:</span> <span class="token string">"mill road"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>查处address中包含mill_road的所有记录，并给出相关性得分</p><p>查看结果：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"took"</span> <span class="token operator">:</span> <span class="token number">32</span><span class="token punctuation">,</span>  <span class="token property">"timed_out"</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token property">"_shards"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"total"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token property">"successful"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token property">"skipped"</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token property">"failed"</span> <span class="token operator">:</span> <span class="token number">0</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"hits"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"total"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"value"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>      <span class="token property">"relation"</span> <span class="token operator">:</span> <span class="token string">"eq"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"max_score"</span> <span class="token operator">:</span> <span class="token number">8.926605</span><span class="token punctuation">,</span>    <span class="token property">"hits"</span> <span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        <span class="token property">"_index"</span> <span class="token operator">:</span> <span class="token string">"bank"</span><span class="token punctuation">,</span>        <span class="token property">"_type"</span> <span class="token operator">:</span> <span class="token string">"account"</span><span class="token punctuation">,</span>        <span class="token property">"_id"</span> <span class="token operator">:</span> <span class="token string">"970"</span><span class="token punctuation">,</span>        <span class="token property">"_score"</span> <span class="token operator">:</span> <span class="token number">8.926605</span><span class="token punctuation">,</span>        <span class="token property">"_source"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token property">"account_number"</span> <span class="token operator">:</span> <span class="token number">970</span><span class="token punctuation">,</span>          <span class="token property">"balance"</span> <span class="token operator">:</span> <span class="token number">19648</span><span class="token punctuation">,</span>          <span class="token property">"firstname"</span> <span class="token operator">:</span> <span class="token string">"Forbes"</span><span class="token punctuation">,</span>          <span class="token property">"lastname"</span> <span class="token operator">:</span> <span class="token string">"Wallace"</span><span class="token punctuation">,</span>          <span class="token property">"age"</span> <span class="token operator">:</span> <span class="token number">28</span><span class="token punctuation">,</span>          <span class="token property">"gender"</span> <span class="token operator">:</span> <span class="token string">"M"</span><span class="token punctuation">,</span>          <span class="token property">"address"</span> <span class="token operator">:</span> <span class="token string">"990 Mill Road"</span><span class="token punctuation">,</span>          <span class="token property">"employer"</span> <span class="token operator">:</span> <span class="token string">"Pheast"</span><span class="token punctuation">,</span>          <span class="token property">"email"</span> <span class="token operator">:</span> <span class="token string">"forbeswallace@pheast.com"</span><span class="token punctuation">,</span>          <span class="token property">"city"</span> <span class="token operator">:</span> <span class="token string">"Lopezo"</span><span class="token punctuation">,</span>          <span class="token property">"state"</span> <span class="token operator">:</span> <span class="token string">"AK"</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>match_phrase和Match的区别，观察如下实例：</p><pre class=" language-json"><code class="language-json">GET bank/_search<span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"match_phrase"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"address"</span><span class="token operator">:</span> <span class="token string">"990 Mill"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>查询结果：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"took"</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token property">"timed_out"</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token property">"_shards"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"total"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token property">"successful"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token property">"skipped"</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token property">"failed"</span> <span class="token operator">:</span> <span class="token number">0</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"hits"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"total"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"value"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>      <span class="token property">"relation"</span> <span class="token operator">:</span> <span class="token string">"eq"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"max_score"</span> <span class="token operator">:</span> <span class="token number">10.806405</span><span class="token punctuation">,</span>    <span class="token property">"hits"</span> <span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        <span class="token property">"_index"</span> <span class="token operator">:</span> <span class="token string">"bank"</span><span class="token punctuation">,</span>        <span class="token property">"_type"</span> <span class="token operator">:</span> <span class="token string">"account"</span><span class="token punctuation">,</span>        <span class="token property">"_id"</span> <span class="token operator">:</span> <span class="token string">"970"</span><span class="token punctuation">,</span>        <span class="token property">"_score"</span> <span class="token operator">:</span> <span class="token number">10.806405</span><span class="token punctuation">,</span>        <span class="token property">"_source"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token property">"account_number"</span> <span class="token operator">:</span> <span class="token number">970</span><span class="token punctuation">,</span>          <span class="token property">"balance"</span> <span class="token operator">:</span> <span class="token number">19648</span><span class="token punctuation">,</span>          <span class="token property">"firstname"</span> <span class="token operator">:</span> <span class="token string">"Forbes"</span><span class="token punctuation">,</span>          <span class="token property">"lastname"</span> <span class="token operator">:</span> <span class="token string">"Wallace"</span><span class="token punctuation">,</span>          <span class="token property">"age"</span> <span class="token operator">:</span> <span class="token number">28</span><span class="token punctuation">,</span>          <span class="token property">"gender"</span> <span class="token operator">:</span> <span class="token string">"M"</span><span class="token punctuation">,</span>          <span class="token property">"address"</span> <span class="token operator">:</span> <span class="token string">"990 Mill Road"</span><span class="token punctuation">,</span>          <span class="token property">"employer"</span> <span class="token operator">:</span> <span class="token string">"Pheast"</span><span class="token punctuation">,</span>          <span class="token property">"email"</span> <span class="token operator">:</span> <span class="token string">"forbeswallace@pheast.com"</span><span class="token punctuation">,</span>          <span class="token property">"city"</span> <span class="token operator">:</span> <span class="token string">"Lopezo"</span><span class="token punctuation">,</span>          <span class="token property">"state"</span> <span class="token operator">:</span> <span class="token string">"AK"</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>使用match的keyword</p><pre class=" language-json"><code class="language-json">GET bank/_search<span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"match"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"address.keyword"</span><span class="token operator">:</span> <span class="token string">"990 Mill"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>查询结果，一条也未匹配到</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"took"</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token property">"timed_out"</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token property">"_shards"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"total"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token property">"successful"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token property">"skipped"</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token property">"failed"</span> <span class="token operator">:</span> <span class="token number">0</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"hits"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"total"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"value"</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>      <span class="token property">"relation"</span> <span class="token operator">:</span> <span class="token string">"eq"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"max_score"</span> <span class="token operator">:</span> <span class="token null">null</span><span class="token punctuation">,</span>    <span class="token property">"hits"</span> <span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>修改匹配条件为“990 Mill Road”</p><pre class=" language-json"><code class="language-json">GET bank/_search<span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"match"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"address.keyword"</span><span class="token operator">:</span> <span class="token string">"990 Mill Road"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>查询出一条数据</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"took"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token property">"timed_out"</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token property">"_shards"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"total"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token property">"successful"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token property">"skipped"</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token property">"failed"</span> <span class="token operator">:</span> <span class="token number">0</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"hits"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"total"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"value"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>      <span class="token property">"relation"</span> <span class="token operator">:</span> <span class="token string">"eq"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"max_score"</span> <span class="token operator">:</span> <span class="token number">6.5032897</span><span class="token punctuation">,</span>    <span class="token property">"hits"</span> <span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        <span class="token property">"_index"</span> <span class="token operator">:</span> <span class="token string">"bank"</span><span class="token punctuation">,</span>        <span class="token property">"_type"</span> <span class="token operator">:</span> <span class="token string">"account"</span><span class="token punctuation">,</span>        <span class="token property">"_id"</span> <span class="token operator">:</span> <span class="token string">"970"</span><span class="token punctuation">,</span>        <span class="token property">"_score"</span> <span class="token operator">:</span> <span class="token number">6.5032897</span><span class="token punctuation">,</span>        <span class="token property">"_source"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token property">"account_number"</span> <span class="token operator">:</span> <span class="token number">970</span><span class="token punctuation">,</span>          <span class="token property">"balance"</span> <span class="token operator">:</span> <span class="token number">19648</span><span class="token punctuation">,</span>          <span class="token property">"firstname"</span> <span class="token operator">:</span> <span class="token string">"Forbes"</span><span class="token punctuation">,</span>          <span class="token property">"lastname"</span> <span class="token operator">:</span> <span class="token string">"Wallace"</span><span class="token punctuation">,</span>          <span class="token property">"age"</span> <span class="token operator">:</span> <span class="token number">28</span><span class="token punctuation">,</span>          <span class="token property">"gender"</span> <span class="token operator">:</span> <span class="token string">"M"</span><span class="token punctuation">,</span>          <span class="token property">"address"</span> <span class="token operator">:</span> <span class="token string">"990 Mill Road"</span><span class="token punctuation">,</span>          <span class="token property">"employer"</span> <span class="token operator">:</span> <span class="token string">"Pheast"</span><span class="token punctuation">,</span>          <span class="token property">"email"</span> <span class="token operator">:</span> <span class="token string">"forbeswallace@pheast.com"</span><span class="token punctuation">,</span>          <span class="token property">"city"</span> <span class="token operator">:</span> <span class="token string">"Lopezo"</span><span class="token punctuation">,</span>          <span class="token property">"state"</span> <span class="token operator">:</span> <span class="token string">"AK"</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>文本字段的匹配，使用keyword，匹配的条件就是要显示字段的全部值，要进行精确匹配的。</p><p>match_phrase是做短语匹配，只要文本中包含匹配条件，就能匹配到。</p><h5 id="（5）multi-math【多字段匹配】"><a href="#（5）multi-math【多字段匹配】" class="headerlink" title="（5）multi_math【多字段匹配】"></a>（5）multi_math【多字段匹配】</h5><pre class=" language-json"><code class="language-json">GET bank/_search<span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"multi_match"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"query"</span><span class="token operator">:</span> <span class="token string">"mill"</span><span class="token punctuation">,</span>      <span class="token property">"fields"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token string">"state"</span><span class="token punctuation">,</span>        <span class="token string">"address"</span>      <span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>state或者address中包含mill，并且在查询过程中，会对于查询条件进行分词。</p><p>查询结果：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"took"</span> <span class="token operator">:</span> <span class="token number">28</span><span class="token punctuation">,</span>  <span class="token property">"timed_out"</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token property">"_shards"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"total"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token property">"successful"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token property">"skipped"</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token property">"failed"</span> <span class="token operator">:</span> <span class="token number">0</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"hits"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"total"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"value"</span> <span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>      <span class="token property">"relation"</span> <span class="token operator">:</span> <span class="token string">"eq"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"max_score"</span> <span class="token operator">:</span> <span class="token number">5.4032025</span><span class="token punctuation">,</span>    <span class="token property">"hits"</span> <span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        <span class="token property">"_index"</span> <span class="token operator">:</span> <span class="token string">"bank"</span><span class="token punctuation">,</span>        <span class="token property">"_type"</span> <span class="token operator">:</span> <span class="token string">"account"</span><span class="token punctuation">,</span>        <span class="token property">"_id"</span> <span class="token operator">:</span> <span class="token string">"970"</span><span class="token punctuation">,</span>        <span class="token property">"_score"</span> <span class="token operator">:</span> <span class="token number">5.4032025</span><span class="token punctuation">,</span>        <span class="token property">"_source"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token property">"account_number"</span> <span class="token operator">:</span> <span class="token number">970</span><span class="token punctuation">,</span>          <span class="token property">"balance"</span> <span class="token operator">:</span> <span class="token number">19648</span><span class="token punctuation">,</span>          <span class="token property">"firstname"</span> <span class="token operator">:</span> <span class="token string">"Forbes"</span><span class="token punctuation">,</span>          <span class="token property">"lastname"</span> <span class="token operator">:</span> <span class="token string">"Wallace"</span><span class="token punctuation">,</span>          <span class="token property">"age"</span> <span class="token operator">:</span> <span class="token number">28</span><span class="token punctuation">,</span>          <span class="token property">"gender"</span> <span class="token operator">:</span> <span class="token string">"M"</span><span class="token punctuation">,</span>          <span class="token property">"address"</span> <span class="token operator">:</span> <span class="token string">"990 Mill Road"</span><span class="token punctuation">,</span>          <span class="token property">"employer"</span> <span class="token operator">:</span> <span class="token string">"Pheast"</span><span class="token punctuation">,</span>          <span class="token property">"email"</span> <span class="token operator">:</span> <span class="token string">"forbeswallace@pheast.com"</span><span class="token punctuation">,</span>          <span class="token property">"city"</span> <span class="token operator">:</span> <span class="token string">"Lopezo"</span><span class="token punctuation">,</span>          <span class="token property">"state"</span> <span class="token operator">:</span> <span class="token string">"AK"</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        <span class="token property">"_index"</span> <span class="token operator">:</span> <span class="token string">"bank"</span><span class="token punctuation">,</span>        <span class="token property">"_type"</span> <span class="token operator">:</span> <span class="token string">"account"</span><span class="token punctuation">,</span>        <span class="token property">"_id"</span> <span class="token operator">:</span> <span class="token string">"136"</span><span class="token punctuation">,</span>        <span class="token property">"_score"</span> <span class="token operator">:</span> <span class="token number">5.4032025</span><span class="token punctuation">,</span>        <span class="token property">"_source"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token property">"account_number"</span> <span class="token operator">:</span> <span class="token number">136</span><span class="token punctuation">,</span>          <span class="token property">"balance"</span> <span class="token operator">:</span> <span class="token number">45801</span><span class="token punctuation">,</span>          <span class="token property">"firstname"</span> <span class="token operator">:</span> <span class="token string">"Winnie"</span><span class="token punctuation">,</span>          <span class="token property">"lastname"</span> <span class="token operator">:</span> <span class="token string">"Holland"</span><span class="token punctuation">,</span>          <span class="token property">"age"</span> <span class="token operator">:</span> <span class="token number">38</span><span class="token punctuation">,</span>          <span class="token property">"gender"</span> <span class="token operator">:</span> <span class="token string">"M"</span><span class="token punctuation">,</span>          <span class="token property">"address"</span> <span class="token operator">:</span> <span class="token string">"198 Mill Lane"</span><span class="token punctuation">,</span>          <span class="token property">"employer"</span> <span class="token operator">:</span> <span class="token string">"Neteria"</span><span class="token punctuation">,</span>          <span class="token property">"email"</span> <span class="token operator">:</span> <span class="token string">"winnieholland@neteria.com"</span><span class="token punctuation">,</span>          <span class="token property">"city"</span> <span class="token operator">:</span> <span class="token string">"Urie"</span><span class="token punctuation">,</span>          <span class="token property">"state"</span> <span class="token operator">:</span> <span class="token string">"IL"</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        <span class="token property">"_index"</span> <span class="token operator">:</span> <span class="token string">"bank"</span><span class="token punctuation">,</span>        <span class="token property">"_type"</span> <span class="token operator">:</span> <span class="token string">"account"</span><span class="token punctuation">,</span>        <span class="token property">"_id"</span> <span class="token operator">:</span> <span class="token string">"345"</span><span class="token punctuation">,</span>        <span class="token property">"_score"</span> <span class="token operator">:</span> <span class="token number">5.4032025</span><span class="token punctuation">,</span>        <span class="token property">"_source"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token property">"account_number"</span> <span class="token operator">:</span> <span class="token number">345</span><span class="token punctuation">,</span>          <span class="token property">"balance"</span> <span class="token operator">:</span> <span class="token number">9812</span><span class="token punctuation">,</span>          <span class="token property">"firstname"</span> <span class="token operator">:</span> <span class="token string">"Parker"</span><span class="token punctuation">,</span>          <span class="token property">"lastname"</span> <span class="token operator">:</span> <span class="token string">"Hines"</span><span class="token punctuation">,</span>          <span class="token property">"age"</span> <span class="token operator">:</span> <span class="token number">38</span><span class="token punctuation">,</span>          <span class="token property">"gender"</span> <span class="token operator">:</span> <span class="token string">"M"</span><span class="token punctuation">,</span>          <span class="token property">"address"</span> <span class="token operator">:</span> <span class="token string">"715 Mill Avenue"</span><span class="token punctuation">,</span>          <span class="token property">"employer"</span> <span class="token operator">:</span> <span class="token string">"Baluba"</span><span class="token punctuation">,</span>          <span class="token property">"email"</span> <span class="token operator">:</span> <span class="token string">"parkerhines@baluba.com"</span><span class="token punctuation">,</span>          <span class="token property">"city"</span> <span class="token operator">:</span> <span class="token string">"Blackgum"</span><span class="token punctuation">,</span>          <span class="token property">"state"</span> <span class="token operator">:</span> <span class="token string">"KY"</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        <span class="token property">"_index"</span> <span class="token operator">:</span> <span class="token string">"bank"</span><span class="token punctuation">,</span>        <span class="token property">"_type"</span> <span class="token operator">:</span> <span class="token string">"account"</span><span class="token punctuation">,</span>        <span class="token property">"_id"</span> <span class="token operator">:</span> <span class="token string">"472"</span><span class="token punctuation">,</span>        <span class="token property">"_score"</span> <span class="token operator">:</span> <span class="token number">5.4032025</span><span class="token punctuation">,</span>        <span class="token property">"_source"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token property">"account_number"</span> <span class="token operator">:</span> <span class="token number">472</span><span class="token punctuation">,</span>          <span class="token property">"balance"</span> <span class="token operator">:</span> <span class="token number">25571</span><span class="token punctuation">,</span>          <span class="token property">"firstname"</span> <span class="token operator">:</span> <span class="token string">"Lee"</span><span class="token punctuation">,</span>          <span class="token property">"lastname"</span> <span class="token operator">:</span> <span class="token string">"Long"</span><span class="token punctuation">,</span>          <span class="token property">"age"</span> <span class="token operator">:</span> <span class="token number">32</span><span class="token punctuation">,</span>          <span class="token property">"gender"</span> <span class="token operator">:</span> <span class="token string">"F"</span><span class="token punctuation">,</span>          <span class="token property">"address"</span> <span class="token operator">:</span> <span class="token string">"288 Mill Street"</span><span class="token punctuation">,</span>          <span class="token property">"employer"</span> <span class="token operator">:</span> <span class="token string">"Comverges"</span><span class="token punctuation">,</span>          <span class="token property">"email"</span> <span class="token operator">:</span> <span class="token string">"leelong@comverges.com"</span><span class="token punctuation">,</span>          <span class="token property">"city"</span> <span class="token operator">:</span> <span class="token string">"Movico"</span><span class="token punctuation">,</span>          <span class="token property">"state"</span> <span class="token operator">:</span> <span class="token string">"MT"</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="（6）bool用来做复合查询"><a href="#（6）bool用来做复合查询" class="headerlink" title="（6）bool用来做复合查询"></a>（6）bool用来做复合查询</h5><p>复合语句可以合并，任何其他查询语句，包括符合语句。这也就意味着，复合语句之间<br>可以互相嵌套，可以表达非常复杂的逻辑。</p><p>must：必须达到must所列举的所有条件</p><pre class=" language-json"><code class="language-json">GET bank/_search<span class="token punctuation">{</span>   <span class="token property">"query"</span><span class="token operator">:</span><span class="token punctuation">{</span>        <span class="token property">"bool"</span><span class="token operator">:</span><span class="token punctuation">{</span>             <span class="token property">"must"</span><span class="token operator">:</span><span class="token punctuation">[</span>              <span class="token punctuation">{</span><span class="token property">"match"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">"address"</span><span class="token operator">:</span><span class="token string">"mill"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>              <span class="token punctuation">{</span><span class="token property">"match"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">"gender"</span><span class="token operator">:</span><span class="token string">"M"</span><span class="token punctuation">}</span><span class="token punctuation">}</span>             <span class="token punctuation">]</span>         <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>must_not，必须不匹配must_not所列举的所有条件。</p><p>should，应该满足should所列举的条件。</p><p>实例：查询gender=m，并且address=mill的数据</p><pre class=" language-json"><code class="language-json">GET bank/_search<span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"bool"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"must"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>          <span class="token property">"match"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"gender"</span><span class="token operator">:</span> <span class="token string">"M"</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>          <span class="token property">"match"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"address"</span><span class="token operator">:</span> <span class="token string">"mill"</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>查询结果：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"took"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token property">"timed_out"</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token property">"_shards"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"total"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token property">"successful"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token property">"skipped"</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token property">"failed"</span> <span class="token operator">:</span> <span class="token number">0</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"hits"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"total"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"value"</span> <span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>      <span class="token property">"relation"</span> <span class="token operator">:</span> <span class="token string">"eq"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"max_score"</span> <span class="token operator">:</span> <span class="token number">6.0824604</span><span class="token punctuation">,</span>    <span class="token property">"hits"</span> <span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        <span class="token property">"_index"</span> <span class="token operator">:</span> <span class="token string">"bank"</span><span class="token punctuation">,</span>        <span class="token property">"_type"</span> <span class="token operator">:</span> <span class="token string">"account"</span><span class="token punctuation">,</span>        <span class="token property">"_id"</span> <span class="token operator">:</span> <span class="token string">"970"</span><span class="token punctuation">,</span>        <span class="token property">"_score"</span> <span class="token operator">:</span> <span class="token number">6.0824604</span><span class="token punctuation">,</span>        <span class="token property">"_source"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token property">"account_number"</span> <span class="token operator">:</span> <span class="token number">970</span><span class="token punctuation">,</span>          <span class="token property">"balance"</span> <span class="token operator">:</span> <span class="token number">19648</span><span class="token punctuation">,</span>          <span class="token property">"firstname"</span> <span class="token operator">:</span> <span class="token string">"Forbes"</span><span class="token punctuation">,</span>          <span class="token property">"lastname"</span> <span class="token operator">:</span> <span class="token string">"Wallace"</span><span class="token punctuation">,</span>          <span class="token property">"age"</span> <span class="token operator">:</span> <span class="token number">28</span><span class="token punctuation">,</span>          <span class="token property">"gender"</span> <span class="token operator">:</span> <span class="token string">"M"</span><span class="token punctuation">,</span>          <span class="token property">"address"</span> <span class="token operator">:</span> <span class="token string">"990 Mill Road"</span><span class="token punctuation">,</span>          <span class="token property">"employer"</span> <span class="token operator">:</span> <span class="token string">"Pheast"</span><span class="token punctuation">,</span>          <span class="token property">"email"</span> <span class="token operator">:</span> <span class="token string">"forbeswallace@pheast.com"</span><span class="token punctuation">,</span>          <span class="token property">"city"</span> <span class="token operator">:</span> <span class="token string">"Lopezo"</span><span class="token punctuation">,</span>          <span class="token property">"state"</span> <span class="token operator">:</span> <span class="token string">"AK"</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        <span class="token property">"_index"</span> <span class="token operator">:</span> <span class="token string">"bank"</span><span class="token punctuation">,</span>        <span class="token property">"_type"</span> <span class="token operator">:</span> <span class="token string">"account"</span><span class="token punctuation">,</span>        <span class="token property">"_id"</span> <span class="token operator">:</span> <span class="token string">"136"</span><span class="token punctuation">,</span>        <span class="token property">"_score"</span> <span class="token operator">:</span> <span class="token number">6.0824604</span><span class="token punctuation">,</span>        <span class="token property">"_source"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token property">"account_number"</span> <span class="token operator">:</span> <span class="token number">136</span><span class="token punctuation">,</span>          <span class="token property">"balance"</span> <span class="token operator">:</span> <span class="token number">45801</span><span class="token punctuation">,</span>          <span class="token property">"firstname"</span> <span class="token operator">:</span> <span class="token string">"Winnie"</span><span class="token punctuation">,</span>          <span class="token property">"lastname"</span> <span class="token operator">:</span> <span class="token string">"Holland"</span><span class="token punctuation">,</span>          <span class="token property">"age"</span> <span class="token operator">:</span> <span class="token number">38</span><span class="token punctuation">,</span>          <span class="token property">"gender"</span> <span class="token operator">:</span> <span class="token string">"M"</span><span class="token punctuation">,</span>          <span class="token property">"address"</span> <span class="token operator">:</span> <span class="token string">"198 Mill Lane"</span><span class="token punctuation">,</span>          <span class="token property">"employer"</span> <span class="token operator">:</span> <span class="token string">"Neteria"</span><span class="token punctuation">,</span>          <span class="token property">"email"</span> <span class="token operator">:</span> <span class="token string">"winnieholland@neteria.com"</span><span class="token punctuation">,</span>          <span class="token property">"city"</span> <span class="token operator">:</span> <span class="token string">"Urie"</span><span class="token punctuation">,</span>          <span class="token property">"state"</span> <span class="token operator">:</span> <span class="token string">"IL"</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        <span class="token property">"_index"</span> <span class="token operator">:</span> <span class="token string">"bank"</span><span class="token punctuation">,</span>        <span class="token property">"_type"</span> <span class="token operator">:</span> <span class="token string">"account"</span><span class="token punctuation">,</span>        <span class="token property">"_id"</span> <span class="token operator">:</span> <span class="token string">"345"</span><span class="token punctuation">,</span>        <span class="token property">"_score"</span> <span class="token operator">:</span> <span class="token number">6.0824604</span><span class="token punctuation">,</span>        <span class="token property">"_source"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token property">"account_number"</span> <span class="token operator">:</span> <span class="token number">345</span><span class="token punctuation">,</span>          <span class="token property">"balance"</span> <span class="token operator">:</span> <span class="token number">9812</span><span class="token punctuation">,</span>          <span class="token property">"firstname"</span> <span class="token operator">:</span> <span class="token string">"Parker"</span><span class="token punctuation">,</span>          <span class="token property">"lastname"</span> <span class="token operator">:</span> <span class="token string">"Hines"</span><span class="token punctuation">,</span>          <span class="token property">"age"</span> <span class="token operator">:</span> <span class="token number">38</span><span class="token punctuation">,</span>          <span class="token property">"gender"</span> <span class="token operator">:</span> <span class="token string">"M"</span><span class="token punctuation">,</span>          <span class="token property">"address"</span> <span class="token operator">:</span> <span class="token string">"715 Mill Avenue"</span><span class="token punctuation">,</span>          <span class="token property">"employer"</span> <span class="token operator">:</span> <span class="token string">"Baluba"</span><span class="token punctuation">,</span>          <span class="token property">"email"</span> <span class="token operator">:</span> <span class="token string">"parkerhines@baluba.com"</span><span class="token punctuation">,</span>          <span class="token property">"city"</span> <span class="token operator">:</span> <span class="token string">"Blackgum"</span><span class="token punctuation">,</span>          <span class="token property">"state"</span> <span class="token operator">:</span> <span class="token string">"KY"</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>must_not：必须不是指定的情况</strong></p><p>实例：查询gender=m，并且address=mill的数据，但是age不等于38的</p><pre class=" language-json"><code class="language-json">GET bank/_search<span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"bool"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"must"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>          <span class="token property">"match"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"gender"</span><span class="token operator">:</span> <span class="token string">"M"</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>          <span class="token property">"match"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"address"</span><span class="token operator">:</span> <span class="token string">"mill"</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token property">"must_not"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>          <span class="token property">"match"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"age"</span><span class="token operator">:</span> <span class="token string">"38"</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><p>查询结果：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"took"</span> <span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>  <span class="token property">"timed_out"</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token property">"_shards"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"total"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token property">"successful"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token property">"skipped"</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token property">"failed"</span> <span class="token operator">:</span> <span class="token number">0</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"hits"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"total"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"value"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>      <span class="token property">"relation"</span> <span class="token operator">:</span> <span class="token string">"eq"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"max_score"</span> <span class="token operator">:</span> <span class="token number">6.0824604</span><span class="token punctuation">,</span>    <span class="token property">"hits"</span> <span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        <span class="token property">"_index"</span> <span class="token operator">:</span> <span class="token string">"bank"</span><span class="token punctuation">,</span>        <span class="token property">"_type"</span> <span class="token operator">:</span> <span class="token string">"account"</span><span class="token punctuation">,</span>        <span class="token property">"_id"</span> <span class="token operator">:</span> <span class="token string">"970"</span><span class="token punctuation">,</span>        <span class="token property">"_score"</span> <span class="token operator">:</span> <span class="token number">6.0824604</span><span class="token punctuation">,</span>        <span class="token property">"_source"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token property">"account_number"</span> <span class="token operator">:</span> <span class="token number">970</span><span class="token punctuation">,</span>          <span class="token property">"balance"</span> <span class="token operator">:</span> <span class="token number">19648</span><span class="token punctuation">,</span>          <span class="token property">"firstname"</span> <span class="token operator">:</span> <span class="token string">"Forbes"</span><span class="token punctuation">,</span>          <span class="token property">"lastname"</span> <span class="token operator">:</span> <span class="token string">"Wallace"</span><span class="token punctuation">,</span>          <span class="token property">"age"</span> <span class="token operator">:</span> <span class="token number">28</span><span class="token punctuation">,</span>          <span class="token property">"gender"</span> <span class="token operator">:</span> <span class="token string">"M"</span><span class="token punctuation">,</span>          <span class="token property">"address"</span> <span class="token operator">:</span> <span class="token string">"990 Mill Road"</span><span class="token punctuation">,</span>          <span class="token property">"employer"</span> <span class="token operator">:</span> <span class="token string">"Pheast"</span><span class="token punctuation">,</span>          <span class="token property">"email"</span> <span class="token operator">:</span> <span class="token string">"forbeswallace@pheast.com"</span><span class="token punctuation">,</span>          <span class="token property">"city"</span> <span class="token operator">:</span> <span class="token string">"Lopezo"</span><span class="token punctuation">,</span>          <span class="token property">"state"</span> <span class="token operator">:</span> <span class="token string">"AK"</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>should：应该达到should列举的条件，如果到达会增加相关文档的评分，并不会改变查询的结果。如果query中只有should且只有一种匹配规则，那么should的条件就会被作为默认匹配条件二区改变查询结果。</strong></p><p>实例：匹配lastName应该等于Wallace的数据</p><pre class=" language-json"><code class="language-json">GET bank/_search<span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"bool"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"must"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>          <span class="token property">"match"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"gender"</span><span class="token operator">:</span> <span class="token string">"M"</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>          <span class="token property">"match"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"address"</span><span class="token operator">:</span> <span class="token string">"mill"</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token property">"must_not"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>          <span class="token property">"match"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"age"</span><span class="token operator">:</span> <span class="token string">"18"</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token property">"should"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>          <span class="token property">"match"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"lastname"</span><span class="token operator">:</span> <span class="token string">"Wallace"</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>查询结果：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"took"</span> <span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>  <span class="token property">"timed_out"</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token property">"_shards"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"total"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token property">"successful"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token property">"skipped"</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token property">"failed"</span> <span class="token operator">:</span> <span class="token number">0</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"hits"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"total"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"value"</span> <span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>      <span class="token property">"relation"</span> <span class="token operator">:</span> <span class="token string">"eq"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"max_score"</span> <span class="token operator">:</span> <span class="token number">12.585751</span><span class="token punctuation">,</span>    <span class="token property">"hits"</span> <span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        <span class="token property">"_index"</span> <span class="token operator">:</span> <span class="token string">"bank"</span><span class="token punctuation">,</span>        <span class="token property">"_type"</span> <span class="token operator">:</span> <span class="token string">"account"</span><span class="token punctuation">,</span>        <span class="token property">"_id"</span> <span class="token operator">:</span> <span class="token string">"970"</span><span class="token punctuation">,</span>        <span class="token property">"_score"</span> <span class="token operator">:</span> <span class="token number">12.585751</span><span class="token punctuation">,</span>        <span class="token property">"_source"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token property">"account_number"</span> <span class="token operator">:</span> <span class="token number">970</span><span class="token punctuation">,</span>          <span class="token property">"balance"</span> <span class="token operator">:</span> <span class="token number">19648</span><span class="token punctuation">,</span>          <span class="token property">"firstname"</span> <span class="token operator">:</span> <span class="token string">"Forbes"</span><span class="token punctuation">,</span>          <span class="token property">"lastname"</span> <span class="token operator">:</span> <span class="token string">"Wallace"</span><span class="token punctuation">,</span>          <span class="token property">"age"</span> <span class="token operator">:</span> <span class="token number">28</span><span class="token punctuation">,</span>          <span class="token property">"gender"</span> <span class="token operator">:</span> <span class="token string">"M"</span><span class="token punctuation">,</span>          <span class="token property">"address"</span> <span class="token operator">:</span> <span class="token string">"990 Mill Road"</span><span class="token punctuation">,</span>          <span class="token property">"employer"</span> <span class="token operator">:</span> <span class="token string">"Pheast"</span><span class="token punctuation">,</span>          <span class="token property">"email"</span> <span class="token operator">:</span> <span class="token string">"forbeswallace@pheast.com"</span><span class="token punctuation">,</span>          <span class="token property">"city"</span> <span class="token operator">:</span> <span class="token string">"Lopezo"</span><span class="token punctuation">,</span>          <span class="token property">"state"</span> <span class="token operator">:</span> <span class="token string">"AK"</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        <span class="token property">"_index"</span> <span class="token operator">:</span> <span class="token string">"bank"</span><span class="token punctuation">,</span>        <span class="token property">"_type"</span> <span class="token operator">:</span> <span class="token string">"account"</span><span class="token punctuation">,</span>        <span class="token property">"_id"</span> <span class="token operator">:</span> <span class="token string">"136"</span><span class="token punctuation">,</span>        <span class="token property">"_score"</span> <span class="token operator">:</span> <span class="token number">6.0824604</span><span class="token punctuation">,</span>        <span class="token property">"_source"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token property">"account_number"</span> <span class="token operator">:</span> <span class="token number">136</span><span class="token punctuation">,</span>          <span class="token property">"balance"</span> <span class="token operator">:</span> <span class="token number">45801</span><span class="token punctuation">,</span>          <span class="token property">"firstname"</span> <span class="token operator">:</span> <span class="token string">"Winnie"</span><span class="token punctuation">,</span>          <span class="token property">"lastname"</span> <span class="token operator">:</span> <span class="token string">"Holland"</span><span class="token punctuation">,</span>          <span class="token property">"age"</span> <span class="token operator">:</span> <span class="token number">38</span><span class="token punctuation">,</span>          <span class="token property">"gender"</span> <span class="token operator">:</span> <span class="token string">"M"</span><span class="token punctuation">,</span>          <span class="token property">"address"</span> <span class="token operator">:</span> <span class="token string">"198 Mill Lane"</span><span class="token punctuation">,</span>          <span class="token property">"employer"</span> <span class="token operator">:</span> <span class="token string">"Neteria"</span><span class="token punctuation">,</span>          <span class="token property">"email"</span> <span class="token operator">:</span> <span class="token string">"winnieholland@neteria.com"</span><span class="token punctuation">,</span>          <span class="token property">"city"</span> <span class="token operator">:</span> <span class="token string">"Urie"</span><span class="token punctuation">,</span>          <span class="token property">"state"</span> <span class="token operator">:</span> <span class="token string">"IL"</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        <span class="token property">"_index"</span> <span class="token operator">:</span> <span class="token string">"bank"</span><span class="token punctuation">,</span>        <span class="token property">"_type"</span> <span class="token operator">:</span> <span class="token string">"account"</span><span class="token punctuation">,</span>        <span class="token property">"_id"</span> <span class="token operator">:</span> <span class="token string">"345"</span><span class="token punctuation">,</span>        <span class="token property">"_score"</span> <span class="token operator">:</span> <span class="token number">6.0824604</span><span class="token punctuation">,</span>        <span class="token property">"_source"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token property">"account_number"</span> <span class="token operator">:</span> <span class="token number">345</span><span class="token punctuation">,</span>          <span class="token property">"balance"</span> <span class="token operator">:</span> <span class="token number">9812</span><span class="token punctuation">,</span>          <span class="token property">"firstname"</span> <span class="token operator">:</span> <span class="token string">"Parker"</span><span class="token punctuation">,</span>          <span class="token property">"lastname"</span> <span class="token operator">:</span> <span class="token string">"Hines"</span><span class="token punctuation">,</span>          <span class="token property">"age"</span> <span class="token operator">:</span> <span class="token number">38</span><span class="token punctuation">,</span>          <span class="token property">"gender"</span> <span class="token operator">:</span> <span class="token string">"M"</span><span class="token punctuation">,</span>          <span class="token property">"address"</span> <span class="token operator">:</span> <span class="token string">"715 Mill Avenue"</span><span class="token punctuation">,</span>          <span class="token property">"employer"</span> <span class="token operator">:</span> <span class="token string">"Baluba"</span><span class="token punctuation">,</span>          <span class="token property">"email"</span> <span class="token operator">:</span> <span class="token string">"parkerhines@baluba.com"</span><span class="token punctuation">,</span>          <span class="token property">"city"</span> <span class="token operator">:</span> <span class="token string">"Blackgum"</span><span class="token punctuation">,</span>          <span class="token property">"state"</span> <span class="token operator">:</span> <span class="token string">"KY"</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>能够看到相关度越高，得分也越高。</p><h5 id="（7）Filter【结果过滤】"><a href="#（7）Filter【结果过滤】" class="headerlink" title="（7）Filter【结果过滤】"></a>（7）Filter【结果过滤】</h5><p>并不是所有的查询都需要产生分数，特别是哪些仅用于filtering过滤的文档。为了不计算分数，elasticsearch会自动检查场景并且优化查询的执行。</p><pre class=" language-json"><code class="language-json">GET bank/_search<span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"bool"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"must"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>          <span class="token property">"match"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"address"</span><span class="token operator">:</span> <span class="token string">"mill"</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token property">"filter"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"range"</span><span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token property">"balance"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"gte"</span><span class="token operator">:</span> <span class="token string">"10000"</span><span class="token punctuation">,</span>            <span class="token property">"lte"</span><span class="token operator">:</span> <span class="token string">"20000"</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这里先是查询所有匹配address=mill的文档，然后再根据10000&lt;=balance&lt;=20000进行过滤查询结果</p><p>查询结果：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"took"</span> <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token property">"timed_out"</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token property">"_shards"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"total"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token property">"successful"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token property">"skipped"</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token property">"failed"</span> <span class="token operator">:</span> <span class="token number">0</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"hits"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"total"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"value"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>      <span class="token property">"relation"</span> <span class="token operator">:</span> <span class="token string">"eq"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"max_score"</span> <span class="token operator">:</span> <span class="token number">5.4032025</span><span class="token punctuation">,</span>    <span class="token property">"hits"</span> <span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        <span class="token property">"_index"</span> <span class="token operator">:</span> <span class="token string">"bank"</span><span class="token punctuation">,</span>        <span class="token property">"_type"</span> <span class="token operator">:</span> <span class="token string">"account"</span><span class="token punctuation">,</span>        <span class="token property">"_id"</span> <span class="token operator">:</span> <span class="token string">"970"</span><span class="token punctuation">,</span>        <span class="token property">"_score"</span> <span class="token operator">:</span> <span class="token number">5.4032025</span><span class="token punctuation">,</span>        <span class="token property">"_source"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token property">"account_number"</span> <span class="token operator">:</span> <span class="token number">970</span><span class="token punctuation">,</span>          <span class="token property">"balance"</span> <span class="token operator">:</span> <span class="token number">19648</span><span class="token punctuation">,</span>          <span class="token property">"firstname"</span> <span class="token operator">:</span> <span class="token string">"Forbes"</span><span class="token punctuation">,</span>          <span class="token property">"lastname"</span> <span class="token operator">:</span> <span class="token string">"Wallace"</span><span class="token punctuation">,</span>          <span class="token property">"age"</span> <span class="token operator">:</span> <span class="token number">28</span><span class="token punctuation">,</span>          <span class="token property">"gender"</span> <span class="token operator">:</span> <span class="token string">"M"</span><span class="token punctuation">,</span>          <span class="token property">"address"</span> <span class="token operator">:</span> <span class="token string">"990 Mill Road"</span><span class="token punctuation">,</span>          <span class="token property">"employer"</span> <span class="token operator">:</span> <span class="token string">"Pheast"</span><span class="token punctuation">,</span>          <span class="token property">"email"</span> <span class="token operator">:</span> <span class="token string">"forbeswallace@pheast.com"</span><span class="token punctuation">,</span>          <span class="token property">"city"</span> <span class="token operator">:</span> <span class="token string">"Lopezo"</span><span class="token punctuation">,</span>          <span class="token property">"state"</span> <span class="token operator">:</span> <span class="token string">"AK"</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Each <code>must</code>, <code>should</code>, and <code>must_not</code> element in a Boolean query is referred to as a query clause. How well a document meets the criteria in each <code>must</code> or <code>should</code> clause contributes to the document’s <em>relevance score</em>. The higher the score, the better the document matches your search criteria. By default, Elasticsearch returns documents ranked by these relevance scores.</p><p> 在boolean查询中，<code>must</code>, <code>should</code> 和<code>must_not</code> 元素都被称为查询子句 。 文档是否符合每个“must”或“should”子句中的标准，决定了文档的“相关性得分”。  得分越高，文档越符合您的搜索条件。  默认情况下，Elasticsearch返回根据这些相关性得分排序的文档。 </p><p>The criteria in a <code>must_not</code> clause is treated as a <em>filter</em>. It affects whether or not the document is included in the results, but does not contribute to how documents are scored. You can also explicitly specify arbitrary filters to include or exclude documents based on structured data.</p><p><code>“must_not”子句中的条件被视为“过滤器”。</code> 它影响文档是否包含在结果中，  但不影响文档的评分方式。  还可以显式地指定任意过滤器来包含或排除基于结构化数据的文档。 </p><p>filter在使用过程中，并不会计算相关性得分：</p><pre class=" language-json"><code class="language-json">GET bank/_search<span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"bool"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"must"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>          <span class="token property">"match"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"address"</span><span class="token operator">:</span> <span class="token string">"mill"</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token property">"filter"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"range"</span><span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token property">"balance"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"gte"</span><span class="token operator">:</span> <span class="token string">"10000"</span><span class="token punctuation">,</span>            <span class="token property">"lte"</span><span class="token operator">:</span> <span class="token string">"20000"</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>查询结果：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"took"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token property">"timed_out"</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token property">"_shards"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"total"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token property">"successful"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token property">"skipped"</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token property">"failed"</span> <span class="token operator">:</span> <span class="token number">0</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"hits"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"total"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"value"</span> <span class="token operator">:</span> <span class="token number">213</span><span class="token punctuation">,</span>      <span class="token property">"relation"</span> <span class="token operator">:</span> <span class="token string">"eq"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"max_score"</span> <span class="token operator">:</span> <span class="token number">0.0</span><span class="token punctuation">,</span>    <span class="token property">"hits"</span> <span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        <span class="token property">"_index"</span> <span class="token operator">:</span> <span class="token string">"bank"</span><span class="token punctuation">,</span>        <span class="token property">"_type"</span> <span class="token operator">:</span> <span class="token string">"account"</span><span class="token punctuation">,</span>        <span class="token property">"_id"</span> <span class="token operator">:</span> <span class="token string">"20"</span><span class="token punctuation">,</span>        <span class="token property">"_score"</span> <span class="token operator">:</span> <span class="token number">0.0</span><span class="token punctuation">,</span>        <span class="token property">"_source"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token property">"account_number"</span> <span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span>          <span class="token property">"balance"</span> <span class="token operator">:</span> <span class="token number">16418</span><span class="token punctuation">,</span>          <span class="token property">"firstname"</span> <span class="token operator">:</span> <span class="token string">"Elinor"</span><span class="token punctuation">,</span>          <span class="token property">"lastname"</span> <span class="token operator">:</span> <span class="token string">"Ratliff"</span><span class="token punctuation">,</span>          <span class="token property">"age"</span> <span class="token operator">:</span> <span class="token number">36</span><span class="token punctuation">,</span>          <span class="token property">"gender"</span> <span class="token operator">:</span> <span class="token string">"M"</span><span class="token punctuation">,</span>          <span class="token property">"address"</span> <span class="token operator">:</span> <span class="token string">"282 Kings Place"</span><span class="token punctuation">,</span>          <span class="token property">"employer"</span> <span class="token operator">:</span> <span class="token string">"Scentric"</span><span class="token punctuation">,</span>          <span class="token property">"email"</span> <span class="token operator">:</span> <span class="token string">"elinorratliff@scentric.com"</span><span class="token punctuation">,</span>          <span class="token property">"city"</span> <span class="token operator">:</span> <span class="token string">"Ribera"</span><span class="token punctuation">,</span>          <span class="token property">"state"</span> <span class="token operator">:</span> <span class="token string">"WA"</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        <span class="token property">"_index"</span> <span class="token operator">:</span> <span class="token string">"bank"</span><span class="token punctuation">,</span>        <span class="token property">"_type"</span> <span class="token operator">:</span> <span class="token string">"account"</span><span class="token punctuation">,</span>        <span class="token property">"_id"</span> <span class="token operator">:</span> <span class="token string">"37"</span><span class="token punctuation">,</span>        <span class="token property">"_score"</span> <span class="token operator">:</span> <span class="token number">0.0</span><span class="token punctuation">,</span>        <span class="token property">"_source"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token property">"account_number"</span> <span class="token operator">:</span> <span class="token number">37</span><span class="token punctuation">,</span>          <span class="token property">"balance"</span> <span class="token operator">:</span> <span class="token number">18612</span><span class="token punctuation">,</span>          <span class="token property">"firstname"</span> <span class="token operator">:</span> <span class="token string">"Mcgee"</span><span class="token punctuation">,</span>          <span class="token property">"lastname"</span> <span class="token operator">:</span> <span class="token string">"Mooney"</span><span class="token punctuation">,</span>          <span class="token property">"age"</span> <span class="token operator">:</span> <span class="token number">39</span><span class="token punctuation">,</span>          <span class="token property">"gender"</span> <span class="token operator">:</span> <span class="token string">"M"</span><span class="token punctuation">,</span>          <span class="token property">"address"</span> <span class="token operator">:</span> <span class="token string">"826 Fillmore Place"</span><span class="token punctuation">,</span>          <span class="token property">"employer"</span> <span class="token operator">:</span> <span class="token string">"Reversus"</span><span class="token punctuation">,</span>          <span class="token property">"email"</span> <span class="token operator">:</span> <span class="token string">"mcgeemooney@reversus.com"</span><span class="token punctuation">,</span>          <span class="token property">"city"</span> <span class="token operator">:</span> <span class="token string">"Tooleville"</span><span class="token punctuation">,</span>          <span class="token property">"state"</span> <span class="token operator">:</span> <span class="token string">"OK"</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        <span class="token property">"_index"</span> <span class="token operator">:</span> <span class="token string">"bank"</span><span class="token punctuation">,</span>        <span class="token property">"_type"</span> <span class="token operator">:</span> <span class="token string">"account"</span><span class="token punctuation">,</span>        <span class="token property">"_id"</span> <span class="token operator">:</span> <span class="token string">"51"</span><span class="token punctuation">,</span>        <span class="token property">"_score"</span> <span class="token operator">:</span> <span class="token number">0.0</span><span class="token punctuation">,</span>        <span class="token property">"_source"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token property">"account_number"</span> <span class="token operator">:</span> <span class="token number">51</span><span class="token punctuation">,</span>          <span class="token property">"balance"</span> <span class="token operator">:</span> <span class="token number">14097</span><span class="token punctuation">,</span>          <span class="token property">"firstname"</span> <span class="token operator">:</span> <span class="token string">"Burton"</span><span class="token punctuation">,</span>          <span class="token property">"lastname"</span> <span class="token operator">:</span> <span class="token string">"Meyers"</span><span class="token punctuation">,</span>          <span class="token property">"age"</span> <span class="token operator">:</span> <span class="token number">31</span><span class="token punctuation">,</span>          <span class="token property">"gender"</span> <span class="token operator">:</span> <span class="token string">"F"</span><span class="token punctuation">,</span>          <span class="token property">"address"</span> <span class="token operator">:</span> <span class="token string">"334 River Street"</span><span class="token punctuation">,</span>          <span class="token property">"employer"</span> <span class="token operator">:</span> <span class="token string">"Bezal"</span><span class="token punctuation">,</span>          <span class="token property">"email"</span> <span class="token operator">:</span> <span class="token string">"burtonmeyers@bezal.com"</span><span class="token punctuation">,</span>          <span class="token property">"city"</span> <span class="token operator">:</span> <span class="token string">"Jacksonburg"</span><span class="token punctuation">,</span>          <span class="token property">"state"</span> <span class="token operator">:</span> <span class="token string">"MO"</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        <span class="token property">"_index"</span> <span class="token operator">:</span> <span class="token string">"bank"</span><span class="token punctuation">,</span>        <span class="token property">"_type"</span> <span class="token operator">:</span> <span class="token string">"account"</span><span class="token punctuation">,</span>        <span class="token property">"_id"</span> <span class="token operator">:</span> <span class="token string">"56"</span><span class="token punctuation">,</span>        <span class="token property">"_score"</span> <span class="token operator">:</span> <span class="token number">0.0</span><span class="token punctuation">,</span>        <span class="token property">"_source"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token property">"account_number"</span> <span class="token operator">:</span> <span class="token number">56</span><span class="token punctuation">,</span>          <span class="token property">"balance"</span> <span class="token operator">:</span> <span class="token number">14992</span><span class="token punctuation">,</span>          <span class="token property">"firstname"</span> <span class="token operator">:</span> <span class="token string">"Josie"</span><span class="token punctuation">,</span>          <span class="token property">"lastname"</span> <span class="token operator">:</span> <span class="token string">"Nelson"</span><span class="token punctuation">,</span>          <span class="token property">"age"</span> <span class="token operator">:</span> <span class="token number">32</span><span class="token punctuation">,</span>          <span class="token property">"gender"</span> <span class="token operator">:</span> <span class="token string">"M"</span><span class="token punctuation">,</span>          <span class="token property">"address"</span> <span class="token operator">:</span> <span class="token string">"857 Tabor Court"</span><span class="token punctuation">,</span>          <span class="token property">"employer"</span> <span class="token operator">:</span> <span class="token string">"Emtrac"</span><span class="token punctuation">,</span>          <span class="token property">"email"</span> <span class="token operator">:</span> <span class="token string">"josienelson@emtrac.com"</span><span class="token punctuation">,</span>          <span class="token property">"city"</span> <span class="token operator">:</span> <span class="token string">"Sunnyside"</span><span class="token punctuation">,</span>          <span class="token property">"state"</span> <span class="token operator">:</span> <span class="token string">"UT"</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        <span class="token property">"_index"</span> <span class="token operator">:</span> <span class="token string">"bank"</span><span class="token punctuation">,</span>        <span class="token property">"_type"</span> <span class="token operator">:</span> <span class="token string">"account"</span><span class="token punctuation">,</span>        <span class="token property">"_id"</span> <span class="token operator">:</span> <span class="token string">"121"</span><span class="token punctuation">,</span>        <span class="token property">"_score"</span> <span class="token operator">:</span> <span class="token number">0.0</span><span class="token punctuation">,</span>        <span class="token property">"_source"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token property">"account_number"</span> <span class="token operator">:</span> <span class="token number">121</span><span class="token punctuation">,</span>          <span class="token property">"balance"</span> <span class="token operator">:</span> <span class="token number">19594</span><span class="token punctuation">,</span>          <span class="token property">"firstname"</span> <span class="token operator">:</span> <span class="token string">"Acevedo"</span><span class="token punctuation">,</span>          <span class="token property">"lastname"</span> <span class="token operator">:</span> <span class="token string">"Dorsey"</span><span class="token punctuation">,</span>          <span class="token property">"age"</span> <span class="token operator">:</span> <span class="token number">32</span><span class="token punctuation">,</span>          <span class="token property">"gender"</span> <span class="token operator">:</span> <span class="token string">"M"</span><span class="token punctuation">,</span>          <span class="token property">"address"</span> <span class="token operator">:</span> <span class="token string">"479 Nova Court"</span><span class="token punctuation">,</span>          <span class="token property">"employer"</span> <span class="token operator">:</span> <span class="token string">"Netropic"</span><span class="token punctuation">,</span>          <span class="token property">"email"</span> <span class="token operator">:</span> <span class="token string">"acevedodorsey@netropic.com"</span><span class="token punctuation">,</span>          <span class="token property">"city"</span> <span class="token operator">:</span> <span class="token string">"Islandia"</span><span class="token punctuation">,</span>          <span class="token property">"state"</span> <span class="token operator">:</span> <span class="token string">"CT"</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        <span class="token property">"_index"</span> <span class="token operator">:</span> <span class="token string">"bank"</span><span class="token punctuation">,</span>        <span class="token property">"_type"</span> <span class="token operator">:</span> <span class="token string">"account"</span><span class="token punctuation">,</span>        <span class="token property">"_id"</span> <span class="token operator">:</span> <span class="token string">"176"</span><span class="token punctuation">,</span>        <span class="token property">"_score"</span> <span class="token operator">:</span> <span class="token number">0.0</span><span class="token punctuation">,</span>        <span class="token property">"_source"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token property">"account_number"</span> <span class="token operator">:</span> <span class="token number">176</span><span class="token punctuation">,</span>          <span class="token property">"balance"</span> <span class="token operator">:</span> <span class="token number">18607</span><span class="token punctuation">,</span>          <span class="token property">"firstname"</span> <span class="token operator">:</span> <span class="token string">"Kemp"</span><span class="token punctuation">,</span>          <span class="token property">"lastname"</span> <span class="token operator">:</span> <span class="token string">"Walters"</span><span class="token punctuation">,</span>          <span class="token property">"age"</span> <span class="token operator">:</span> <span class="token number">28</span><span class="token punctuation">,</span>          <span class="token property">"gender"</span> <span class="token operator">:</span> <span class="token string">"F"</span><span class="token punctuation">,</span>          <span class="token property">"address"</span> <span class="token operator">:</span> <span class="token string">"906 Howard Avenue"</span><span class="token punctuation">,</span>          <span class="token property">"employer"</span> <span class="token operator">:</span> <span class="token string">"Eyewax"</span><span class="token punctuation">,</span>          <span class="token property">"email"</span> <span class="token operator">:</span> <span class="token string">"kempwalters@eyewax.com"</span><span class="token punctuation">,</span>          <span class="token property">"city"</span> <span class="token operator">:</span> <span class="token string">"Why"</span><span class="token punctuation">,</span>          <span class="token property">"state"</span> <span class="token operator">:</span> <span class="token string">"KY"</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        <span class="token property">"_index"</span> <span class="token operator">:</span> <span class="token string">"bank"</span><span class="token punctuation">,</span>        <span class="token property">"_type"</span> <span class="token operator">:</span> <span class="token string">"account"</span><span class="token punctuation">,</span>        <span class="token property">"_id"</span> <span class="token operator">:</span> <span class="token string">"183"</span><span class="token punctuation">,</span>        <span class="token property">"_score"</span> <span class="token operator">:</span> <span class="token number">0.0</span><span class="token punctuation">,</span>        <span class="token property">"_source"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token property">"account_number"</span> <span class="token operator">:</span> <span class="token number">183</span><span class="token punctuation">,</span>          <span class="token property">"balance"</span> <span class="token operator">:</span> <span class="token number">14223</span><span class="token punctuation">,</span>          <span class="token property">"firstname"</span> <span class="token operator">:</span> <span class="token string">"Hudson"</span><span class="token punctuation">,</span>          <span class="token property">"lastname"</span> <span class="token operator">:</span> <span class="token string">"English"</span><span class="token punctuation">,</span>          <span class="token property">"age"</span> <span class="token operator">:</span> <span class="token number">26</span><span class="token punctuation">,</span>          <span class="token property">"gender"</span> <span class="token operator">:</span> <span class="token string">"F"</span><span class="token punctuation">,</span>          <span class="token property">"address"</span> <span class="token operator">:</span> <span class="token string">"823 Herkimer Place"</span><span class="token punctuation">,</span>          <span class="token property">"employer"</span> <span class="token operator">:</span> <span class="token string">"Xinware"</span><span class="token punctuation">,</span>          <span class="token property">"email"</span> <span class="token operator">:</span> <span class="token string">"hudsonenglish@xinware.com"</span><span class="token punctuation">,</span>          <span class="token property">"city"</span> <span class="token operator">:</span> <span class="token string">"Robbins"</span><span class="token punctuation">,</span>          <span class="token property">"state"</span> <span class="token operator">:</span> <span class="token string">"ND"</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        <span class="token property">"_index"</span> <span class="token operator">:</span> <span class="token string">"bank"</span><span class="token punctuation">,</span>        <span class="token property">"_type"</span> <span class="token operator">:</span> <span class="token string">"account"</span><span class="token punctuation">,</span>        <span class="token property">"_id"</span> <span class="token operator">:</span> <span class="token string">"222"</span><span class="token punctuation">,</span>        <span class="token property">"_score"</span> <span class="token operator">:</span> <span class="token number">0.0</span><span class="token punctuation">,</span>        <span class="token property">"_source"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token property">"account_number"</span> <span class="token operator">:</span> <span class="token number">222</span><span class="token punctuation">,</span>          <span class="token property">"balance"</span> <span class="token operator">:</span> <span class="token number">14764</span><span class="token punctuation">,</span>          <span class="token property">"firstname"</span> <span class="token operator">:</span> <span class="token string">"Rachelle"</span><span class="token punctuation">,</span>          <span class="token property">"lastname"</span> <span class="token operator">:</span> <span class="token string">"Rice"</span><span class="token punctuation">,</span>          <span class="token property">"age"</span> <span class="token operator">:</span> <span class="token number">36</span><span class="token punctuation">,</span>          <span class="token property">"gender"</span> <span class="token operator">:</span> <span class="token string">"M"</span><span class="token punctuation">,</span>          <span class="token property">"address"</span> <span class="token operator">:</span> <span class="token string">"333 Narrows Avenue"</span><span class="token punctuation">,</span>          <span class="token property">"employer"</span> <span class="token operator">:</span> <span class="token string">"Enaut"</span><span class="token punctuation">,</span>          <span class="token property">"email"</span> <span class="token operator">:</span> <span class="token string">"rachellerice@enaut.com"</span><span class="token punctuation">,</span>          <span class="token property">"city"</span> <span class="token operator">:</span> <span class="token string">"Wright"</span><span class="token punctuation">,</span>          <span class="token property">"state"</span> <span class="token operator">:</span> <span class="token string">"AZ"</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        <span class="token property">"_index"</span> <span class="token operator">:</span> <span class="token string">"bank"</span><span class="token punctuation">,</span>        <span class="token property">"_type"</span> <span class="token operator">:</span> <span class="token string">"account"</span><span class="token punctuation">,</span>        <span class="token property">"_id"</span> <span class="token operator">:</span> <span class="token string">"227"</span><span class="token punctuation">,</span>        <span class="token property">"_score"</span> <span class="token operator">:</span> <span class="token number">0.0</span><span class="token punctuation">,</span>        <span class="token property">"_source"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token property">"account_number"</span> <span class="token operator">:</span> <span class="token number">227</span><span class="token punctuation">,</span>          <span class="token property">"balance"</span> <span class="token operator">:</span> <span class="token number">19780</span><span class="token punctuation">,</span>          <span class="token property">"firstname"</span> <span class="token operator">:</span> <span class="token string">"Coleman"</span><span class="token punctuation">,</span>          <span class="token property">"lastname"</span> <span class="token operator">:</span> <span class="token string">"Berg"</span><span class="token punctuation">,</span>          <span class="token property">"age"</span> <span class="token operator">:</span> <span class="token number">22</span><span class="token punctuation">,</span>          <span class="token property">"gender"</span> <span class="token operator">:</span> <span class="token string">"M"</span><span class="token punctuation">,</span>          <span class="token property">"address"</span> <span class="token operator">:</span> <span class="token string">"776 Little Street"</span><span class="token punctuation">,</span>          <span class="token property">"employer"</span> <span class="token operator">:</span> <span class="token string">"Exoteric"</span><span class="token punctuation">,</span>          <span class="token property">"email"</span> <span class="token operator">:</span> <span class="token string">"colemanberg@exoteric.com"</span><span class="token punctuation">,</span>          <span class="token property">"city"</span> <span class="token operator">:</span> <span class="token string">"Eagleville"</span><span class="token punctuation">,</span>          <span class="token property">"state"</span> <span class="token operator">:</span> <span class="token string">"WV"</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        <span class="token property">"_index"</span> <span class="token operator">:</span> <span class="token string">"bank"</span><span class="token punctuation">,</span>        <span class="token property">"_type"</span> <span class="token operator">:</span> <span class="token string">"account"</span><span class="token punctuation">,</span>        <span class="token property">"_id"</span> <span class="token operator">:</span> <span class="token string">"272"</span><span class="token punctuation">,</span>        <span class="token property">"_score"</span> <span class="token operator">:</span> <span class="token number">0.0</span><span class="token punctuation">,</span>        <span class="token property">"_source"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token property">"account_number"</span> <span class="token operator">:</span> <span class="token number">272</span><span class="token punctuation">,</span>          <span class="token property">"balance"</span> <span class="token operator">:</span> <span class="token number">19253</span><span class="token punctuation">,</span>          <span class="token property">"firstname"</span> <span class="token operator">:</span> <span class="token string">"Lilly"</span><span class="token punctuation">,</span>          <span class="token property">"lastname"</span> <span class="token operator">:</span> <span class="token string">"Morgan"</span><span class="token punctuation">,</span>          <span class="token property">"age"</span> <span class="token operator">:</span> <span class="token number">25</span><span class="token punctuation">,</span>          <span class="token property">"gender"</span> <span class="token operator">:</span> <span class="token string">"F"</span><span class="token punctuation">,</span>          <span class="token property">"address"</span> <span class="token operator">:</span> <span class="token string">"689 Fleet Street"</span><span class="token punctuation">,</span>          <span class="token property">"employer"</span> <span class="token operator">:</span> <span class="token string">"Biolive"</span><span class="token punctuation">,</span>          <span class="token property">"email"</span> <span class="token operator">:</span> <span class="token string">"lillymorgan@biolive.com"</span><span class="token punctuation">,</span>          <span class="token property">"city"</span> <span class="token operator">:</span> <span class="token string">"Sunbury"</span><span class="token punctuation">,</span>          <span class="token property">"state"</span> <span class="token operator">:</span> <span class="token string">"OH"</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>能看到所有文档的 “_score” : 0.0。</strong></p><h5 id="（8）term"><a href="#（8）term" class="headerlink" title="（8）term"></a>（8）term</h5><p>和match一样。匹配某个属性的值。全文检索字段用match，其他非text字段匹配用term。</p><blockquote><p>Avoid using the <code>term</code> query for <a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.6/text.html"><code>text</code></a> fields.</p><p>避免对文本字段使用“term”查询</p><p>By default, Elasticsearch changes the values of <code>text</code> fields as part of <a href="">analysis</a>. This can make finding exact matches for <code>text</code> field values difficult.</p><p>默认情况下，Elasticsearch作为<a href="">analysis</a>的一部分更改’ text ‘字段的值。这使得为“text”字段值寻找精确匹配变得困难。 </p><p>To search <code>text</code> field values, use the match.</p><p>要搜索“text”字段值，请使用匹配。</p><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.6/query-dsl-term-query.html">https://www.elastic.co/guide/en/elasticsearch/reference/7.6/query-dsl-term-query.html</a> </p></blockquote><p>使用term匹配查询</p><pre class=" language-json"><code class="language-json">GET bank/_search<span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"term"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"address"</span><span class="token operator">:</span> <span class="token string">"mill Road"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>查询结果：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"took"</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token property">"timed_out"</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token property">"_shards"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"total"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token property">"successful"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token property">"skipped"</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token property">"failed"</span> <span class="token operator">:</span> <span class="token number">0</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"hits"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"total"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"value"</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>      <span class="token property">"relation"</span> <span class="token operator">:</span> <span class="token string">"eq"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"max_score"</span> <span class="token operator">:</span> <span class="token null">null</span><span class="token punctuation">,</span>    <span class="token property">"hits"</span> <span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>一条也没有匹配到</p><p>而更换为match匹配时，能够匹配到32个文档</p><p>也就是说，<strong>全文检索字段用match，其他非text字段匹配用term</strong>。</p><h5 id="（9）Aggregation（执行聚合）"><a href="#（9）Aggregation（执行聚合）" class="headerlink" title="（9）Aggregation（执行聚合）"></a>（9）Aggregation（执行聚合）</h5><p>聚合提供了从数据中分组和提取数据的能力。最简单的聚合方法大致等于SQL Group by和SQL聚合函数。在elasticsearch中，执行搜索返回this（命中结果），并且同时返回聚合结果，把以响应中的所有hits（命中结果）分隔开的能力。这是非常强大且有效的，你可以执行查询和多个聚合，并且在一次使用中得到各自的（任何一个的）返回结果，使用一次简洁和简化的API啦避免网络往返。</p><p>“size”:0</p><p>size:0不显示搜索数据<br>aggs：执行聚合。聚合语法如下：</p><pre class=" language-json"><code class="language-json"><span class="token property">"aggs"</span><span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token property">"aggs_name这次聚合的名字，方便展示在结果集中"</span><span class="token operator">:</span><span class="token punctuation">{</span>        <span class="token property">"AGG_TYPE聚合的类型(avg,term,terms)"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token punctuation">}</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span>，</code></pre><p><strong>搜索address中包含mill的所有人的年龄分布以及平均年龄，但不显示这些人的详情</strong></p><pre class=" language-json"><code class="language-json">GET bank/_search<span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"match"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"address"</span><span class="token operator">:</span> <span class="token string">"Mill"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"aggs"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"ageAgg"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"terms"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"field"</span><span class="token operator">:</span> <span class="token string">"age"</span><span class="token punctuation">,</span>        <span class="token property">"size"</span><span class="token operator">:</span> <span class="token number">10</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"ageAvg"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"avg"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"field"</span><span class="token operator">:</span> <span class="token string">"age"</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"balanceAvg"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"avg"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"field"</span><span class="token operator">:</span> <span class="token string">"balance"</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"size"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">}</span></code></pre><p>查询结果：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"took"</span> <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token property">"timed_out"</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token property">"_shards"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"total"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token property">"successful"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token property">"skipped"</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token property">"failed"</span> <span class="token operator">:</span> <span class="token number">0</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"hits"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"total"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"value"</span> <span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>      <span class="token property">"relation"</span> <span class="token operator">:</span> <span class="token string">"eq"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"max_score"</span> <span class="token operator">:</span> <span class="token null">null</span><span class="token punctuation">,</span>    <span class="token property">"hits"</span> <span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"aggregations"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"ageAgg"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"doc_count_error_upper_bound"</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>      <span class="token property">"sum_other_doc_count"</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>      <span class="token property">"buckets"</span> <span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>          <span class="token property">"key"</span> <span class="token operator">:</span> <span class="token number">38</span><span class="token punctuation">,</span>          <span class="token property">"doc_count"</span> <span class="token operator">:</span> <span class="token number">2</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>          <span class="token property">"key"</span> <span class="token operator">:</span> <span class="token number">28</span><span class="token punctuation">,</span>          <span class="token property">"doc_count"</span> <span class="token operator">:</span> <span class="token number">1</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>          <span class="token property">"key"</span> <span class="token operator">:</span> <span class="token number">32</span><span class="token punctuation">,</span>          <span class="token property">"doc_count"</span> <span class="token operator">:</span> <span class="token number">1</span>        <span class="token punctuation">}</span>      <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"ageAvg"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"value"</span> <span class="token operator">:</span> <span class="token number">34.0</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"balanceAvg"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"value"</span> <span class="token operator">:</span> <span class="token number">25208.0</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>复杂：<br>按照年龄聚合，并且求这些年龄段的这些人的平均薪资</p><pre class=" language-json"><code class="language-json">GET bank/_search<span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"match_all"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"aggs"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"ageAgg"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"terms"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"field"</span><span class="token operator">:</span> <span class="token string">"age"</span><span class="token punctuation">,</span>        <span class="token property">"size"</span><span class="token operator">:</span> <span class="token number">100</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token property">"aggs"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"ageAvg"</span><span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token property">"avg"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"field"</span><span class="token operator">:</span> <span class="token string">"balance"</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"size"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">}</span></code></pre><p>输出结果：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"took"</span> <span class="token operator">:</span> <span class="token number">49</span><span class="token punctuation">,</span>  <span class="token property">"timed_out"</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token property">"_shards"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"total"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token property">"successful"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token property">"skipped"</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token property">"failed"</span> <span class="token operator">:</span> <span class="token number">0</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"hits"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"total"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"value"</span> <span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">,</span>      <span class="token property">"relation"</span> <span class="token operator">:</span> <span class="token string">"eq"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"max_score"</span> <span class="token operator">:</span> <span class="token null">null</span><span class="token punctuation">,</span>    <span class="token property">"hits"</span> <span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"aggregations"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"ageAgg"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"doc_count_error_upper_bound"</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>      <span class="token property">"sum_other_doc_count"</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>      <span class="token property">"buckets"</span> <span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>          <span class="token property">"key"</span> <span class="token operator">:</span> <span class="token number">31</span><span class="token punctuation">,</span>          <span class="token property">"doc_count"</span> <span class="token operator">:</span> <span class="token number">61</span><span class="token punctuation">,</span>          <span class="token property">"ageAvg"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"value"</span> <span class="token operator">:</span> <span class="token number">28312.918032786885</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>          <span class="token property">"key"</span> <span class="token operator">:</span> <span class="token number">39</span><span class="token punctuation">,</span>          <span class="token property">"doc_count"</span> <span class="token operator">:</span> <span class="token number">60</span><span class="token punctuation">,</span>          <span class="token property">"ageAvg"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"value"</span> <span class="token operator">:</span> <span class="token number">25269.583333333332</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>          <span class="token property">"key"</span> <span class="token operator">:</span> <span class="token number">26</span><span class="token punctuation">,</span>          <span class="token property">"doc_count"</span> <span class="token operator">:</span> <span class="token number">59</span><span class="token punctuation">,</span>          <span class="token property">"ageAvg"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"value"</span> <span class="token operator">:</span> <span class="token number">23194.813559322032</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>          <span class="token property">"key"</span> <span class="token operator">:</span> <span class="token number">32</span><span class="token punctuation">,</span>          <span class="token property">"doc_count"</span> <span class="token operator">:</span> <span class="token number">52</span><span class="token punctuation">,</span>          <span class="token property">"ageAvg"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"value"</span> <span class="token operator">:</span> <span class="token number">23951.346153846152</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>          <span class="token property">"key"</span> <span class="token operator">:</span> <span class="token number">35</span><span class="token punctuation">,</span>          <span class="token property">"doc_count"</span> <span class="token operator">:</span> <span class="token number">52</span><span class="token punctuation">,</span>          <span class="token property">"ageAvg"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"value"</span> <span class="token operator">:</span> <span class="token number">22136.69230769231</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>          <span class="token property">"key"</span> <span class="token operator">:</span> <span class="token number">36</span><span class="token punctuation">,</span>          <span class="token property">"doc_count"</span> <span class="token operator">:</span> <span class="token number">52</span><span class="token punctuation">,</span>          <span class="token property">"ageAvg"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"value"</span> <span class="token operator">:</span> <span class="token number">22174.71153846154</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>          <span class="token property">"key"</span> <span class="token operator">:</span> <span class="token number">22</span><span class="token punctuation">,</span>          <span class="token property">"doc_count"</span> <span class="token operator">:</span> <span class="token number">51</span><span class="token punctuation">,</span>          <span class="token property">"ageAvg"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"value"</span> <span class="token operator">:</span> <span class="token number">24731.07843137255</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>          <span class="token property">"key"</span> <span class="token operator">:</span> <span class="token number">28</span><span class="token punctuation">,</span>          <span class="token property">"doc_count"</span> <span class="token operator">:</span> <span class="token number">51</span><span class="token punctuation">,</span>          <span class="token property">"ageAvg"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"value"</span> <span class="token operator">:</span> <span class="token number">28273.882352941175</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>          <span class="token property">"key"</span> <span class="token operator">:</span> <span class="token number">33</span><span class="token punctuation">,</span>          <span class="token property">"doc_count"</span> <span class="token operator">:</span> <span class="token number">50</span><span class="token punctuation">,</span>          <span class="token property">"ageAvg"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"value"</span> <span class="token operator">:</span> <span class="token number">25093.94</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>          <span class="token property">"key"</span> <span class="token operator">:</span> <span class="token number">34</span><span class="token punctuation">,</span>          <span class="token property">"doc_count"</span> <span class="token operator">:</span> <span class="token number">49</span><span class="token punctuation">,</span>          <span class="token property">"ageAvg"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"value"</span> <span class="token operator">:</span> <span class="token number">26809.95918367347</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>          <span class="token property">"key"</span> <span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span>          <span class="token property">"doc_count"</span> <span class="token operator">:</span> <span class="token number">47</span><span class="token punctuation">,</span>          <span class="token property">"ageAvg"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"value"</span> <span class="token operator">:</span> <span class="token number">22841.106382978724</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>          <span class="token property">"key"</span> <span class="token operator">:</span> <span class="token number">21</span><span class="token punctuation">,</span>          <span class="token property">"doc_count"</span> <span class="token operator">:</span> <span class="token number">46</span><span class="token punctuation">,</span>          <span class="token property">"ageAvg"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"value"</span> <span class="token operator">:</span> <span class="token number">26981.434782608696</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>          <span class="token property">"key"</span> <span class="token operator">:</span> <span class="token number">40</span><span class="token punctuation">,</span>          <span class="token property">"doc_count"</span> <span class="token operator">:</span> <span class="token number">45</span><span class="token punctuation">,</span>          <span class="token property">"ageAvg"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"value"</span> <span class="token operator">:</span> <span class="token number">27183.17777777778</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>          <span class="token property">"key"</span> <span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span>          <span class="token property">"doc_count"</span> <span class="token operator">:</span> <span class="token number">44</span><span class="token punctuation">,</span>          <span class="token property">"ageAvg"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"value"</span> <span class="token operator">:</span> <span class="token number">27741.227272727272</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>          <span class="token property">"key"</span> <span class="token operator">:</span> <span class="token number">23</span><span class="token punctuation">,</span>          <span class="token property">"doc_count"</span> <span class="token operator">:</span> <span class="token number">42</span><span class="token punctuation">,</span>          <span class="token property">"ageAvg"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"value"</span> <span class="token operator">:</span> <span class="token number">27314.214285714286</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>          <span class="token property">"key"</span> <span class="token operator">:</span> <span class="token number">24</span><span class="token punctuation">,</span>          <span class="token property">"doc_count"</span> <span class="token operator">:</span> <span class="token number">42</span><span class="token punctuation">,</span>          <span class="token property">"ageAvg"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"value"</span> <span class="token operator">:</span> <span class="token number">28519.04761904762</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>          <span class="token property">"key"</span> <span class="token operator">:</span> <span class="token number">25</span><span class="token punctuation">,</span>          <span class="token property">"doc_count"</span> <span class="token operator">:</span> <span class="token number">42</span><span class="token punctuation">,</span>          <span class="token property">"ageAvg"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"value"</span> <span class="token operator">:</span> <span class="token number">27445.214285714286</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>          <span class="token property">"key"</span> <span class="token operator">:</span> <span class="token number">37</span><span class="token punctuation">,</span>          <span class="token property">"doc_count"</span> <span class="token operator">:</span> <span class="token number">42</span><span class="token punctuation">,</span>          <span class="token property">"ageAvg"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"value"</span> <span class="token operator">:</span> <span class="token number">27022.261904761905</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>          <span class="token property">"key"</span> <span class="token operator">:</span> <span class="token number">27</span><span class="token punctuation">,</span>          <span class="token property">"doc_count"</span> <span class="token operator">:</span> <span class="token number">39</span><span class="token punctuation">,</span>          <span class="token property">"ageAvg"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"value"</span> <span class="token operator">:</span> <span class="token number">21471.871794871793</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>          <span class="token property">"key"</span> <span class="token operator">:</span> <span class="token number">38</span><span class="token punctuation">,</span>          <span class="token property">"doc_count"</span> <span class="token operator">:</span> <span class="token number">39</span><span class="token punctuation">,</span>          <span class="token property">"ageAvg"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"value"</span> <span class="token operator">:</span> <span class="token number">26187.17948717949</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>          <span class="token property">"key"</span> <span class="token operator">:</span> <span class="token number">29</span><span class="token punctuation">,</span>          <span class="token property">"doc_count"</span> <span class="token operator">:</span> <span class="token number">35</span><span class="token punctuation">,</span>          <span class="token property">"ageAvg"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"value"</span> <span class="token operator">:</span> <span class="token number">29483.14285714286</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>查出所有年龄分布，并且这些年龄段中M的平均薪资和F的平均薪资以及这个年龄段的总体平均薪资</p><pre class=" language-json"><code class="language-json">GET bank/_search<span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"match_all"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"aggs"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"ageAgg"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"terms"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"field"</span><span class="token operator">:</span> <span class="token string">"age"</span><span class="token punctuation">,</span>        <span class="token property">"size"</span><span class="token operator">:</span> <span class="token number">100</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token property">"aggs"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"genderAgg"</span><span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token property">"terms"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"field"</span><span class="token operator">:</span> <span class="token string">"gender.keyword"</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token property">"aggs"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"balanceAvg"</span><span class="token operator">:</span> <span class="token punctuation">{</span>              <span class="token property">"avg"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token property">"field"</span><span class="token operator">:</span> <span class="token string">"balance"</span>              <span class="token punctuation">}</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"ageBalanceAvg"</span><span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token property">"avg"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"field"</span><span class="token operator">:</span> <span class="token string">"balance"</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"size"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">}</span></code></pre><p>输出结果：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"took"</span> <span class="token operator">:</span> <span class="token number">119</span><span class="token punctuation">,</span>  <span class="token property">"timed_out"</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token property">"_shards"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"total"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token property">"successful"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token property">"skipped"</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token property">"failed"</span> <span class="token operator">:</span> <span class="token number">0</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"hits"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"total"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"value"</span> <span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">,</span>      <span class="token property">"relation"</span> <span class="token operator">:</span> <span class="token string">"eq"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"max_score"</span> <span class="token operator">:</span> <span class="token null">null</span><span class="token punctuation">,</span>    <span class="token property">"hits"</span> <span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"aggregations"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"ageAgg"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"doc_count_error_upper_bound"</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>      <span class="token property">"sum_other_doc_count"</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>      <span class="token property">"buckets"</span> <span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>          <span class="token property">"key"</span> <span class="token operator">:</span> <span class="token number">31</span><span class="token punctuation">,</span>          <span class="token property">"doc_count"</span> <span class="token operator">:</span> <span class="token number">61</span><span class="token punctuation">,</span>          <span class="token property">"genderAgg"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"doc_count_error_upper_bound"</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>            <span class="token property">"sum_other_doc_count"</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>            <span class="token property">"buckets"</span> <span class="token operator">:</span> <span class="token punctuation">[</span>              <span class="token punctuation">{</span>                <span class="token property">"key"</span> <span class="token operator">:</span> <span class="token string">"M"</span><span class="token punctuation">,</span>                <span class="token property">"doc_count"</span> <span class="token operator">:</span> <span class="token number">35</span><span class="token punctuation">,</span>                <span class="token property">"balanceAvg"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>                  <span class="token property">"value"</span> <span class="token operator">:</span> <span class="token number">29565.628571428573</span>                <span class="token punctuation">}</span>              <span class="token punctuation">}</span><span class="token punctuation">,</span>              <span class="token punctuation">{</span>                <span class="token property">"key"</span> <span class="token operator">:</span> <span class="token string">"F"</span><span class="token punctuation">,</span>                <span class="token property">"doc_count"</span> <span class="token operator">:</span> <span class="token number">26</span><span class="token punctuation">,</span>                <span class="token property">"balanceAvg"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>                  <span class="token property">"value"</span> <span class="token operator">:</span> <span class="token number">26626.576923076922</span>                <span class="token punctuation">}</span>              <span class="token punctuation">}</span>            <span class="token punctuation">]</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token property">"ageBalanceAvg"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"value"</span> <span class="token operator">:</span> <span class="token number">28312.918032786885</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">]</span>        .......//省略其他    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="3）Mapping"><a href="#3）Mapping" class="headerlink" title="3）Mapping"></a>3）Mapping</h4><h5 id="（1）字段类型"><a href="#（1）字段类型" class="headerlink" title="（1）字段类型"></a>（1）字段类型</h5><h5 id="（2）映射"><a href="#（2）映射" class="headerlink" title="（2）映射"></a>（2）映射</h5><p>Mapping(映射)<br>Maping是用来定义一个文档（document），以及它所包含的属性（field）是如何存储和索引的。比如：使用maping来定义：</p><ul><li><p>哪些字符串属性应该被看做全文本属性（full text fields）；</p></li><li><p>哪些属性包含数字，日期或地理位置；</p></li><li><p>文档中的所有属性是否都嫩被索引（all 配置）；</p></li><li><p>日期的格式；</p></li><li><p>自定义映射规则来执行动态添加属性；</p></li><li><p>查看mapping信息<br>GET bank/_mapping</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"bank"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"mappings"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"properties"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"account_number"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token property">"type"</span> <span class="token operator">:</span> <span class="token string">"long"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"address"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token property">"type"</span> <span class="token operator">:</span> <span class="token string">"text"</span><span class="token punctuation">,</span>          <span class="token property">"fields"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"keyword"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>              <span class="token property">"type"</span> <span class="token operator">:</span> <span class="token string">"keyword"</span><span class="token punctuation">,</span>              <span class="token property">"ignore_above"</span> <span class="token operator">:</span> <span class="token number">256</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"age"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token property">"type"</span> <span class="token operator">:</span> <span class="token string">"long"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"balance"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token property">"type"</span> <span class="token operator">:</span> <span class="token string">"long"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"city"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token property">"type"</span> <span class="token operator">:</span> <span class="token string">"text"</span><span class="token punctuation">,</span>          <span class="token property">"fields"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"keyword"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>              <span class="token property">"type"</span> <span class="token operator">:</span> <span class="token string">"keyword"</span><span class="token punctuation">,</span>              <span class="token property">"ignore_above"</span> <span class="token operator">:</span> <span class="token number">256</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"email"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token property">"type"</span> <span class="token operator">:</span> <span class="token string">"text"</span><span class="token punctuation">,</span>          <span class="token property">"fields"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"keyword"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>              <span class="token property">"type"</span> <span class="token operator">:</span> <span class="token string">"keyword"</span><span class="token punctuation">,</span>              <span class="token property">"ignore_above"</span> <span class="token operator">:</span> <span class="token number">256</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"employer"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token property">"type"</span> <span class="token operator">:</span> <span class="token string">"text"</span><span class="token punctuation">,</span>          <span class="token property">"fields"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"keyword"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>              <span class="token property">"type"</span> <span class="token operator">:</span> <span class="token string">"keyword"</span><span class="token punctuation">,</span>              <span class="token property">"ignore_above"</span> <span class="token operator">:</span> <span class="token number">256</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"firstname"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token property">"type"</span> <span class="token operator">:</span> <span class="token string">"text"</span><span class="token punctuation">,</span>          <span class="token property">"fields"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"keyword"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>              <span class="token property">"type"</span> <span class="token operator">:</span> <span class="token string">"keyword"</span><span class="token punctuation">,</span>              <span class="token property">"ignore_above"</span> <span class="token operator">:</span> <span class="token number">256</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"gender"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token property">"type"</span> <span class="token operator">:</span> <span class="token string">"text"</span><span class="token punctuation">,</span>          <span class="token property">"fields"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"keyword"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>              <span class="token property">"type"</span> <span class="token operator">:</span> <span class="token string">"keyword"</span><span class="token punctuation">,</span>              <span class="token property">"ignore_above"</span> <span class="token operator">:</span> <span class="token number">256</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"lastname"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token property">"type"</span> <span class="token operator">:</span> <span class="token string">"text"</span><span class="token punctuation">,</span>          <span class="token property">"fields"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"keyword"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>              <span class="token property">"type"</span> <span class="token operator">:</span> <span class="token string">"keyword"</span><span class="token punctuation">,</span>              <span class="token property">"ignore_above"</span> <span class="token operator">:</span> <span class="token number">256</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"state"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token property">"type"</span> <span class="token operator">:</span> <span class="token string">"text"</span><span class="token punctuation">,</span>          <span class="token property">"fields"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"keyword"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>              <span class="token property">"type"</span> <span class="token operator">:</span> <span class="token string">"keyword"</span><span class="token punctuation">,</span>              <span class="token property">"ignore_above"</span> <span class="token operator">:</span> <span class="token number">256</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>修改mapping信息</p></li></ul><h5 id="（3）新版本改变"><a href="#（3）新版本改变" class="headerlink" title="（3）新版本改变"></a>（3）新版本改变</h5><p>ElasticSearch7-去掉type概念</p><ol><li><p>关系型数据库中两个数据表示是独立的，即使他们里面有相同名称的列也不影响使用，但ES中不是这样的。elasticsearch是基于Lucene开发的搜索引擎，而ES中不同type下名称相同的filed最终在Lucene中的处理方式是一样的。</p><ul><li>两个不同type下的两个user_name，在ES同一个索引下其实被认为是同一个filed，你必须在两个不同的type中定义相同的filed映射。否则，不同type中的相同字段名称就会在处理中出现冲突的情况，导致Lucene处理效率下降。</li><li>去掉type就是为了提高ES处理数据的效率。</li></ul></li><li><p>Elasticsearch 7.x URL中的type参数为可选。比如，索引一个文档不再要求提供文档类型。</p></li><li><p>Elasticsearch 8.x 不再支持URL中的type参数。</p></li><li><p>解决：<br>将索引从多类型迁移到单类型，每种类型文档一个独立索引</p><p>将已存在的索引下的类型数据，全部迁移到指定位置即可。详见数据迁移</p></li></ol><blockquote><p><strong>Elasticsearch 7.x</strong></p><ul><li>Specifying types in requests is deprecated. For instance, indexing a document no longer requires a document <code>type</code>. The new index APIs are <code>PUT {index}/_doc/{id}</code> in case of explicit ids and <code>POST {index}/_doc</code> for auto-generated ids. Note that in 7.0, <code>_doc</code> is a permanent part of the path, and represents the endpoint name rather than the document type.</li><li>The <code>include_type_name</code> parameter in the index creation, index template, and mapping APIs will default to <code>false</code>. Setting the parameter at all will result in a deprecation warning.</li><li>The <code>_default_</code> mapping type is removed.</li></ul><p><strong>Elasticsearch 8.x</strong></p><ul><li>Specifying types in requests is no longer supported.</li><li>The <code>include_type_name</code> parameter is removed.</li></ul></blockquote><h6 id="创建映射"><a href="#创建映射" class="headerlink" title="创建映射"></a>创建映射</h6><p>创建索引并指定映射</p><pre class=" language-json"><code class="language-json">PUT /my_index<span class="token punctuation">{</span>  <span class="token property">"mappings"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"properties"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"age"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"integer"</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token property">"email"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"keyword"</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token property">"name"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"text"</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p> 输出：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"acknowledged"</span> <span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token property">"shards_acknowledged"</span> <span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token property">"index"</span> <span class="token operator">:</span> <span class="token string">"my_index"</span><span class="token punctuation">}</span></code></pre><h6 id="查看映射"><a href="#查看映射" class="headerlink" title="查看映射"></a>查看映射</h6><pre class=" language-json"><code class="language-json">GET /my_index</code></pre><p>输出结果：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"my_index"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"aliases"</span> <span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"mappings"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"properties"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"age"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token property">"type"</span> <span class="token operator">:</span> <span class="token string">"integer"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"email"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token property">"type"</span> <span class="token operator">:</span> <span class="token string">"keyword"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"employee-id"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token property">"type"</span> <span class="token operator">:</span> <span class="token string">"keyword"</span><span class="token punctuation">,</span>          <span class="token property">"index"</span> <span class="token operator">:</span> <span class="token boolean">false</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"name"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token property">"type"</span> <span class="token operator">:</span> <span class="token string">"text"</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"settings"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"index"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"creation_date"</span> <span class="token operator">:</span> <span class="token string">"1588410780774"</span><span class="token punctuation">,</span>        <span class="token property">"number_of_shards"</span> <span class="token operator">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span>        <span class="token property">"number_of_replicas"</span> <span class="token operator">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span>        <span class="token property">"uuid"</span> <span class="token operator">:</span> <span class="token string">"ua0lXhtkQCOmn7Kh3iUu0w"</span><span class="token punctuation">,</span>        <span class="token property">"version"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token property">"created"</span> <span class="token operator">:</span> <span class="token string">"7060299"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"provided_name"</span> <span class="token operator">:</span> <span class="token string">"my_index"</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h6 id="添加新的字段映射"><a href="#添加新的字段映射" class="headerlink" title="添加新的字段映射"></a>添加新的字段映射</h6><pre class=" language-json"><code class="language-json">PUT /my_index/_mapping<span class="token punctuation">{</span>  <span class="token property">"properties"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"employee-id"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"keyword"</span><span class="token punctuation">,</span>      <span class="token property">"index"</span><span class="token operator">:</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这里的 “index”: false，表明新增的字段不能被检索，只是一个冗余字段。</p><h6 id="更新映射"><a href="#更新映射" class="headerlink" title="更新映射"></a>更新映射</h6><p>对于已经存在的字段映射，我们不能更新。更新必须创建新的索引，进行数据迁移。</p><h6 id="数据迁移"><a href="#数据迁移" class="headerlink" title="数据迁移"></a>数据迁移</h6><p>先创建new_twitter的正确映射。然后使用如下方式进行数据迁移。</p><pre class=" language-json"><code class="language-json">POST _reindex <span class="token punctuation">[</span>固定写法<span class="token punctuation">]</span><span class="token punctuation">{</span>  <span class="token property">"source"</span><span class="token operator">:</span><span class="token punctuation">{</span>      <span class="token property">"index"</span><span class="token operator">:</span><span class="token string">"twitter"</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"dest"</span><span class="token operator">:</span><span class="token punctuation">{</span>      <span class="token property">"index"</span><span class="token operator">:</span><span class="token string">"new_twitters"</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>将旧索引的type下的数据进行迁移</p><pre class=" language-json"><code class="language-json">POST _reindex <span class="token punctuation">[</span>固定写法<span class="token punctuation">]</span><span class="token punctuation">{</span>  <span class="token property">"source"</span><span class="token operator">:</span><span class="token punctuation">{</span>      <span class="token property">"index"</span><span class="token operator">:</span><span class="token string">"twitter"</span><span class="token punctuation">,</span>      <span class="token property">"twitter"</span><span class="token operator">:</span><span class="token string">"twitter"</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"dest"</span><span class="token operator">:</span><span class="token punctuation">{</span>      <span class="token property">"index"</span><span class="token operator">:</span><span class="token string">"new_twitters"</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>更多详情见： <a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.6/docs-reindex.html">https://www.elastic.co/guide/en/elasticsearch/reference/7.6/docs-reindex.html</a> </p><p>GET /bank/_search</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"took"</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token property">"timed_out"</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token property">"_shards"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"total"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token property">"successful"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token property">"skipped"</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token property">"failed"</span> <span class="token operator">:</span> <span class="token number">0</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"hits"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"total"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"value"</span> <span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">,</span>      <span class="token property">"relation"</span> <span class="token operator">:</span> <span class="token string">"eq"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"max_score"</span> <span class="token operator">:</span> <span class="token number">1.0</span><span class="token punctuation">,</span>    <span class="token property">"hits"</span> <span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        <span class="token property">"_index"</span> <span class="token operator">:</span> <span class="token string">"bank"</span><span class="token punctuation">,</span>        <span class="token property">"_type"</span> <span class="token operator">:</span> <span class="token string">"account"</span><span class="token punctuation">,</span>//类型为account        <span class="token property">"_id"</span> <span class="token operator">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span>        <span class="token property">"_score"</span> <span class="token operator">:</span> <span class="token number">1.0</span><span class="token punctuation">,</span>        <span class="token property">"_source"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token property">"account_number"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>          <span class="token property">"balance"</span> <span class="token operator">:</span> <span class="token number">39225</span><span class="token punctuation">,</span>          <span class="token property">"firstname"</span> <span class="token operator">:</span> <span class="token string">"Amber"</span><span class="token punctuation">,</span>          <span class="token property">"lastname"</span> <span class="token operator">:</span> <span class="token string">"Duke"</span><span class="token punctuation">,</span>          <span class="token property">"age"</span> <span class="token operator">:</span> <span class="token number">32</span><span class="token punctuation">,</span>          <span class="token property">"gender"</span> <span class="token operator">:</span> <span class="token string">"M"</span><span class="token punctuation">,</span>          <span class="token property">"address"</span> <span class="token operator">:</span> <span class="token string">"880 Holmes Lane"</span><span class="token punctuation">,</span>          <span class="token property">"employer"</span> <span class="token operator">:</span> <span class="token string">"Pyrami"</span><span class="token punctuation">,</span>          <span class="token property">"email"</span> <span class="token operator">:</span> <span class="token string">"amberduke@pyrami.com"</span><span class="token punctuation">,</span>          <span class="token property">"city"</span> <span class="token operator">:</span> <span class="token string">"Brogan"</span><span class="token punctuation">,</span>          <span class="token property">"state"</span> <span class="token operator">:</span> <span class="token string">"IL"</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      ...</code></pre><pre><code>GET /bank/_search</code></pre><p>想要将年龄修改为integer</p><pre class=" language-json"><code class="language-json">PUT /newbank<span class="token punctuation">{</span>  <span class="token property">"mappings"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"properties"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"account_number"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"long"</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token property">"address"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"text"</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token property">"age"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"integer"</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token property">"balance"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"long"</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token property">"city"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"keyword"</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token property">"email"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"keyword"</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token property">"employer"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"keyword"</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token property">"firstname"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"text"</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token property">"gender"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"keyword"</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token property">"lastname"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"text"</span><span class="token punctuation">,</span>        <span class="token property">"fields"</span><span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token property">"keyword"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"keyword"</span><span class="token punctuation">,</span>            <span class="token property">"ignore_above"</span><span class="token operator">:</span> <span class="token number">256</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token property">"state"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"keyword"</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>查看“newbank”的映射：</p><p>GET /newbank/_mapping</p><p>能够看到age的映射类型被修改为了integer.</p><p>将bank中的数据迁移到newbank中</p><pre class=" language-json"><code class="language-json">POST _reindex<span class="token punctuation">{</span>  <span class="token property">"source"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"index"</span><span class="token operator">:</span> <span class="token string">"bank"</span><span class="token punctuation">,</span>    <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"account"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"dest"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"index"</span><span class="token operator">:</span> <span class="token string">"newbank"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>运行输出：</p><pre class=" language-json"><code class="language-json">#! Deprecation<span class="token operator">:</span> <span class="token punctuation">[</span>types removal<span class="token punctuation">]</span> Specifying types in reindex requests is deprecated.<span class="token punctuation">{</span>  <span class="token property">"took"</span> <span class="token operator">:</span> <span class="token number">768</span><span class="token punctuation">,</span>  <span class="token property">"timed_out"</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token property">"total"</span> <span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">,</span>  <span class="token property">"updated"</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token property">"created"</span> <span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">,</span>  <span class="token property">"deleted"</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token property">"batches"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token property">"version_conflicts"</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token property">"noops"</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token property">"retries"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"bulk"</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token property">"search"</span> <span class="token operator">:</span> <span class="token number">0</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"throttled_millis"</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token property">"requests_per_second"</span> <span class="token operator">:</span> -<span class="token number">1.0</span><span class="token punctuation">,</span>  <span class="token property">"throttled_until_millis"</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token property">"failures"</span> <span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><p>查看newbank中的数据</p><h4 id="4）分词"><a href="#4）分词" class="headerlink" title="4）分词"></a>4）分词</h4><p>一个tokenizer（分词器）接收一个字符流，将之分割为独立的tokens（词元，通常是独立的单词），然后输出tokens流。</p><p>例如：whitespace tokenizer遇到空白字符时分割文本。它会将文本“Quick brown fox!”分割为[Quick,brown,fox!]。</p><p>该tokenizer（分词器）还负责记录各个terms(词条)的顺序或position位置（用于phrase短语和word proximity词近邻查询），以及term（词条）所代表的原始word（单词）的start（起始）和end（结束）的character offsets（字符串偏移量）（用于高亮显示搜索的内容）。</p><p>elasticsearch提供了很多内置的分词器，可以用来构建custom analyzers（自定义分词器）。</p><p>关于分词器： <a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.6/analysis.html">https://www.elastic.co/guide/en/elasticsearch/reference/7.6/analysis.html</a> </p><pre class=" language-json"><code class="language-json">POST _analyze<span class="token punctuation">{</span>  <span class="token property">"analyzer"</span><span class="token operator">:</span> <span class="token string">"standard"</span><span class="token punctuation">,</span>  <span class="token property">"text"</span><span class="token operator">:</span> <span class="token string">"The 2 QUICK Brown-Foxes jumped over the lazy dog's bone."</span><span class="token punctuation">}</span></code></pre><p>执行结果：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"tokens"</span> <span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      <span class="token property">"token"</span> <span class="token operator">:</span> <span class="token string">"the"</span><span class="token punctuation">,</span>      <span class="token property">"start_offset"</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>      <span class="token property">"end_offset"</span> <span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>      <span class="token property">"type"</span> <span class="token operator">:</span> <span class="token string">"&lt;ALPHANUM>"</span><span class="token punctuation">,</span>      <span class="token property">"position"</span> <span class="token operator">:</span> <span class="token number">0</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token property">"token"</span> <span class="token operator">:</span> <span class="token string">"2"</span><span class="token punctuation">,</span>      <span class="token property">"start_offset"</span> <span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>      <span class="token property">"end_offset"</span> <span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>      <span class="token property">"type"</span> <span class="token operator">:</span> <span class="token string">"&lt;NUM>"</span><span class="token punctuation">,</span>      <span class="token property">"position"</span> <span class="token operator">:</span> <span class="token number">1</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token property">"token"</span> <span class="token operator">:</span> <span class="token string">"quick"</span><span class="token punctuation">,</span>      <span class="token property">"start_offset"</span> <span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span>      <span class="token property">"end_offset"</span> <span class="token operator">:</span> <span class="token number">11</span><span class="token punctuation">,</span>      <span class="token property">"type"</span> <span class="token operator">:</span> <span class="token string">"&lt;ALPHANUM>"</span><span class="token punctuation">,</span>      <span class="token property">"position"</span> <span class="token operator">:</span> <span class="token number">2</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token property">"token"</span> <span class="token operator">:</span> <span class="token string">"brown"</span><span class="token punctuation">,</span>      <span class="token property">"start_offset"</span> <span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">,</span>      <span class="token property">"end_offset"</span> <span class="token operator">:</span> <span class="token number">17</span><span class="token punctuation">,</span>      <span class="token property">"type"</span> <span class="token operator">:</span> <span class="token string">"&lt;ALPHANUM>"</span><span class="token punctuation">,</span>      <span class="token property">"position"</span> <span class="token operator">:</span> <span class="token number">3</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token property">"token"</span> <span class="token operator">:</span> <span class="token string">"foxes"</span><span class="token punctuation">,</span>      <span class="token property">"start_offset"</span> <span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>      <span class="token property">"end_offset"</span> <span class="token operator">:</span> <span class="token number">23</span><span class="token punctuation">,</span>      <span class="token property">"type"</span> <span class="token operator">:</span> <span class="token string">"&lt;ALPHANUM>"</span><span class="token punctuation">,</span>      <span class="token property">"position"</span> <span class="token operator">:</span> <span class="token number">4</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token property">"token"</span> <span class="token operator">:</span> <span class="token string">"jumped"</span><span class="token punctuation">,</span>      <span class="token property">"start_offset"</span> <span class="token operator">:</span> <span class="token number">24</span><span class="token punctuation">,</span>      <span class="token property">"end_offset"</span> <span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span>      <span class="token property">"type"</span> <span class="token operator">:</span> <span class="token string">"&lt;ALPHANUM>"</span><span class="token punctuation">,</span>      <span class="token property">"position"</span> <span class="token operator">:</span> <span class="token number">5</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token property">"token"</span> <span class="token operator">:</span> <span class="token string">"over"</span><span class="token punctuation">,</span>      <span class="token property">"start_offset"</span> <span class="token operator">:</span> <span class="token number">31</span><span class="token punctuation">,</span>      <span class="token property">"end_offset"</span> <span class="token operator">:</span> <span class="token number">35</span><span class="token punctuation">,</span>      <span class="token property">"type"</span> <span class="token operator">:</span> <span class="token string">"&lt;ALPHANUM>"</span><span class="token punctuation">,</span>      <span class="token property">"position"</span> <span class="token operator">:</span> <span class="token number">6</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token property">"token"</span> <span class="token operator">:</span> <span class="token string">"the"</span><span class="token punctuation">,</span>      <span class="token property">"start_offset"</span> <span class="token operator">:</span> <span class="token number">36</span><span class="token punctuation">,</span>      <span class="token property">"end_offset"</span> <span class="token operator">:</span> <span class="token number">39</span><span class="token punctuation">,</span>      <span class="token property">"type"</span> <span class="token operator">:</span> <span class="token string">"&lt;ALPHANUM>"</span><span class="token punctuation">,</span>      <span class="token property">"position"</span> <span class="token operator">:</span> <span class="token number">7</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token property">"token"</span> <span class="token operator">:</span> <span class="token string">"lazy"</span><span class="token punctuation">,</span>      <span class="token property">"start_offset"</span> <span class="token operator">:</span> <span class="token number">40</span><span class="token punctuation">,</span>      <span class="token property">"end_offset"</span> <span class="token operator">:</span> <span class="token number">44</span><span class="token punctuation">,</span>      <span class="token property">"type"</span> <span class="token operator">:</span> <span class="token string">"&lt;ALPHANUM>"</span><span class="token punctuation">,</span>      <span class="token property">"position"</span> <span class="token operator">:</span> <span class="token number">8</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token property">"token"</span> <span class="token operator">:</span> <span class="token string">"dog's"</span><span class="token punctuation">,</span>      <span class="token property">"start_offset"</span> <span class="token operator">:</span> <span class="token number">45</span><span class="token punctuation">,</span>      <span class="token property">"end_offset"</span> <span class="token operator">:</span> <span class="token number">50</span><span class="token punctuation">,</span>      <span class="token property">"type"</span> <span class="token operator">:</span> <span class="token string">"&lt;ALPHANUM>"</span><span class="token punctuation">,</span>      <span class="token property">"position"</span> <span class="token operator">:</span> <span class="token number">9</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token property">"token"</span> <span class="token operator">:</span> <span class="token string">"bone"</span><span class="token punctuation">,</span>      <span class="token property">"start_offset"</span> <span class="token operator">:</span> <span class="token number">51</span><span class="token punctuation">,</span>      <span class="token property">"end_offset"</span> <span class="token operator">:</span> <span class="token number">55</span><span class="token punctuation">,</span>      <span class="token property">"type"</span> <span class="token operator">:</span> <span class="token string">"&lt;ALPHANUM>"</span><span class="token punctuation">,</span>      <span class="token property">"position"</span> <span class="token operator">:</span> <span class="token number">10</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><h5 id="（1）安装ik分词器"><a href="#（1）安装ik分词器" class="headerlink" title="（1）安装ik分词器"></a>（1）安装ik分词器</h5><p>所有的语言分词，默认使用的都是“Standard Analyzer”，但是这些分词器针对于中文的分词，并不友好。为此需要安装中文的分词器。</p><p>注意：不能用默认elasticsearch-plugin install xxx.zip 进行自动安装<br><a href="https://github.com/medcl/elasticsearch-analysis-ik/releases/download">https://github.com/medcl/elasticsearch-analysis-ik/releases/download</a> 对应es版本安装</p><p>在前面安装的elasticsearch时，我们已经将elasticsearch容器的“/usr/share/elasticsearch/plugins”目录，映射到宿主机的“ /mydata/elasticsearch/plugins”目录下，所以比较方便的做法就是下载“/elasticsearch-analysis-ik-7.6.2.zip”文件，然后解压到该文件夹下即可。安装完毕后，需要重启elasticsearch容器。</p><p>如果不嫌麻烦，还可以采用如下的方式。</p><h6 id="（1）查看elasticsearch版本号："><a href="#（1）查看elasticsearch版本号：" class="headerlink" title="（1）查看elasticsearch版本号："></a>（1）查看elasticsearch版本号：</h6><pre class=" language-shell"><code class="language-shell">[root@hadoop-104 ~]# curl http://localhost:9200{  "name" : "0adeb7852e00",  "cluster_name" : "elasticsearch",  "cluster_uuid" : "9gglpP0HTfyOTRAaSe2rIg",  "version" : {    "number" : "7.6.2",      #版本号为7.6.2    "build_flavor" : "default",    "build_type" : "docker",    "build_hash" : "ef48eb35cf30adf4db14086e8aabd07ef6fb113f",    "build_date" : "2020-03-26T06:34:37.794943Z",    "build_snapshot" : false,    "lucene_version" : "8.4.0",    "minimum_wire_compatibility_version" : "6.8.0",    "minimum_index_compatibility_version" : "6.0.0-beta1"  },  "tagline" : "You Know, for Search"}[root@hadoop-104 ~]# </code></pre><h6 id="（2）进入es容器内部plugin目录"><a href="#（2）进入es容器内部plugin目录" class="headerlink" title="（2）进入es容器内部plugin目录"></a>（2）进入es容器内部plugin目录</h6><ul><li>docker exec -it 容器id /bin/bash</li></ul><pre class=" language-shell"><code class="language-shell">[root@hadoop-104 ~]# docker exec -it elasticsearch /bin/bash[root@0adeb7852e00 elasticsearch]# </code></pre><ul><li>wget  <a href="https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.6.2/elasticsearch-analysis-ik-7.6.2.zip">https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.6.2/elasticsearch-analysis-ik-7.6.2.zip</a></li></ul><pre class=" language-shell"><code class="language-shell">[root@0adeb7852e00 elasticsearch]# pwd/usr/share/elasticsearch#下载ik7.6.2[root@0adeb7852e00 elasticsearch]# wget https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.6.2/elasticsearch-analysis-ik-7.6.2.zip</code></pre><ul><li>unzip 下载的文件</li></ul><pre class=" language-shell"><code class="language-shell">[root@0adeb7852e00 elasticsearch]# unzip elasticsearch-analysis-ik-7.6.2.zip -d ikArchive:  elasticsearch-analysis-ik-7.6.2.zip   creating: ik/config/  inflating: ik/config/main.dic        inflating: ik/config/quantifier.dic    inflating: ik/config/extra_single_word_full.dic    inflating: ik/config/IKAnalyzer.cfg.xml    inflating: ik/config/surname.dic     inflating: ik/config/suffix.dic      inflating: ik/config/stopword.dic    inflating: ik/config/extra_main.dic    inflating: ik/config/extra_stopword.dic    inflating: ik/config/preposition.dic    inflating: ik/config/extra_single_word_low_freq.dic    inflating: ik/config/extra_single_word.dic    inflating: ik/elasticsearch-analysis-ik-7.6.2.jar    inflating: ik/httpclient-4.5.2.jar    inflating: ik/httpcore-4.4.4.jar     inflating: ik/commons-logging-1.2.jar    inflating: ik/commons-codec-1.9.jar    inflating: ik/plugin-descriptor.properties    inflating: ik/plugin-security.policy  [root@0adeb7852e00 elasticsearch]##移动到plugins目录下[root@0adeb7852e00 elasticsearch]# mv ik plugins/</code></pre><ul><li>rm -rf *.zip</li></ul><pre><code>[root@0adeb7852e00 elasticsearch]# rm -rf elasticsearch-analysis-ik-7.6.2.zip </code></pre><p>确认是否安装好了分词器</p><h5 id="（2）测试分词器"><a href="#（2）测试分词器" class="headerlink" title="（2）测试分词器"></a>（2）测试分词器</h5><p>使用默认</p><pre class=" language-json"><code class="language-json">GET my_index/_analyze<span class="token punctuation">{</span>   <span class="token property">"text"</span><span class="token operator">:</span><span class="token string">"我是中国人"</span><span class="token punctuation">}</span></code></pre><p>请观察执行结果：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"tokens"</span> <span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      <span class="token property">"token"</span> <span class="token operator">:</span> <span class="token string">"我"</span><span class="token punctuation">,</span>      <span class="token property">"start_offset"</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>      <span class="token property">"end_offset"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>      <span class="token property">"type"</span> <span class="token operator">:</span> <span class="token string">"&lt;IDEOGRAPHIC>"</span><span class="token punctuation">,</span>      <span class="token property">"position"</span> <span class="token operator">:</span> <span class="token number">0</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token property">"token"</span> <span class="token operator">:</span> <span class="token string">"是"</span><span class="token punctuation">,</span>      <span class="token property">"start_offset"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>      <span class="token property">"end_offset"</span> <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>      <span class="token property">"type"</span> <span class="token operator">:</span> <span class="token string">"&lt;IDEOGRAPHIC>"</span><span class="token punctuation">,</span>      <span class="token property">"position"</span> <span class="token operator">:</span> <span class="token number">1</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token property">"token"</span> <span class="token operator">:</span> <span class="token string">"中"</span><span class="token punctuation">,</span>      <span class="token property">"start_offset"</span> <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>      <span class="token property">"end_offset"</span> <span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>      <span class="token property">"type"</span> <span class="token operator">:</span> <span class="token string">"&lt;IDEOGRAPHIC>"</span><span class="token punctuation">,</span>      <span class="token property">"position"</span> <span class="token operator">:</span> <span class="token number">2</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token property">"token"</span> <span class="token operator">:</span> <span class="token string">"国"</span><span class="token punctuation">,</span>      <span class="token property">"start_offset"</span> <span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>      <span class="token property">"end_offset"</span> <span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>      <span class="token property">"type"</span> <span class="token operator">:</span> <span class="token string">"&lt;IDEOGRAPHIC>"</span><span class="token punctuation">,</span>      <span class="token property">"position"</span> <span class="token operator">:</span> <span class="token number">3</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token property">"token"</span> <span class="token operator">:</span> <span class="token string">"人"</span><span class="token punctuation">,</span>      <span class="token property">"start_offset"</span> <span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>      <span class="token property">"end_offset"</span> <span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>      <span class="token property">"type"</span> <span class="token operator">:</span> <span class="token string">"&lt;IDEOGRAPHIC>"</span><span class="token punctuation">,</span>      <span class="token property">"position"</span> <span class="token operator">:</span> <span class="token number">4</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><pre class=" language-json"><code class="language-json">GET my_index/_analyze<span class="token punctuation">{</span>   <span class="token property">"analyzer"</span><span class="token operator">:</span> <span class="token string">"ik_smart"</span><span class="token punctuation">,</span>    <span class="token property">"text"</span><span class="token operator">:</span><span class="token string">"我是中国人"</span><span class="token punctuation">}</span></code></pre><p>输出结果：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"tokens"</span> <span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      <span class="token property">"token"</span> <span class="token operator">:</span> <span class="token string">"我"</span><span class="token punctuation">,</span>      <span class="token property">"start_offset"</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>      <span class="token property">"end_offset"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>      <span class="token property">"type"</span> <span class="token operator">:</span> <span class="token string">"CN_CHAR"</span><span class="token punctuation">,</span>      <span class="token property">"position"</span> <span class="token operator">:</span> <span class="token number">0</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token property">"token"</span> <span class="token operator">:</span> <span class="token string">"是"</span><span class="token punctuation">,</span>      <span class="token property">"start_offset"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>      <span class="token property">"end_offset"</span> <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>      <span class="token property">"type"</span> <span class="token operator">:</span> <span class="token string">"CN_CHAR"</span><span class="token punctuation">,</span>      <span class="token property">"position"</span> <span class="token operator">:</span> <span class="token number">1</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token property">"token"</span> <span class="token operator">:</span> <span class="token string">"中国人"</span><span class="token punctuation">,</span>      <span class="token property">"start_offset"</span> <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>      <span class="token property">"end_offset"</span> <span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>      <span class="token property">"type"</span> <span class="token operator">:</span> <span class="token string">"CN_WORD"</span><span class="token punctuation">,</span>      <span class="token property">"position"</span> <span class="token operator">:</span> <span class="token number">2</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><pre class=" language-json"><code class="language-json">GET my_index/_analyze<span class="token punctuation">{</span>   <span class="token property">"analyzer"</span><span class="token operator">:</span> <span class="token string">"ik_max_word"</span><span class="token punctuation">,</span>    <span class="token property">"text"</span><span class="token operator">:</span><span class="token string">"我是中国人"</span><span class="token punctuation">}</span></code></pre><p>输出结果：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"tokens"</span> <span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      <span class="token property">"token"</span> <span class="token operator">:</span> <span class="token string">"我"</span><span class="token punctuation">,</span>      <span class="token property">"start_offset"</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>      <span class="token property">"end_offset"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>      <span class="token property">"type"</span> <span class="token operator">:</span> <span class="token string">"CN_CHAR"</span><span class="token punctuation">,</span>      <span class="token property">"position"</span> <span class="token operator">:</span> <span class="token number">0</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token property">"token"</span> <span class="token operator">:</span> <span class="token string">"是"</span><span class="token punctuation">,</span>      <span class="token property">"start_offset"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>      <span class="token property">"end_offset"</span> <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>      <span class="token property">"type"</span> <span class="token operator">:</span> <span class="token string">"CN_CHAR"</span><span class="token punctuation">,</span>      <span class="token property">"position"</span> <span class="token operator">:</span> <span class="token number">1</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token property">"token"</span> <span class="token operator">:</span> <span class="token string">"中国人"</span><span class="token punctuation">,</span>      <span class="token property">"start_offset"</span> <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>      <span class="token property">"end_offset"</span> <span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>      <span class="token property">"type"</span> <span class="token operator">:</span> <span class="token string">"CN_WORD"</span><span class="token punctuation">,</span>      <span class="token property">"position"</span> <span class="token operator">:</span> <span class="token number">2</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token property">"token"</span> <span class="token operator">:</span> <span class="token string">"中国"</span><span class="token punctuation">,</span>      <span class="token property">"start_offset"</span> <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>      <span class="token property">"end_offset"</span> <span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>      <span class="token property">"type"</span> <span class="token operator">:</span> <span class="token string">"CN_WORD"</span><span class="token punctuation">,</span>      <span class="token property">"position"</span> <span class="token operator">:</span> <span class="token number">3</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token property">"token"</span> <span class="token operator">:</span> <span class="token string">"国人"</span><span class="token punctuation">,</span>      <span class="token property">"start_offset"</span> <span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>      <span class="token property">"end_offset"</span> <span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>      <span class="token property">"type"</span> <span class="token operator">:</span> <span class="token string">"CN_WORD"</span><span class="token punctuation">,</span>      <span class="token property">"position"</span> <span class="token operator">:</span> <span class="token number">4</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><h5 id="（3）自定义词库"><a href="#（3）自定义词库" class="headerlink" title="（3）自定义词库"></a>（3）自定义词库</h5><p><strong>安装Nginx</strong></p><p>![](images/Snipaste_2020-08-29_12-59-49.png</p><ul><li>修改/usr/share/elasticsearch/plugins/ik/config中的IKAnalyzer.cfg.xml<br>/usr/share/elasticsearch/plugins/ik/config</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token doctype">&lt;!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>comment</span><span class="token punctuation">></span></span>IK Analyzer 扩展配置<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>comment</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--用户可以在这里配置自己的扩展字典 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ext_dict<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>entry</span><span class="token punctuation">></span></span>     <span class="token comment" spellcheck="true">&lt;!--用户可以在这里配置自己的扩展停止词字典--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ext_stopwords<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>entry</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--用户可以在这里配置远程扩展字典 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>remote_ext_dict<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>http://#/es/fenci.txt<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>entry</span><span class="token punctuation">></span></span>     <span class="token comment" spellcheck="true">&lt;!--用户可以在这里配置远程扩展停止词字典--></span>    <span class="token comment" spellcheck="true">&lt;!-- &lt;entry key="remote_ext_stopwords">words_location&lt;/entry> --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span></code></pre><p>原来的xml</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token doctype">&lt;!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>comment</span><span class="token punctuation">></span></span>IK Analyzer 扩展配置<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>comment</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--用户可以在这里配置自己的扩展字典 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ext_dict<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>entry</span><span class="token punctuation">></span></span>     <span class="token comment" spellcheck="true">&lt;!--用户可以在这里配置自己的扩展停止词字典--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ext_stopwords<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>entry</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--用户可以在这里配置远程扩展字典 --></span>    <span class="token comment" spellcheck="true">&lt;!-- &lt;entry key="remote_ext_dict">words_location&lt;/entry> --></span>    <span class="token comment" spellcheck="true">&lt;!--用户可以在这里配置远程扩展停止词字典--></span>    <span class="token comment" spellcheck="true">&lt;!-- &lt;entry key="remote_ext_stopwords">words_location&lt;/entry> --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span></code></pre><p>修改完成后，需要重启elasticsearch容器，否则修改不生效。</p><p>更新完成后，es只会对于新增的数据用更新分词。历史数据是不会重新分词的。如果想要历史数据重新分词，需要执行：</p><pre class=" language-shell"><code class="language-shell">POST my_index/_update_by_query?conflicts=proceed</code></pre><p>http://#/es/fenci.txt，这个是nginx上资源的访问路径</p><p>在运行下面实例之前，需要安装nginx（安装方法见安装nginx），然后创建“fenci.txt”文件，内容如下：</p><pre class=" language-shell"><code class="language-shell">echo "樱桃萨其马，带你甜蜜入夏" > /mydata/nginx/html/fenci.txt </code></pre><p>测试效果：</p><pre class=" language-json"><code class="language-json">GET my_index/_analyze<span class="token punctuation">{</span>   <span class="token property">"analyzer"</span><span class="token operator">:</span> <span class="token string">"ik_max_word"</span><span class="token punctuation">,</span>    <span class="token property">"text"</span><span class="token operator">:</span><span class="token string">"樱桃萨其马，带你甜蜜入夏"</span><span class="token punctuation">}</span></code></pre><p>输出结果：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"tokens"</span> <span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      <span class="token property">"token"</span> <span class="token operator">:</span> <span class="token string">"樱桃"</span><span class="token punctuation">,</span>      <span class="token property">"start_offset"</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>      <span class="token property">"end_offset"</span> <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>      <span class="token property">"type"</span> <span class="token operator">:</span> <span class="token string">"CN_WORD"</span><span class="token punctuation">,</span>      <span class="token property">"position"</span> <span class="token operator">:</span> <span class="token number">0</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token property">"token"</span> <span class="token operator">:</span> <span class="token string">"萨其马"</span><span class="token punctuation">,</span>      <span class="token property">"start_offset"</span> <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>      <span class="token property">"end_offset"</span> <span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>      <span class="token property">"type"</span> <span class="token operator">:</span> <span class="token string">"CN_WORD"</span><span class="token punctuation">,</span>      <span class="token property">"position"</span> <span class="token operator">:</span> <span class="token number">1</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token property">"token"</span> <span class="token operator">:</span> <span class="token string">"带你"</span><span class="token punctuation">,</span>      <span class="token property">"start_offset"</span> <span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span>      <span class="token property">"end_offset"</span> <span class="token operator">:</span> <span class="token number">8</span><span class="token punctuation">,</span>      <span class="token property">"type"</span> <span class="token operator">:</span> <span class="token string">"CN_WORD"</span><span class="token punctuation">,</span>      <span class="token property">"position"</span> <span class="token operator">:</span> <span class="token number">2</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token property">"token"</span> <span class="token operator">:</span> <span class="token string">"甜蜜"</span><span class="token punctuation">,</span>      <span class="token property">"start_offset"</span> <span class="token operator">:</span> <span class="token number">8</span><span class="token punctuation">,</span>      <span class="token property">"end_offset"</span> <span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>      <span class="token property">"type"</span> <span class="token operator">:</span> <span class="token string">"CN_WORD"</span><span class="token punctuation">,</span>      <span class="token property">"position"</span> <span class="token operator">:</span> <span class="token number">3</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token property">"token"</span> <span class="token operator">:</span> <span class="token string">"入夏"</span><span class="token punctuation">,</span>      <span class="token property">"start_offset"</span> <span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>      <span class="token property">"end_offset"</span> <span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">,</span>      <span class="token property">"type"</span> <span class="token operator">:</span> <span class="token string">"CN_WORD"</span><span class="token punctuation">,</span>      <span class="token property">"position"</span> <span class="token operator">:</span> <span class="token number">4</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><h3 id="4、elasticsearch-Rest-Client"><a href="#4、elasticsearch-Rest-Client" class="headerlink" title="4、elasticsearch-Rest-Client"></a>4、elasticsearch-Rest-Client</h3><h4 id="1）9300-TCP"><a href="#1）9300-TCP" class="headerlink" title="1）9300: TCP"></a>1）9300: TCP</h4><ul><li><p>spring-data-elasticsearch:transport-api.jar;</p><ul><li>springboot版本不同，ransport-api.jar不同，不能适配es版本</li><li>7.x已经不建议使用，8以后就要废弃<h4 id="2）9200-HTTP"><a href="#2）9200-HTTP" class="headerlink" title="2）9200: HTTP"></a>2）9200: HTTP</h4></li></ul></li><li><p>jestClient: 非官方，更新慢；</p></li><li><p>RestTemplate：模拟HTTP请求，ES很多操作需要自己封装，麻烦；</p></li><li><p>HttpClient：同上；</p></li><li><p>Elasticsearch-Rest-Client：官方RestClient，封装了ES操作，API层次分明，上手简单；<br>最终选择Elasticsearch-Rest-Client（elasticsearch-rest-high-level-client）；<br> <a href="https://www.elastic.co/guide/en/elasticsearch/client/java-rest/current/java-rest-high.html">https://www.elastic.co/guide/en/elasticsearch/client/java-rest/current/java-rest-high.html</a> </p></li></ul><h3 id="5、附录：安装Nginx"><a href="#5、附录：安装Nginx" class="headerlink" title="5、附录：安装Nginx"></a>5、附录：安装Nginx</h3><ul><li><p>随便启动一个nginx实例，只是为了复制出配置</p><pre class=" language-shell"><code class="language-shell">docker run -p80:80 --name nginx -d nginx:1.10   </code></pre></li><li><p>将容器内的配置文件拷贝到/mydata/nginx/conf/ 下</p><pre class=" language-shell"><code class="language-shell">mkdir -p /mydata/nginx/htmlmkdir -p /mydata/nginx/logsmkdir -p /mydata/nginx/confdocker container cp nginx:/etc/nginx/*  /mydata/nginx/conf/ #由于拷贝完成后会在config中存在一个nginx文件夹，所以需要将它的内容移动到conf中mv /mydata/nginx/conf/nginx/* /mydata/nginx/conf/rm -rf /mydata/nginx/conf/nginx</code></pre></li><li><p>终止原容器：</p><pre class=" language-shell"><code class="language-shell">docker stop nginx</code></pre></li><li><p>执行命令删除原容器：</p><pre class=" language-shell"><code class="language-shell">docker rm nginx</code></pre></li><li><p>创建新的Nginx，执行以下命令</p><pre class=" language-shell"><code class="language-shell">docker run -p 80:80 --name nginx \ -v /mydata/nginx/html:/usr/share/nginx/html \ -v /mydata/nginx/logs:/var/log/nginx \ -v /mydata/nginx/conf/:/etc/nginx \ -d nginx:1.10</code></pre></li><li><p>设置开机启动nginx</p><pre><code>docker update nginx --restart=always</code></pre></li><li><p>创建“/mydata/nginx/html/index.html”文件，测试是否能够正常访问</p><pre><code>echo '&lt;h2&gt;hello nginx!&lt;/h2&gt;' &gt;index.html</code></pre><p>访问：<a href="http://ngix所在主机的ip/index.html">http://ngix所在主机的IP:80/index.html</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> ElasticSearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ElasticSearch首次见面 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo博客常见错误解决方法</title>
      <link href="2020/08/20/hexo-bo-ke-chang-jian-cuo-wu-jie-jue-fang-fa/"/>
      <url>2020/08/20/hexo-bo-ke-chang-jian-cuo-wu-jie-jue-fang-fa/</url>
      
        <content type="html"><![CDATA[<p>上次hexo博客出现了hexo d 上传远端看不到效果的错误</p><p>但是hexo s在本地可以看到效果</p><p>就一怒之下删除了.deploy_git文件夹</p><p>于是乎，就出现了这个错误：<br><img src="https://i.loli.net/2020/08/20/kFgzqyYA6eSNLwP.png" alt="1.png"></p><p>在网上找了一大堆经验资料也没效果</p><p>于是就按照git给的提示修复了下</p><p>竟然！！！！！</p><p>可以了！！！！</p><p>再执行一次hexo clean–&gt;hexo g –&gt;hexo d就可以啦</p><p>然后上传远端没有效果的错误也随着消失了</p><p><img src="https://i.loli.net/2020/08/20/2Pn4K5vVLlQAEcY.png" alt="2.png"></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo常见错误 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>缓冲流、转换流、序列化流学习笔记</title>
      <link href="2020/08/15/huan-chong-liu-zhuan-huan-liu-xu-lie-hua-liu-da-yin-liu/"/>
      <url>2020/08/15/huan-chong-liu-zhuan-huan-liu-xu-lie-hua-liu-da-yin-liu/</url>
      
        <content type="html"><![CDATA[<h1 id="缓冲流、转换流、序列化流"><a href="#缓冲流、转换流、序列化流" class="headerlink" title="缓冲流、转换流、序列化流"></a>缓冲流、转换流、序列化流</h1><h2 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h2><ul><li> 缓冲流</li><li> 转换流</li><li> 序列化流</li><li> 打印流<a id="more"></a></li></ul><h2 id="教学目标"><a href="#教学目标" class="headerlink" title="教学目标"></a>教学目标</h2><ul><li><input disabled="" type="checkbox"> 能够使用字节缓冲流读取数据到程序</li><li><input disabled="" type="checkbox"> 能够使用字节缓冲流写出数据到文件</li><li><input disabled="" type="checkbox"> 能够明确字符缓冲流的作用和基本用法</li><li><input disabled="" type="checkbox"> 能够使用缓冲流的特殊功能</li><li><input disabled="" type="checkbox"> 能够阐述编码表的意义</li><li><input disabled="" type="checkbox"> 能够使用转换流读取指定编码的文本文件</li><li><input disabled="" type="checkbox"> 能够使用转换流写入指定编码的文本文件</li><li><input disabled="" type="checkbox"> 能够说出打印流的特点</li><li><input disabled="" type="checkbox"> 能够使用序列化流写出对象到文件</li><li><input disabled="" type="checkbox"> 能够使用反序列化流读取文件到程序中</li></ul><h1 id="第一章-缓冲流"><a href="#第一章-缓冲流" class="headerlink" title="第一章 缓冲流"></a>第一章 缓冲流</h1><p>昨天学习了基本的一些流，作为IO流的入门，今天我们要见识一些更强大的流。比如能够高效读写的缓冲流，能够转换编码的转换流，能够持久化存储对象的序列化流等等。这些功能更为强大的流，都是在基本的流对象基础之上创建而来的，就像穿上铠甲的武士一样，相当于是对基本流对象的一种增强。</p><h2 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1 概述"></a>1.1 概述</h2><p>缓冲流,也叫高效流，是对4个基本的<code>FileXxx</code> 流的增强，所以也是4个流，按照数据类型分类：</p><ul><li><strong>字节缓冲流</strong>：<code>BufferedInputStream</code>，<code>BufferedOutputStream</code> </li><li><strong>字符缓冲流</strong>：<code>BufferedReader</code>，<code>BufferedWriter</code></li></ul><p>缓冲流的基本原理，是在创建流对象时，会创建一个内置的默认大小的缓冲区数组，通过缓冲区读写，减少系统IO次数，从而提高读写的效率。</p><h2 id="1-2-字节缓冲流"><a href="#1-2-字节缓冲流" class="headerlink" title="1.2 字节缓冲流"></a>1.2 字节缓冲流</h2><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><ul><li><code>public BufferedInputStream(InputStream in)</code> ：创建一个 新的缓冲输入流。 </li><li><code>public BufferedOutputStream(OutputStream out)</code>： 创建一个新的缓冲输出流。</li></ul><p>构造举例，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 创建字节缓冲输入流</span>BufferedInputStream bis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"bis.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 创建字节缓冲输出流</span>BufferedOutputStream bos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"bos.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="效率测试"><a href="#效率测试" class="headerlink" title="效率测试"></a>效率测试</h3><p>查询API，缓冲流读写方法与基本的流是一致的，我们通过复制大文件（375MB），测试它的效率。</p><ol><li>基本流，代码如下：</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BufferedDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> FileNotFoundException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 记录开始时间</span>          <span class="token keyword">long</span> start <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建流对象</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span>            FileInputStream fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"jdk9.exe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            FileOutputStream fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"copy.exe"</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 读写数据</span>            <span class="token keyword">int</span> b<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>b <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 记录结束时间</span>        <span class="token keyword">long</span> end <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"普通流复制时间:"</span><span class="token operator">+</span><span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" 毫秒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>十几分钟过去了<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><ol start="2"><li>缓冲流，代码如下：</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BufferedDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> FileNotFoundException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 记录开始时间</span>          <span class="token keyword">long</span> start <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建流对象</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span>            BufferedInputStream bis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"jdk9.exe"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         BufferedOutputStream bos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"copy.exe"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 读写数据</span>            <span class="token keyword">int</span> b<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>b <span class="token operator">=</span> bis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                bos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 记录结束时间</span>        <span class="token keyword">long</span> end <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"缓冲流复制时间:"</span><span class="token operator">+</span><span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" 毫秒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>缓冲流复制时间<span class="token operator">:</span><span class="token number">8016</span> 毫秒</code></pre><p>如何更快呢？</p><p>使用数组的方式，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BufferedDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> FileNotFoundException <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 记录开始时间</span>        <span class="token keyword">long</span> start <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建流对象</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span>            BufferedInputStream bis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"jdk9.exe"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         BufferedOutputStream bos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"copy.exe"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">// 读写数据</span>            <span class="token keyword">int</span> len<span class="token punctuation">;</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token operator">*</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> bis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                bos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 记录结束时间</span>        <span class="token keyword">long</span> end <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"缓冲流使用数组复制时间:"</span><span class="token operator">+</span><span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" 毫秒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>缓冲流使用数组复制时间<span class="token operator">:</span><span class="token number">666</span> 毫秒</code></pre><h2 id="1-3-字符缓冲流"><a href="#1-3-字符缓冲流" class="headerlink" title="1.3 字符缓冲流"></a>1.3 字符缓冲流</h2><h3 id="构造方法-1"><a href="#构造方法-1" class="headerlink" title="构造方法"></a>构造方法</h3><ul><li><code>public BufferedReader(Reader in)</code> ：创建一个 新的缓冲输入流。 </li><li><code>public BufferedWriter(Writer out)</code>： 创建一个新的缓冲输出流。</li></ul><p>构造举例，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 创建字符缓冲输入流</span>BufferedReader br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"br.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 创建字符缓冲输出流</span>BufferedWriter bw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">"bw.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="特有方法"><a href="#特有方法" class="headerlink" title="特有方法"></a>特有方法</h3><p>字符缓冲流的基本方法与普通字符流调用方式一致，不再阐述，我们来看它们具备的特有方法。</p><ul><li>BufferedReader：<code>public String readLine()</code>: 读一行文字。 </li><li>BufferedWriter：<code>public void newLine()</code>: 写一行行分隔符,由系统属性定义符号。 </li></ul><p><code>readLine</code>方法演示，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BufferedReaderDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>           <span class="token comment" spellcheck="true">// 创建流对象</span>        BufferedReader br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"in.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 定义字符串,保存读取的一行文字</span>        String line  <span class="token operator">=</span> null<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 循环读取,读取到最后返回null</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>line <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span>null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 释放资源</span>        br<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><code>newLine</code>方法演示，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BufferedWriterDemo</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException  <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建流对象</span>      BufferedWriter bw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">"out.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 写出数据</span>      bw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"黑马"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 写出换行</span>      bw<span class="token punctuation">.</span><span class="token function">newLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      bw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"程序"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      bw<span class="token punctuation">.</span><span class="token function">newLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      bw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"员"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      bw<span class="token punctuation">.</span><span class="token function">newLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 释放资源</span>      bw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>输出效果<span class="token operator">:</span>黑马程序员</code></pre><h2 id="1-4-练习-文本排序"><a href="#1-4-练习-文本排序" class="headerlink" title="1.4 练习:文本排序"></a>1.4 练习:文本排序</h2><p>请将文本信息恢复顺序。</p><pre><code>3.侍中、侍郎郭攸之、费祎、董允等，此皆良实，志虑忠纯，是以先帝简拔以遗陛下。愚以为宫中之事，事无大小，悉以咨之，然后施行，必得裨补阙漏，有所广益。8.愿陛下托臣以讨贼兴复之效，不效，则治臣之罪，以告先帝之灵。若无兴德之言，则责攸之、祎、允等之慢，以彰其咎；陛下亦宜自谋，以咨诹善道，察纳雅言，深追先帝遗诏，臣不胜受恩感激。4.将军向宠，性行淑均，晓畅军事，试用之于昔日，先帝称之曰能，是以众议举宠为督。愚以为营中之事，悉以咨之，必能使行阵和睦，优劣得所。2.宫中府中，俱为一体，陟罚臧否，不宜异同。若有作奸犯科及为忠善者，宜付有司论其刑赏，以昭陛下平明之理，不宜偏私，使内外异法也。1.先帝创业未半而中道崩殂，今天下三分，益州疲弊，此诚危急存亡之秋也。然侍卫之臣不懈于内，忠志之士忘身于外者，盖追先帝之殊遇，欲报之于陛下也。诚宜开张圣听，以光先帝遗德，恢弘志士之气，不宜妄自菲薄，引喻失义，以塞忠谏之路也。9.今当远离，临表涕零，不知所言。6.臣本布衣，躬耕于南阳，苟全性命于乱世，不求闻达于诸侯。先帝不以臣卑鄙，猥自枉屈，三顾臣于草庐之中，咨臣以当世之事，由是感激，遂许先帝以驱驰。后值倾覆，受任于败军之际，奉命于危难之间，尔来二十有一年矣。7.先帝知臣谨慎，故临崩寄臣以大事也。受命以来，夙夜忧叹，恐付托不效，以伤先帝之明，故五月渡泸，深入不毛。今南方已定，兵甲已足，当奖率三军，北定中原，庶竭驽钝，攘除奸凶，兴复汉室，还于旧都。此臣所以报先帝而忠陛下之职分也。至于斟酌损益，进尽忠言，则攸之、祎、允之任也。5.亲贤臣，远小人，此先汉所以兴隆也；亲小人，远贤臣，此后汉所以倾颓也。先帝在时，每与臣论此事，未尝不叹息痛恨于桓、灵也。侍中、尚书、长史、参军，此悉贞良死节之臣，愿陛下亲之信之，则汉室之隆，可计日而待也。</code></pre><h3 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析"></a>案例分析</h3><ol><li>逐行读取文本信息。</li><li>解析文本信息到集合中。</li><li>遍历集合，按顺序，写出文本信息。</li></ol><h3 id="案例实现"><a href="#案例实现" class="headerlink" title="案例实现"></a>案例实现</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BufferedTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建map集合,保存文本数据,键为序号,值为文字</span>        HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> lineMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建流对象</span>        BufferedReader br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"in.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        BufferedWriter bw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">"out.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 读取数据</span>        String line  <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>line <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span>null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 解析文本</span>            String<span class="token punctuation">[</span><span class="token punctuation">]</span> split <span class="token operator">=</span> line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\\."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 保存到集合</span>            lineMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>split<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>split<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 释放资源</span>        br<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 遍历map集合</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> lineMap<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            String key <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 获取map中文本</span>            String value <span class="token operator">=</span> lineMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// 写出拼接文本</span>            bw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>key<span class="token operator">+</span><span class="token string">"."</span><span class="token operator">+</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// 写出换行</span>            bw<span class="token punctuation">.</span><span class="token function">newLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 释放资源</span>        bw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="第二章-转换流"><a href="#第二章-转换流" class="headerlink" title="第二章 转换流"></a>第二章 转换流</h1><h2 id="2-1-字符编码和字符集"><a href="#2-1-字符编码和字符集" class="headerlink" title="2.1 字符编码和字符集"></a>2.1 字符编码和字符集</h2><h3 id="字符编码"><a href="#字符编码" class="headerlink" title="字符编码"></a>字符编码</h3><p>计算机中储存的信息都是用二进制数表示的，而我们在屏幕上看到的数字、英文、标点符号、汉字等字符是二进制数转换之后的结果。按照某种规则，将字符存储到计算机中，称为<strong>编码</strong> 。反之，将存储在计算机中的二进制数按照某种规则解析显示出来，称为<strong>解码</strong> 。比如说，按照A规则存储，同样按照A规则解析，那么就能显示正确的文本符号。反之，按照A规则存储，再按照B规则解析，就会导致乱码现象。</p><p>编码:字符(能看懂的)–字节(看不懂的)</p><p>解码:字节(看不懂的)–&gt;字符(能看懂的)</p><ul><li><p><strong>字符编码<code>Character Encoding</code></strong> : 就是一套自然语言的字符与二进制数之间的对应规则。</p><p>编码表:生活中文字和计算机中二进制的对应规则</p></li></ul><h3 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h3><ul><li>**字符集 <code>Charset</code>**：也叫编码表。是一个系统支持的所有字符的集合，包括各国家文字、标点符号、图形符号、数字等。</li></ul><p>计算机要准确的存储和识别各种字符集符号，需要进行字符编码，一套字符集必然至少有一套字符编码。常见字符集有ASCII字符集、GBK字符集、Unicode字符集等。<img src="img/1_charset.jpg"></p><p>可见，当指定了<strong>编码</strong>，它所对应的<strong>字符集</strong>自然就指定了，所以<strong>编码</strong>才是我们最终要关心的。</p><ul><li><strong>ASCII字符集</strong> ：<ul><li>ASCII（American Standard Code for Information Interchange，美国信息交换标准代码）是基于拉丁字母的一套电脑编码系统，用于显示现代英语，主要包括控制字符（回车键、退格、换行键等）和可显示字符（英文大小写字符、阿拉伯数字和西文符号）。</li><li>基本的ASCII字符集，使用7位（bits）表示一个字符，共128字符。ASCII的扩展字符集使用8位（bits）表示一个字符，共256字符，方便支持欧洲常用字符。</li></ul></li><li><strong>ISO-8859-1字符集</strong>：<ul><li>拉丁码表，别名Latin-1，用于显示欧洲使用的语言，包括荷兰、丹麦、德语、意大利语、西班牙语等。</li><li>ISO-8859-1使用单字节编码，兼容ASCII编码。</li></ul></li><li><strong>GBxxx字符集</strong>：<ul><li>GB就是国标的意思，是为了显示中文而设计的一套字符集。</li><li><strong>GB2312</strong>：简体中文码表。一个小于127的字符的意义与原来相同。但两个大于127的字符连在一起时，就表示一个汉字，这样大约可以组合了包含7000多个简体汉字，此外数学符号、罗马希腊的字母、日文的假名们都编进去了，连在ASCII里本来就有的数字、标点、字母都统统重新编了两个字节长的编码，这就是常说的”全角”字符，而原来在127号以下的那些就叫”半角”字符了。</li><li><strong>GBK</strong>：最常用的中文码表。是在GB2312标准基础上的扩展规范，使用了双字节编码方案，共收录了21003个汉字，完全兼容GB2312标准，同时支持繁体汉字以及日韩汉字等。</li><li><strong>GB18030</strong>：最新的中文码表。收录汉字70244个，采用多字节编码，每个字可以由1个、2个或4个字节组成。支持中国国内少数民族的文字，同时支持繁体汉字以及日韩汉字等。</li></ul></li><li><strong>Unicode字符集</strong> ：<ul><li>Unicode编码系统为表达任意语言的任意字符而设计，是业界的一种标准，也称为统一码、标准万国码。</li><li>它最多使用4个字节的数字来表达每个字母、符号，或者文字。有三种编码方案，UTF-8、UTF-16和UTF-32。最为常用的UTF-8编码。</li><li>UTF-8编码，可以用来表示Unicode标准中任何字符，它是电子邮件、网页及其他存储或传送文字的应用中，优先采用的编码。互联网工程工作小组（IETF）要求所有互联网协议都必须支持UTF-8编码。所以，我们开发Web应用，也要使用UTF-8编码。它使用一至四个字节为每个字符编码，编码规则：<ol><li>128个US-ASCII字符，只需一个字节编码。</li><li>拉丁文等字符，需要二个字节编码。 </li><li>大部分常用字（含中文），使用三个字节编码。</li><li>其他极少使用的Unicode辅助字符，使用四字节编码。</li></ol></li></ul></li></ul><h2 id="2-2-编码引出的问题"><a href="#2-2-编码引出的问题" class="headerlink" title="2.2 编码引出的问题"></a>2.2 编码引出的问题</h2><p>在IDEA中，使用<code>FileReader</code> 读取项目中的文本文件。由于IDEA的设置，都是默认的<code>UTF-8</code>编码，所以没有任何问题。但是，当读取Windows系统中创建的文本文件时，由于Windows系统的默认是GBK编码，就会出现乱码。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReaderDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        FileReader fileReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"E:\\File_GBK.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> read<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>read <span class="token operator">=</span> fileReader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>read<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        fileReader<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>输出结果：���</code></pre><p>那么如何读取GBK编码的文件呢？ </p><h2 id="2-3-InputStreamReader类"><a href="#2-3-InputStreamReader类" class="headerlink" title="2.3 InputStreamReader类"></a>2.3 InputStreamReader类</h2><p>转换流<code>java.io.InputStreamReader</code>，是Reader的子类，是从字节流到字符流的桥梁。它读取字节，并使用指定的字符集将其解码为字符。它的字符集可以由名称指定，也可以接受平台的默认字符集。 </p><h3 id="构造方法-2"><a href="#构造方法-2" class="headerlink" title="构造方法"></a>构造方法</h3><ul><li><code>InputStreamReader(InputStream in)</code>: 创建一个使用默认字符集的字符流。 </li><li><code>InputStreamReader(InputStream in, String charsetName)</code>: 创建一个指定字符集的字符流。</li></ul><p>构造举例，代码如下： </p><pre class=" language-java"><code class="language-java">InputStreamReader isr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"in.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>InputStreamReader isr2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"in.txt"</span><span class="token punctuation">)</span> <span class="token punctuation">,</span> <span class="token string">"GBK"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="指定编码读取"><a href="#指定编码读取" class="headerlink" title="指定编码读取"></a>指定编码读取</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReaderDemo2</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 定义文件路径,文件为gbk编码</span>        String FileName <span class="token operator">=</span> <span class="token string">"E:\\file_gbk.txt"</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 创建流对象,默认UTF8编码</span>        InputStreamReader isr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>FileName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 创建流对象,指定GBK编码</span>        InputStreamReader isr2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>FileName<span class="token punctuation">)</span> <span class="token punctuation">,</span> <span class="token string">"GBK"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 定义变量,保存字符</span>        <span class="token keyword">int</span> read<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 使用默认编码字符流读取,乱码</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>read <span class="token operator">=</span> isr<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>read<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ��Һ�</span>        <span class="token punctuation">}</span>        isr<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 使用指定编码字符流读取,正常解析</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>read <span class="token operator">=</span> isr2<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>read<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 大家好</span>        <span class="token punctuation">}</span>        isr2<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="2-4-OutputStreamWriter类"><a href="#2-4-OutputStreamWriter类" class="headerlink" title="2.4 OutputStreamWriter类"></a>2.4 OutputStreamWriter类</h2><p>转换流<code>java.io.OutputStreamWriter</code> ，是Writer的子类，是从字符流到字节流的桥梁。使用指定的字符集将字符编码为字节。它的字符集可以由名称指定，也可以接受平台的默认字符集。 </p><h3 id="构造方法-3"><a href="#构造方法-3" class="headerlink" title="构造方法"></a>构造方法</h3><ul><li><code>OutputStreamWriter(OutputStream in)</code>: 创建一个使用默认字符集的字符流。 </li><li><code>OutputStreamWriter(OutputStream in, String charsetName)</code>: 创建一个指定字符集的字符流。</li></ul><p>构造举例，代码如下： </p><pre class=" language-java"><code class="language-java">OutputStreamWriter isr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"out.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>OutputStreamWriter isr2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"out.txt"</span><span class="token punctuation">)</span> <span class="token punctuation">,</span> <span class="token string">"GBK"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="指定编码写出"><a href="#指定编码写出" class="headerlink" title="指定编码写出"></a>指定编码写出</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OutputDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 定义文件路径</span>        String FileName <span class="token operator">=</span> <span class="token string">"E:\\out.txt"</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 创建流对象,默认UTF8编码</span>        OutputStreamWriter osw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>FileName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 写出数据</span>          osw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"你好"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 保存为6个字节</span>        osw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">// 定义文件路径</span>        String FileName2 <span class="token operator">=</span> <span class="token string">"E:\\out2.txt"</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 创建流对象,指定GBK编码</span>        OutputStreamWriter osw2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>FileName2<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"GBK"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 写出数据</span>          osw2<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"你好"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 保存为4个字节</span>        osw2<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="转换流理解图解"><a href="#转换流理解图解" class="headerlink" title="转换流理解图解"></a>转换流理解图解</h3><p><strong>转换流是字节与字符间的桥梁！</strong><img src="img/2_zhuanhuan.jpg"></p><h2 id="2-5-练习：转换文件编码"><a href="#2-5-练习：转换文件编码" class="headerlink" title="2.5 练习：转换文件编码"></a>2.5 练习：转换文件编码</h2><p>将GBK编码的文本文件，转换为UTF-8编码的文本文件。</p><h3 id="案例分析-1"><a href="#案例分析-1" class="headerlink" title="案例分析"></a>案例分析</h3><ol><li>指定GBK编码的转换流，读取文本文件。</li><li>使用UTF-8编码的转换流，写出文本文件。</li></ol><h3 id="案例实现-1"><a href="#案例实现-1" class="headerlink" title="案例实现"></a>案例实现</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TransDemo</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">// 1.定义文件路径</span>         String srcFile <span class="token operator">=</span> <span class="token string">"file_gbk.txt"</span><span class="token punctuation">;</span>        String destFile <span class="token operator">=</span> <span class="token string">"file_utf8.txt"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2.创建流对象</span>        <span class="token comment" spellcheck="true">// 2.1 转换输入流,指定GBK编码</span>        InputStreamReader isr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>srcFile<span class="token punctuation">)</span> <span class="token punctuation">,</span> <span class="token string">"GBK"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2.2 转换输出流,默认utf8编码</span>        OutputStreamWriter osw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>destFile<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3.读写数据</span>        <span class="token comment" spellcheck="true">// 3.1 定义数组</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cbuf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">char</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3.2 定义长度</span>        <span class="token keyword">int</span> len<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3.3 循环读取</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> isr<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>cbuf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 循环写出</span>              osw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>cbuf<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 4.释放资源</span>        osw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        isr<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="第三章-序列化"><a href="#第三章-序列化" class="headerlink" title="第三章 序列化"></a>第三章 序列化</h1><h2 id="3-1-概述"><a href="#3-1-概述" class="headerlink" title="3.1 概述"></a>3.1 概述</h2><p>Java 提供了一种对象<strong>序列化</strong>的机制。用一个字节序列可以表示一个对象，该字节序列包含该<code>对象的数据</code>、<code>对象的类型</code>和<code>对象中存储的属性</code>等信息。字节序列写出到文件之后，相当于文件中<strong>持久保存</strong>了一个对象的信息。 </p><p>反之，该字节序列还可以从文件中读取回来，重构对象，对它进行<strong>反序列化</strong>。<code>对象的数据</code>、<code>对象的类型</code>和<code>对象中存储的数据</code>信息，都可以用来在内存中创建对象。看图理解序列化： <img src="img/3_xuliehua.jpg"></p><h2 id="3-2-ObjectOutputStream类"><a href="#3-2-ObjectOutputStream类" class="headerlink" title="3.2 ObjectOutputStream类"></a>3.2 ObjectOutputStream类</h2><p><code>java.io.ObjectOutputStream </code> 类，将Java对象的原始数据类型写出到文件,实现对象的持久存储。</p><h3 id="构造方法-4"><a href="#构造方法-4" class="headerlink" title="构造方法"></a>构造方法</h3><ul><li><code>public ObjectOutputStream(OutputStream out) </code>： 创建一个指定OutputStream的ObjectOutputStream。</li></ul><p>构造举例，代码如下：  </p><pre class=" language-java"><code class="language-java">FileOutputStream fileOut <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"employee.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ObjectOutputStream out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>fileOut<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="序列化操作"><a href="#序列化操作" class="headerlink" title="序列化操作"></a>序列化操作</h3><ol><li>一个对象要想序列化，必须满足两个条件:</li></ol><ul><li>该类必须实现<code>java.io.Serializable </code> 接口，<code>Serializable</code> 是一个标记接口，不实现此接口的类将不会使任何状态序列化或反序列化，会抛出<code>NotSerializableException</code> 。</li><li>该类的所有属性必须是可序列化的。如果有一个属性不需要可序列化的，则该属性必须注明是瞬态的，使用<code>transient</code> 关键字修饰。</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token keyword">implements</span> <span class="token class-name">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> String address<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">transient</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// transient瞬态修饰成员,不会被序列化</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addressCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Address  check : "</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">" -- "</span> <span class="token operator">+</span> address<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>2.写出对象方法</p><ul><li><code>public final void writeObject (Object obj)</code> : 将指定的对象写出。</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SerializeDemo</span><span class="token punctuation">{</span>       <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String <span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>   <span class="token punctuation">{</span>        Employee e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        e<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"zhangsan"</span><span class="token punctuation">;</span>        e<span class="token punctuation">.</span>address <span class="token operator">=</span> <span class="token string">"beiqinglu"</span><span class="token punctuation">;</span>        e<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>         <span class="token keyword">try</span> <span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">// 创建序列化流对象</span>          ObjectOutputStream out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"employee.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 写出对象</span>            out<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 释放资源</span>            out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            fileOut<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Serialized data is saved"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 姓名，地址被序列化，年龄没有被序列化。</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>IOException i<span class="token punctuation">)</span>   <span class="token punctuation">{</span>            i<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>       <span class="token punctuation">}</span><span class="token punctuation">}</span>输出结果：Serialized data is saved</code></pre><h2 id="3-3-ObjectInputStream类"><a href="#3-3-ObjectInputStream类" class="headerlink" title="3.3 ObjectInputStream类"></a>3.3 ObjectInputStream类</h2><p>ObjectInputStream反序列化流，将之前使用ObjectOutputStream序列化的原始数据恢复为对象。 </p><h3 id="构造方法-5"><a href="#构造方法-5" class="headerlink" title="构造方法"></a>构造方法</h3><ul><li><code>public ObjectInputStream(InputStream in) </code>： 创建一个指定InputStream的ObjectInputStream。</li></ul><h3 id="反序列化操作1"><a href="#反序列化操作1" class="headerlink" title="反序列化操作1"></a>反序列化操作1</h3><p>如果能找到一个对象的class文件，我们可以进行反序列化操作，调用<code>ObjectInputStream</code>读取对象的方法：</p><ul><li><code>public final Object readObject ()</code> : 读取一个对象。</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeserializeDemo</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String <span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>   <span class="token punctuation">{</span>        Employee e <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>                     <span class="token comment" spellcheck="true">// 创建反序列化流</span>             FileInputStream fileIn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"employee.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             ObjectInputStream in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span>fileIn<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// 读取一个对象</span>             e <span class="token operator">=</span> <span class="token punctuation">(</span>Employee<span class="token punctuation">)</span> in<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// 释放资源</span>             in<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             fileIn<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>IOException i<span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token comment" spellcheck="true">// 捕获其他异常</span>             i<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>ClassNotFoundException c<span class="token punctuation">)</span>  <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 捕获类找不到异常</span>             System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Employee class not found"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             c<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 无异常,直接打印输出</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Name: "</span> <span class="token operator">+</span> e<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// zhangsan</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Address: "</span> <span class="token operator">+</span> e<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// beiqinglu</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"age: "</span> <span class="token operator">+</span> e<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 0</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>对于JVM可以反序列化对象，它必须是能够找到class文件的类。如果找不到该类的class文件，则抛出一个 <code>ClassNotFoundException</code> 异常。</strong>  </p><h3 id="反序列化操作2"><a href="#反序列化操作2" class="headerlink" title="反序列化操作2"></a><strong>反序列化操作2</strong></h3><p><strong>另外，当JVM反序列化对象时，能找到class文件，但是class文件在序列化对象之后发生了修改，那么反序列化操作也会失败，抛出一个<code>InvalidClassException</code>异常。</strong>发生这个异常的原因如下：</p><ul><li>该类的序列版本号与从流中读取的类描述符的版本号不匹配 </li><li>该类包含未知数据类型 </li><li>该类没有可访问的无参数构造方法 </li></ul><p><code>Serializable</code> 接口给需要序列化的类，提供了一个序列版本号。<code>serialVersionUID</code> 该版本号的目的在于验证序列化的对象和对应类是否版本匹配。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token keyword">implements</span> <span class="token class-name">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 加入序列版本号</span>     <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 1L<span class="token punctuation">;</span>     <span class="token keyword">public</span> String name<span class="token punctuation">;</span>     <span class="token keyword">public</span> String address<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 添加新的属性 ,重新编译, 可以反序列化,该属性赋为默认值.</span>     <span class="token keyword">public</span> <span class="token keyword">int</span> eid<span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addressCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Address  check : "</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">" -- "</span> <span class="token operator">+</span> address<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="3-4-练习：序列化集合"><a href="#3-4-练习：序列化集合" class="headerlink" title="3.4 练习：序列化集合"></a>3.4 练习：序列化集合</h2><ol><li>将存有多个自定义对象的集合序列化操作，保存到<code>list.txt</code>文件中。</li><li>反序列化<code>list.txt</code> ，并遍历集合，打印对象信息。</li></ol><h3 id="案例分析-2"><a href="#案例分析-2" class="headerlink" title="案例分析"></a>案例分析</h3><ol><li>把若干学生对象 ，保存到集合中。</li><li>把集合序列化。</li><li>反序列化读取时，只需要读取一次，转换为集合类型。</li><li>遍历集合，可以打印所有的学生信息</li></ol><h3 id="案例实现-2"><a href="#案例实现-2" class="headerlink" title="案例实现"></a>案例实现</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SerTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建 学生对象</span>        Student student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"老王"</span><span class="token punctuation">,</span> <span class="token string">"laow"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Student student2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"老张"</span><span class="token punctuation">,</span> <span class="token string">"laoz"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Student student3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"老李"</span><span class="token punctuation">,</span> <span class="token string">"laol"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ArrayList<span class="token operator">&lt;</span>Student<span class="token operator">></span> arrayList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        arrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>        arrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>student2<span class="token punctuation">)</span><span class="token punctuation">;</span>        arrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>student3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 序列化操作</span>        <span class="token comment" spellcheck="true">// serializ(arrayList);</span>                <span class="token comment" spellcheck="true">// 反序列化  </span>        ObjectInputStream ois  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"list.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 读取对象,强转为ArrayList类型</span>        ArrayList<span class="token operator">&lt;</span>Student<span class="token operator">></span> list  <span class="token operator">=</span> <span class="token punctuation">(</span>ArrayList<span class="token operator">&lt;</span>Student<span class="token operator">></span><span class="token punctuation">)</span>ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>              Student s <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"--"</span><span class="token operator">+</span> s<span class="token punctuation">.</span><span class="token function">getPwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">serializ</span><span class="token punctuation">(</span>ArrayList<span class="token operator">&lt;</span>Student<span class="token operator">></span> arrayList<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建 序列化流 </span>        ObjectOutputStream oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"list.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 写出对象</span>        oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>arrayList<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 释放资源</span>        oos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="第四章-打印流"><a href="#第四章-打印流" class="headerlink" title="第四章 打印流"></a>第四章 打印流</h1><h2 id="4-1-概述"><a href="#4-1-概述" class="headerlink" title="4.1 概述"></a>4.1 概述</h2><p>平时我们在控制台打印输出，是调用<code>print</code>方法和<code>println</code>方法完成的，这两个方法都来自于<code>java.io.PrintStream</code>类，该类能够方便地打印各种数据类型的值，是一种便捷的输出方式。</p><h2 id="4-2-PrintStream类"><a href="#4-2-PrintStream类" class="headerlink" title="4.2 PrintStream类"></a>4.2 PrintStream类</h2><h3 id="构造方法-6"><a href="#构造方法-6" class="headerlink" title="构造方法"></a>构造方法</h3><ul><li><code>public PrintStream(String fileName)  </code>： 使用指定的文件名创建一个新的打印流。</li></ul><p>构造举例，代码如下：  </p><pre class=" language-java"><code class="language-java">PrintStream ps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintStream</span><span class="token punctuation">(</span><span class="token string">"ps.txt"</span><span class="token punctuation">)</span>；</code></pre><h3 id="改变打印流向"><a href="#改变打印流向" class="headerlink" title="改变打印流向"></a>改变打印流向</h3><p><code>System.out</code>就是<code>PrintStream</code>类型的，只不过它的流向是系统规定的，打印在控制台上。不过，既然是流对象，我们就可以玩一个”小把戏”，改变它的流向。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PrintDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 调用系统的打印流,控制台直接输出97</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// 创建打印流,指定文件的名称</span>        PrintStream ps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintStream</span><span class="token punctuation">(</span><span class="token string">"ps.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 设置系统的打印流流向,输出到ps.txt</span>        System<span class="token punctuation">.</span><span class="token function">setOut</span><span class="token punctuation">(</span>ps<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 调用系统的打印流,ps.txt中输出97</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="form-www-itcast-com"><a href="#form-www-itcast-com" class="headerlink" title="form  www.itcast.com"></a>form  <a href="http://www.itcast.com/">www.itcast.com</a></h3>]]></content>
      
      
      <categories>
          
          <category> IO流 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo博客环境变量丢失解决方案</title>
      <link href="2020/08/12/hexo-bo-ke-huan-jing-bian-liang-diu-shi-jie-jue-fang-an/"/>
      <url>2020/08/12/hexo-bo-ke-huan-jing-bian-liang-diu-shi-jie-jue-fang-an/</url>
      
        <content type="html"><![CDATA[<h3 id="1-先检查node是否可以正常启动"><a href="#1-先检查node是否可以正常启动" class="headerlink" title="1.先检查node是否可以正常启动"></a>1.先检查node是否可以正常启动</h3><pre><code>node  -v</code></pre><p>出现版本号为正常启动，这个步骤可以跳过</p><p>若显示node 不是内部或外部命令，则说明需要配置node的环境变量。</p><p>找到安装的nodejs文件夹，复制路径，添加到环境变量</p><p><img src="https://i.loli.net/2020/08/12/rs5aceXuKZwojVv.png" alt="node.png"></p><h3 id="2-检查hexo"><a href="#2-检查hexo" class="headerlink" title="2.检查hexo"></a>2.检查hexo</h3><p>使用 hexo -s等命令的时候，出现conmand not found的提示，则需要配置hexo环境变量。</p><p><code>E:\blog\node_modules\hexo\bin</code><br>找到hexo博客文件夹目录（上面的目录，在hexo文件夹下）</p><p>按照第一步配置环境变量</p><p><img src="https://i.loli.net/2020/08/12/2MjX5qGWhEQIpg8.png" alt="bin.png"></p><p>打开git，使用hexo -s就可以使用了</p><h3 id="如果还是无效的话，把上面添加的两个环境变量顺序换一下！！！！"><a href="#如果还是无效的话，把上面添加的两个环境变量顺序换一下！！！！" class="headerlink" title="如果还是无效的话，把上面添加的两个环境变量顺序换一下！！！！"></a>如果还是无效的话，把上面添加的两个环境变量顺序换一下！！！！</h3>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo环境变量丢失 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字节流、字符流学习笔记</title>
      <link href="2020/08/10/zi-jie-liu-zi-fu-liu/"/>
      <url>2020/08/10/zi-jie-liu-zi-fu-liu/</url>
      
        <content type="html"><![CDATA[<h1 id="字节流、字符流"><a href="#字节流、字符流" class="headerlink" title="字节流、字符流"></a>字节流、字符流</h1><h2 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h2><ul><li>IO流</li><li>字节流</li><li>字符流</li><li>异常处理</li><li>Properties</li></ul><a id="more"></a><h2 id="教学目标"><a href="#教学目标" class="headerlink" title="教学目标"></a>教学目标</h2><ul><li><input disabled="" type="checkbox"> 能够说出IO流的分类和功能</li><li><input disabled="" type="checkbox"> 能够使用字节输出流写出数据到文件</li><li><input disabled="" type="checkbox"> 能够使用字节输入流读取数据到程序</li><li><input disabled="" type="checkbox"> 能够理解读取数据read(byte[])方法的原理</li><li><input disabled="" type="checkbox"> 能够使用字节流完成文件的复制</li><li><input disabled="" type="checkbox"> 能够使用FileWirter写数据到文件</li><li><input disabled="" type="checkbox"> 能够说出FileWriter中关闭和刷新方法的区别</li><li><input disabled="" type="checkbox"> 能够使用FileWriter写数据的5个方法</li><li><input disabled="" type="checkbox"> 能够使用FileWriter写数据实现换行和追加写</li><li><input disabled="" type="checkbox"> 能够使用FileReader读数据</li><li><input disabled="" type="checkbox"> 能够使用FileReader读数据一次一个字符数组</li><li><input disabled="" type="checkbox"> 能够使用Properties的load方法加载文件中配置信息</li></ul><h1 id="第一章-IO概述"><a href="#第一章-IO概述" class="headerlink" title="第一章 IO概述"></a>第一章 IO概述</h1><h2 id="1-1-什么是IO"><a href="#1-1-什么是IO" class="headerlink" title="1.1 什么是IO"></a>1.1 什么是IO</h2><p>生活中，你肯定经历过这样的场景。当你编辑一个文本文件，忘记了<code>ctrl+s</code> ，可能文件就白白编辑了。当你电脑上插入一个U盘，可以把一个视频，拷贝到你的电脑硬盘里。那么数据都是在哪些设备上的呢？键盘、内存、硬盘、外接设备等等。</p><p>我们把这种数据的传输，可以看做是一种数据的流动，按照流动的方向，以内存为基准，分为<code>输入input</code> 和<code>输出output</code> ，即流向内存是输入流，流出内存的输出流。</p><p>Java中I/O操作主要是指使用<code>java.io</code>包下的内容，进行输入、输出操作。<strong>输入</strong>也叫做<strong>读取</strong>数据，<strong>输出</strong>也叫做作<strong>写出</strong>数据。</p><h2 id="1-2-IO的分类"><a href="#1-2-IO的分类" class="headerlink" title="1.2 IO的分类"></a>1.2 IO的分类</h2><p>根据数据的流向分为：<strong>输入流</strong>和<strong>输出流</strong>。</p><ul><li><strong>输入流</strong> ：把数据从<code>其他设备</code>上读取到<code>内存</code>中的流。 </li><li><strong>输出流</strong> ：把数据从<code>内存</code> 中写出到<code>其他设备</code>上的流。</li></ul><p>格局数据的类型分为：<strong>字节流</strong>和<strong>字符流</strong>。</p><ul><li><strong>字节流</strong> ：以字节为单位，读写数据的流。</li><li><strong>字符流</strong> ：以字符为单位，读写数据的流。</li></ul><h2 id="1-3-IO的流向说明图解"><a href="#1-3-IO的流向说明图解" class="headerlink" title="1.3 IO的流向说明图解"></a>1.3 IO的流向说明图解</h2><p><img src="img/1_io.jpg"></p><h2 id="1-4-顶级父类们"><a href="#1-4-顶级父类们" class="headerlink" title="1.4 顶级父类们"></a>1.4 顶级父类们</h2><table><thead><tr><th align="center"></th><th align="center"><strong>输入流</strong></th><th align="center">输出流</th></tr></thead><tbody><tr><td align="center"><strong>字节流</strong></td><td align="center">字节输入流<br><strong>InputStream</strong></td><td align="center">字节输出流<br><strong>OutputStream</strong></td></tr><tr><td align="center"><strong>字符流</strong></td><td align="center">字符输入流<br><strong>Reader</strong></td><td align="center">字符输出流<br><strong>Writer</strong></td></tr></tbody></table><h1 id="第二章-字节流"><a href="#第二章-字节流" class="headerlink" title="第二章 字节流"></a>第二章 字节流</h1><h2 id="2-1-一切皆为字节"><a href="#2-1-一切皆为字节" class="headerlink" title="2.1 一切皆为字节"></a>2.1 一切皆为字节</h2><p>一切文件数据(文本、图片、视频等)在存储时，都是以二进制数字的形式保存，都一个一个的字节，那么传输时一样如此。所以，字节流可以传输任意文件数据。在操作流的时候，我们要时刻明确，无论使用什么样的流对象，底层传输的始终为二进制数据。</p><h2 id="2-2-字节输出流【OutputStream】"><a href="#2-2-字节输出流【OutputStream】" class="headerlink" title="2.2 字节输出流【OutputStream】"></a>2.2 字节输出流【OutputStream】</h2><p><code>java.io.OutputStream </code>抽象类是表示字节输出流的所有类的超类，将指定的字节信息写出到目的地。它定义了字节输出流的基本共性功能方法。</p><ul><li><code>public void close()</code> ：关闭此输出流并释放与此流相关联的任何系统资源。  </li><li><code>public void flush() </code> ：刷新此输出流并强制任何缓冲的输出字节被写出。  </li><li><code>public void write(byte[] b)</code>：将 b.length字节从指定的字节数组写入此输出流。  </li><li><code>public void write(byte[] b, int off, int len)</code> ：从指定的字节数组写入 len字节，从偏移量 off开始输出到此输出流。  </li><li><code>public abstract void write(int b)</code> ：将指定的字节输出流。</li></ul><blockquote><p>小贴士：</p><p>close方法，当完成流的操作时，必须调用此方法，释放系统资源。</p></blockquote><h2 id="2-3-FileOutputStream类"><a href="#2-3-FileOutputStream类" class="headerlink" title="2.3 FileOutputStream类"></a>2.3 FileOutputStream类</h2><p><code>OutputStream</code>有很多子类，我们从最简单的一个子类开始。</p><p><code>java.io.FileOutputStream </code>类是文件输出流，用于将数据写出到文件。</p><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><ul><li><code>public FileOutputStream(File file)</code>：创建文件输出流以写入由指定的 File对象表示的文件。 </li><li><code>public FileOutputStream(String name)</code>： 创建文件输出流以指定的名称写入文件。  </li></ul><p>当你创建一个流对象时，必须传入一个文件路径。该路径下，如果没有这个文件，会创建该文件。如果有这个文件，会清空这个文件的数据。</p><ul><li>构造举例，代码如下：</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileOutputStreamConstructor</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 使用File对象创建流对象</span>        File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FileOutputStream fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// 使用文件名称创建流对象</span>        FileOutputStream fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"b.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="写出字节数据"><a href="#写出字节数据" class="headerlink" title="写出字节数据"></a>写出字节数据</h3><ol><li><strong>写出字节</strong>：<code>write(int b)</code> 方法，每次可以写出一个字节数据，代码使用演示：</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FOSWrite</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 使用文件名称创建流对象</span>        FileOutputStream fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"fos.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">// 写出数据</span>          fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 写出第1个字节</span>          fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">98</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 写出第2个字节</span>          fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 写出第3个字节</span>          <span class="token comment" spellcheck="true">// 关闭资源</span>        fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>输出结果：abc</code></pre><blockquote><p>小贴士：</p><ol><li>虽然参数为int类型四个字节，但是只会保留一个字节的信息写出。</li><li>流操作完毕后，必须释放系统资源，调用close方法，千万记得。</li></ol></blockquote><ol start="2"><li><strong>写出字节数组</strong>：<code>write(byte[] b)</code>，每次可以写出数组中的数据，代码使用演示：</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FOSWrite</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 使用文件名称创建流对象</span>        FileOutputStream fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"fos.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">// 字符串转换为字节数组</span>          <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token string">"黑马程序员"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 写出字节数组数据</span>          fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 关闭资源</span>        fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>输出结果：黑马程序员</code></pre><ol start="3"><li><strong>写出指定长度字节数组</strong>：<code>write(byte[] b, int off, int len)</code> ,每次写出从off索引开始，len个字节，代码使用演示：</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FOSWrite</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 使用文件名称创建流对象</span>        FileOutputStream fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"fos.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">// 字符串转换为字节数组</span>          <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token string">"abcde"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 写出从索引2开始，2个字节。索引2是c，两个字节，也就是cd。</span>        fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 关闭资源</span>        fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>输出结果：cd</code></pre><h3 id="数据追加续写"><a href="#数据追加续写" class="headerlink" title="数据追加续写"></a>数据追加续写</h3><p>经过以上的演示，每次程序运行，创建输出流对象，都会清空目标文件中的数据。如何保留目标文件中数据，还能继续添加新数据呢？</p><ul><li><code>public FileOutputStream(File file, boolean append)</code>： 创建文件输出流以写入由指定的 File对象表示的文件。  </li><li><code>public FileOutputStream(String name, boolean append)</code>： 创建文件输出流以指定的名称写入文件。  </li></ul><p>这两个构造方法，参数中都需要传入一个boolean类型的值，<code>true</code> 表示追加数据，<code>false</code> 表示清空原有数据。这样创建的输出流对象，就可以指定是否追加续写了，代码使用演示：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FOSWrite</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 使用文件名称创建流对象</span>        FileOutputStream fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"fos.txt"</span>，<span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">// 字符串转换为字节数组</span>          <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token string">"abcde"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 写出从索引2开始，2个字节。索引2是c，两个字节，也就是cd。</span>        fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 关闭资源</span>        fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>文件操作前：cd文件操作后：cdabcde</code></pre><h3 id="写出换行"><a href="#写出换行" class="headerlink" title="写出换行"></a>写出换行</h3><p>Windows系统里，换行符号是<code>\r\n</code> 。把</p><p>以指定是否追加续写了，代码使用演示：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FOSWrite</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 使用文件名称创建流对象</span>        FileOutputStream fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"fos.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 定义字节数组</span>          <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> words <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">97</span><span class="token punctuation">,</span><span class="token number">98</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">}</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 遍历数组</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> words<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">// 写出一个字节</span>            fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>words<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// 写出一个换行, 换行符号转成数组写出</span>            fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>          <span class="token comment" spellcheck="true">// 关闭资源</span>        fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>输出结果：abcde</code></pre><blockquote><ul><li>回车符<code>\r</code>和换行符<code>\n</code> ：<ul><li>回车符：回到一行的开头（return）。</li><li>换行符：下一行（newline）。</li></ul></li><li>系统中的换行：<ul><li>Windows系统里，每行结尾是 <code>回车+换行</code> ，即<code>\r\n</code>；</li><li>Unix系统里，每行结尾只有 <code>换行</code> ，即<code>\n</code>；</li><li>Mac系统里，每行结尾是 <code>回车</code> ，即<code>\r</code>。从 Mac OS X开始与Linux统一。</li></ul></li></ul></blockquote><h2 id="2-4-字节输入流【InputStream】"><a href="#2-4-字节输入流【InputStream】" class="headerlink" title="2.4 字节输入流【InputStream】"></a>2.4 字节输入流【InputStream】</h2><p><code>java.io.InputStream </code>抽象类是表示字节输入流的所有类的超类，可以读取字节信息到内存中。它定义了字节输入流的基本共性功能方法。</p><ul><li><code>public void close()</code> ：关闭此输入流并释放与此流相关联的任何系统资源。    </li><li><code>public abstract int read()</code>： 从输入流读取数据的下一个字节。 </li><li><code>public int read(byte[] b)</code>： 从输入流中读取一些字节数，并将它们存储到字节数组 b中 。</li></ul><blockquote><p>小贴士：</p><p>close方法，当完成流的操作时，必须调用此方法，释放系统资源。</p></blockquote><h2 id="2-5-FileInputStream类"><a href="#2-5-FileInputStream类" class="headerlink" title="2.5 FileInputStream类"></a>2.5 FileInputStream类</h2><p><code>java.io.FileInputStream </code>类是文件输入流，从文件中读取字节。</p><h3 id="构造方法-1"><a href="#构造方法-1" class="headerlink" title="构造方法"></a>构造方法</h3><ul><li><code>FileInputStream(File file)</code>： 通过打开与实际文件的连接来创建一个 FileInputStream ，该文件由文件系统中的 File对象 file命名。 </li><li><code>FileInputStream(String name)</code>： 通过打开与实际文件的连接来创建一个 FileInputStream ，该文件由文件系统中的路径名 name命名。  </li></ul><p>当你创建一个流对象时，必须传入一个文件路径。该路径下，如果没有该文件,会抛出<code>FileNotFoundException</code> 。</p><ul><li>构造举例，代码如下：</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileInputStreamConstructor</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 使用File对象创建流对象</span>        File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FileInputStream fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// 使用文件名称创建流对象</span>        FileInputStream fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"b.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="读取字节数据"><a href="#读取字节数据" class="headerlink" title="读取字节数据"></a>读取字节数据</h3><ol><li><strong>读取字节</strong>：<code>read</code>方法，每次可以读取一个字节的数据，提升为int类型，读取到文件末尾，返回<code>-1</code>，代码使用演示：</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FISRead</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 使用文件名称创建流对象</span>           FileInputStream fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"read.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 读取数据，返回一个字节</span>        <span class="token keyword">int</span> read <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> read<span class="token punctuation">)</span><span class="token punctuation">;</span>        read <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> read<span class="token punctuation">)</span><span class="token punctuation">;</span>        read <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> read<span class="token punctuation">)</span><span class="token punctuation">;</span>        read <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> read<span class="token punctuation">)</span><span class="token punctuation">;</span>        read <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> read<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 读取到末尾,返回-1</span>           read <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> read<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 关闭资源</span>        fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>输出结果：abcde<span class="token operator">-</span><span class="token number">1</span></code></pre><p>循环改进读取方式，代码使用演示：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FISRead</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 使用文件名称创建流对象</span>           FileInputStream fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"read.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 定义变量，保存数据</span>        <span class="token keyword">int</span> b ；        <span class="token comment" spellcheck="true">// 循环读取</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>b <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 关闭资源</span>        fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>输出结果：abcde</code></pre><blockquote><p>小贴士：</p><ol><li>虽然读取了一个字节，但是会自动提升为int类型。</li><li>流操作完毕后，必须释放系统资源，调用close方法，千万记得。</li></ol></blockquote><ol start="2"><li><strong>使用字节数组读取</strong>：<code>read(byte[] b)</code>，每次读取b的长度个字节到数组中，返回读取到的有效字节个数，读取到末尾时，返回<code>-1</code> ，代码使用演示：</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FISRead</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 使用文件名称创建流对象.</span>           FileInputStream fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"read.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 文件中为abcde</span>          <span class="token comment" spellcheck="true">// 定义变量，作为有效个数</span>        <span class="token keyword">int</span> len ；        <span class="token comment" spellcheck="true">// 定义字节数组，作为装字节数据的容器   </span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 循环读取</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span> len<span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token comment" spellcheck="true">// 每次读取后,把数组变成字符串打印</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 关闭资源</span>        fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>输出结果：abcded</code></pre><p>错误数据<code>d</code>，是由于最后一次读取时，只读取一个字节<code>e</code>，数组中，上次读取的数据没有被完全替换，所以要通过<code>len</code> ，获取有效的字节，代码使用演示：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FISRead</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 使用文件名称创建流对象.</span>           FileInputStream fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"read.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 文件中为abcde</span>          <span class="token comment" spellcheck="true">// 定义变量，作为有效个数</span>        <span class="token keyword">int</span> len ；        <span class="token comment" spellcheck="true">// 定义字节数组，作为装字节数据的容器   </span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 循环读取</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span> len<span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token comment" spellcheck="true">// 每次读取后,把数组的有效字节部分，变成字符串打印</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>b，<span class="token number">0</span>，len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//  len 每次读取的有效字节个数</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 关闭资源</span>        fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>输出结果：abcde</code></pre><blockquote><p>小贴士：</p><p>使用数组读取，每次读取多个字节，减少了系统间的IO操作次数，从而提高了读写的效率，建议开发中使用。</p></blockquote><h2 id="2-6-字节流练习：图片复制"><a href="#2-6-字节流练习：图片复制" class="headerlink" title="2.6 字节流练习：图片复制"></a>2.6 字节流练习：图片复制</h2><h3 id="复制原理图解"><a href="#复制原理图解" class="headerlink" title="复制原理图解"></a>复制原理图解</h3><p><img src="img/2_copy.jpg"></p><h3 id="案例实现"><a href="#案例实现" class="headerlink" title="案例实现"></a>案例实现</h3><p>复制图片文件，代码使用演示：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Copy</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1.创建流对象</span>        <span class="token comment" spellcheck="true">// 1.1 指定数据源</span>        FileInputStream fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"D:\\test.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 1.2 指定目的地</span>        FileOutputStream fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"test_copy.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2.读写数据</span>        <span class="token comment" spellcheck="true">// 2.1 定义数组</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2.2 定义长度</span>        <span class="token keyword">int</span> len<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2.3 循环读取</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 2.4 写出数据</span>            fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 3.关闭资源</span>        fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>小贴士：</p><p>流的关闭原则：先开后关，后开先关。</p></blockquote><h1 id="第三章-字符流"><a href="#第三章-字符流" class="headerlink" title="第三章 字符流"></a>第三章 字符流</h1><p>当使用字节流读取文本文件时，可能会有一个小问题。就是遇到中文字符时，可能不会显示完整的字符，那是因为一个中文字符可能占用多个字节存储。所以Java提供一些字符流类，以字符为单位读写数据，专门用于处理文本文件。</p><h2 id="3-1-字符输入流【Reader】"><a href="#3-1-字符输入流【Reader】" class="headerlink" title="3.1 字符输入流【Reader】"></a>3.1 字符输入流【Reader】</h2><p><code>java.io.Reader</code>抽象类是表示用于读取字符流的所有类的超类，可以读取字符信息到内存中。它定义了字符输入流的基本共性功能方法。</p><ul><li><code>public void close()</code> ：关闭此流并释放与此流相关联的任何系统资源。    </li><li><code>public int read()</code>： 从输入流读取一个字符。 </li><li><code>public int read(char[] cbuf)</code>： 从输入流中读取一些字符，并将它们存储到字符数组 cbuf中 。</li></ul><h2 id="3-2-FileReader类"><a href="#3-2-FileReader类" class="headerlink" title="3.2 FileReader类"></a>3.2 FileReader类</h2><p><code>java.io.FileReader </code>类是读取字符文件的便利类。构造时使用系统默认的字符编码和默认字节缓冲区。</p><blockquote><p>小贴士：</p><ol><li><p>字符编码：字节与字符的对应规则。Windows系统的中文编码默认是GBK编码表。</p><p>idea中UTF-8</p></li><li><p>字节缓冲区：一个字节数组，用来临时存储字节数据。</p></li></ol></blockquote><h3 id="构造方法-2"><a href="#构造方法-2" class="headerlink" title="构造方法"></a>构造方法</h3><ul><li><code>FileReader(File file)</code>： 创建一个新的 FileReader ，给定要读取的File对象。   </li><li><code>FileReader(String fileName)</code>： 创建一个新的 FileReader ，给定要读取的文件的名称。  </li></ul><p>当你创建一个流对象时，必须传入一个文件路径。类似于FileInputStream 。</p><ul><li>构造举例，代码如下：</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileReaderConstructor</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 使用File对象创建流对象</span>        File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FileReader fr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// 使用文件名称创建流对象</span>        FileReader fr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"b.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="读取字符数据"><a href="#读取字符数据" class="headerlink" title="读取字符数据"></a>读取字符数据</h3><ol><li><strong>读取字符</strong>：<code>read</code>方法，每次可以读取一个字符的数据，提升为int类型，读取到文件末尾，返回<code>-1</code>，循环读取，代码使用演示：</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FRRead</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 使用文件名称创建流对象</span>           FileReader fr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"read.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 定义变量，保存数据</span>        <span class="token keyword">int</span> b ；        <span class="token comment" spellcheck="true">// 循环读取</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>b <span class="token operator">=</span> fr<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 关闭资源</span>        fr<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>输出结果：黑马程序员</code></pre><blockquote><p>小贴士：虽然读取了一个字符，但是会自动提升为int类型。</p></blockquote><ol start="2"><li><strong>使用字符数组读取</strong>：<code>read(char[] cbuf)</code>，每次读取b的长度个字符到数组中，返回读取到的有效字符个数，读取到末尾时，返回<code>-1</code> ，代码使用演示：</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FRRead</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 使用文件名称创建流对象</span>           FileReader fr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"read.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 定义变量，保存有效字符个数</span>        <span class="token keyword">int</span> len ；        <span class="token comment" spellcheck="true">// 定义字符数组，作为装字符数据的容器</span>         <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cbuf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">char</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 循环读取</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> fr<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>cbuf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>cbuf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 关闭资源</span>        fr<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>输出结果：黑马程序员序</code></pre><p>获取有效的字符改进，代码使用演示：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FISRead</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 使用文件名称创建流对象</span>           FileReader fr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"read.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 定义变量，保存有效字符个数</span>        <span class="token keyword">int</span> len ；        <span class="token comment" spellcheck="true">// 定义字符数组，作为装字符数据的容器</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cbuf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">char</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 循环读取</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> fr<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>cbuf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>cbuf<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 关闭资源</span>        fr<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>输出结果：黑马程序员</code></pre><h2 id="3-3-字符输出流【Writer】"><a href="#3-3-字符输出流【Writer】" class="headerlink" title="3.3 字符输出流【Writer】"></a>3.3 字符输出流【Writer】</h2><p><code>java.io.Writer </code>抽象类是表示用于写出字符流的所有类的超类，将指定的字符信息写出到目的地。它定义了字节输出流的基本共性功能方法。</p><ul><li><code>void write(int c)</code> 写入单个字符。</li><li><code>void write(char[] cbuf) </code>写入字符数组。 </li><li><code>abstract  void write(char[] cbuf, int off, int len) </code>写入字符数组的某一部分,off数组的开始索引,len写的字符个数。 </li><li><code>void write(String str) </code>写入字符串。 </li><li><code>void write(String str, int off, int len)</code> 写入字符串的某一部分,off字符串的开始索引,len写的字符个数。</li><li><code>void flush() </code>刷新该流的缓冲。  </li><li><code>void close()</code> 关闭此流，但要先刷新它。 </li></ul><h2 id="3-4-FileWriter类"><a href="#3-4-FileWriter类" class="headerlink" title="3.4 FileWriter类"></a>3.4 FileWriter类</h2><p><code>java.io.FileWriter </code>类是写出字符到文件的便利类。构造时使用系统默认的字符编码和默认字节缓冲区。</p><h3 id="构造方法-3"><a href="#构造方法-3" class="headerlink" title="构造方法"></a>构造方法</h3><ul><li><code>FileWriter(File file)</code>： 创建一个新的 FileWriter，给定要读取的File对象。   </li><li><code>FileWriter(String fileName)</code>： 创建一个新的 FileWriter，给定要读取的文件的名称。  </li></ul><p>当你创建一个流对象时，必须传入一个文件路径，类似于FileOutputStream。</p><ul><li>构造举例，代码如下：</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileWriterConstructor</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 使用File对象创建流对象</span>        File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FileWriter fw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// 使用文件名称创建流对象</span>        FileWriter fw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">"b.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="基本写出数据"><a href="#基本写出数据" class="headerlink" title="基本写出数据"></a>基本写出数据</h3><p><strong>写出字符</strong>：<code>write(int b)</code> 方法，每次可以写出一个字符数据，代码使用演示：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FWWrite</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 使用文件名称创建流对象</span>        FileWriter fw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">"fw.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">// 写出数据</span>          fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 写出第1个字符</span>          fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 写出第2个字符</span>          fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'C'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 写出第3个字符</span>          fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">30000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 写出第4个字符，中文编码表中30000对应一个汉字。</span>                <span class="token comment" spellcheck="true">/*        【注意】关闭资源时,与FileOutputStream不同。           如果不关闭,数据只是保存到缓冲区，并未保存到文件。        */</span>        <span class="token comment" spellcheck="true">// fw.close();</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>输出结果：abC田</code></pre><blockquote><p>小贴士：</p><ol><li>虽然参数为int类型四个字节，但是只会保留一个字符的信息写出。</li><li>未调用close方法，数据只是保存到了缓冲区，并未写出到文件中。</li></ol></blockquote><h3 id="关闭和刷新"><a href="#关闭和刷新" class="headerlink" title="关闭和刷新"></a>关闭和刷新</h3><p>因为内置缓冲区的原因，如果不关闭输出流，无法写出字符到文件中。但是关闭的流对象，是无法继续写出数据的。如果我们既想写出数据，又想继续使用流，就需要<code>flush</code> 方法了。</p><ul><li><code>flush</code> ：刷新缓冲区，流对象可以继续使用。</li><li><code>close </code>:先刷新缓冲区，然后通知系统释放资源。流对象不可以再被使用了。</li></ul><p>代码使用演示：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FWWrite</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 使用文件名称创建流对象</span>        FileWriter fw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">"fw.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 写出数据，通过flush</span>        fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'刷'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 写出第1个字符</span>        fw<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'新'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 继续写出第2个字符，写出成功</span>        fw<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 写出数据，通过close</span>        fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'关'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 写出第1个字符</span>        fw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'闭'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 继续写出第2个字符,【报错】java.io.IOException: Stream closed</span>        fw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>小贴士：即便是flush方法写出了数据，操作的最后还是要调用close方法，释放系统资源。</p></blockquote><h3 id="写出其他数据"><a href="#写出其他数据" class="headerlink" title="写出其他数据"></a>写出其他数据</h3><ol><li><strong>写出字符数组</strong> ：<code>write(char[] cbuf)</code> 和 <code>write(char[] cbuf, int off, int len)</code> ，每次可以写出字符数组中的数据，用法类似FileOutputStream，代码使用演示：</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FWWrite</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 使用文件名称创建流对象</span>        FileWriter fw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">"fw.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">// 字符串转换为字节数组</span>          <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> <span class="token string">"黑马程序员"</span><span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 写出字符数组</span>          fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>chars<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 黑马程序员</span>                <span class="token comment" spellcheck="true">// 写出从索引2开始，2个字节。索引2是'程'，两个字节，也就是'程序'。</span>        fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 程序</span>                <span class="token comment" spellcheck="true">// 关闭资源</span>        fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="2"><li><strong>写出字符串</strong>：<code>write(String str)</code> 和 <code>write(String str, int off, int len)</code> ，每次可以写出字符串中的数据，更为方便，代码使用演示：</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FWWrite</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 使用文件名称创建流对象</span>        FileWriter fw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">"fw.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">// 字符串</span>          String msg <span class="token operator">=</span> <span class="token string">"黑马程序员"</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 写出字符数组</span>          fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//黑马程序员</span>              <span class="token comment" spellcheck="true">// 写出从索引2开始，2个字节。索引2是'程'，两个字节，也就是'程序'。</span>        fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 程序</span>                  <span class="token comment" spellcheck="true">// 关闭资源</span>        fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="3"><li><strong>续写和换行</strong>：操作类似于FileOutputStream。</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FWWrite</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 使用文件名称创建流对象，可以续写数据</span>        FileWriter fw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">"fw.txt"</span>，<span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">// 写出字符串</span>        fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"黑马"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 写出换行</span>          fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 写出字符串</span>          fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"程序员"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 关闭资源</span>        fw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>输出结果<span class="token operator">:</span>黑马程序员</code></pre><blockquote><p>小贴士：字符流，只能操作文本文件，不能操作图片，视频等非文本文件。</p><p>当我们单纯读或者写文本文件时  使用字符流 其他情况使用字节流</p></blockquote><h1 id="第四章-IO异常的处理"><a href="#第四章-IO异常的处理" class="headerlink" title="第四章 IO异常的处理"></a>第四章 IO异常的处理</h1><h3 id="JDK7前处理"><a href="#JDK7前处理" class="headerlink" title="JDK7前处理"></a>JDK7前处理</h3><p>之前的入门练习，我们一直把异常抛出，而实际开发中并不能这样处理，建议使用<code>try...catch...finally</code> 代码块，处理异常部分，代码使用演示：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HandleException1</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 声明变量</span>        FileWriter fw <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//创建流对象</span>            fw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">"fw.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 写出数据</span>            fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"黑马程序员"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//黑马程序员</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>fw <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    fw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="JDK7的处理-扩展知识点了解内容"><a href="#JDK7的处理-扩展知识点了解内容" class="headerlink" title="JDK7的处理(扩展知识点了解内容)"></a>JDK7的处理(扩展知识点了解内容)</h3><p>还可以使用JDK7优化后的<code>try-with-resource</code> 语句，该语句确保了每个资源在语句结束时关闭。所谓的资源（resource）是指在程序完成后，必须关闭的对象。</p><p>格式：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">(</span>创建流对象语句，如果多个<span class="token punctuation">,</span>使用<span class="token string">';'</span>隔开<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 读写数据</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>代码使用演示：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HandleException2</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 创建流对象</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span> FileWriter fw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">"fw.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 写出数据</span>            fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"黑马程序员"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//黑马程序员</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="JDK9的改进-扩展知识点了解内容"><a href="#JDK9的改进-扩展知识点了解内容" class="headerlink" title="JDK9的改进(扩展知识点了解内容)"></a>JDK9的改进(扩展知识点了解内容)</h3><p>JDK9中<code>try-with-resource</code> 的改进，对于<strong>引入对象</strong>的方式，支持的更加简洁。被引入的对象，同样可以自动关闭，无需手动close，我们来了解一下格式。</p><p>改进前格式：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 被final修饰的对象</span><span class="token keyword">final</span> Resource resource1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Resource</span><span class="token punctuation">(</span><span class="token string">"resource1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 普通对象</span>Resource resource2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Resource</span><span class="token punctuation">(</span><span class="token string">"resource2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 引入方式：创建新的变量保存</span><span class="token keyword">try</span> <span class="token punctuation">(</span>Resource r1 <span class="token operator">=</span> resource1<span class="token punctuation">;</span>     Resource r2 <span class="token operator">=</span> resource2<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 使用对象</span><span class="token punctuation">}</span></code></pre><p>改进后格式：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 被final修饰的对象</span><span class="token keyword">final</span> Resource resource1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Resource</span><span class="token punctuation">(</span><span class="token string">"resource1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 普通对象</span>Resource resource2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Resource</span><span class="token punctuation">(</span><span class="token string">"resource2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 引入方式：直接引入</span><span class="token keyword">try</span> <span class="token punctuation">(</span>resource1<span class="token punctuation">;</span> resource2<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 使用对象</span><span class="token punctuation">}</span></code></pre><p>改进后，代码使用演示：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TryDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>           <span class="token comment" spellcheck="true">// 创建流对象</span>        <span class="token keyword">final</span>  FileReader fr  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"in.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FileWriter fw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">"out.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// 引入到try中</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span>fr<span class="token punctuation">;</span> fw<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">// 定义变量</span>            <span class="token keyword">int</span> b<span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// 读取数据</span>              <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>b <span class="token operator">=</span> fr<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 写出数据</span>                fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="第五章-属性集"><a href="#第五章-属性集" class="headerlink" title="第五章 属性集"></a>第五章 属性集</h1><h2 id="5-1-概述"><a href="#5-1-概述" class="headerlink" title="5.1 概述"></a>5.1 概述</h2><p><code>java.util.Properties </code> 继承于<code> Hashtable</code> ，来表示一个持久的属性集。它使用键值结构存储数据，每个键及其对应值都是一个字符串。该类也被许多Java类使用，比如获取系统属性时，<code>System.getProperties</code> 方法就是返回一个<code>Properties</code>对象。</p><h2 id="5-2-Properties类"><a href="#5-2-Properties类" class="headerlink" title="5.2 Properties类"></a>5.2 Properties类</h2><h3 id="构造方法-4"><a href="#构造方法-4" class="headerlink" title="构造方法"></a>构造方法</h3><ul><li><code>public Properties()</code> :创建一个空的属性列表。</li></ul><h3 id="基本的存储方法"><a href="#基本的存储方法" class="headerlink" title="基本的存储方法"></a>基本的存储方法</h3><ul><li><code>public Object setProperty(String key, String value)</code> ： 保存一对属性。  </li><li><code>public String getProperty(String key) </code> ：使用此属性列表中指定的键搜索属性值。</li><li><code>public Set&lt;String&gt; stringPropertyNames() </code> ：所有键的名称的集合。</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> FileNotFoundException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建属性集对象</span>        Properties properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 添加键值对元素</span>        properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"filename"</span><span class="token punctuation">,</span> <span class="token string">"a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"length"</span><span class="token punctuation">,</span> <span class="token string">"209385038"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"location"</span><span class="token punctuation">,</span> <span class="token string">"D:\\a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 打印属性集对象</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 通过键,获取属性值</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"filename"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"length"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"location"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 遍历属性集,获取所有键的集合</span>        Set<span class="token operator">&lt;</span>String<span class="token operator">></span> strings <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">stringPropertyNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 打印键值对</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String key <span class="token operator">:</span> strings <span class="token punctuation">)</span> <span class="token punctuation">{</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key<span class="token operator">+</span><span class="token string">" -- "</span><span class="token operator">+</span>properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>输出结果：<span class="token punctuation">{</span>filename<span class="token operator">=</span>a<span class="token punctuation">.</span>txt<span class="token punctuation">,</span> length<span class="token operator">=</span><span class="token number">209385038</span><span class="token punctuation">,</span> location<span class="token operator">=</span>D<span class="token operator">:</span>\a<span class="token punctuation">.</span>txt<span class="token punctuation">}</span>a<span class="token punctuation">.</span>txt<span class="token number">209385038</span>D<span class="token operator">:</span>\a<span class="token punctuation">.</span>txtfilename <span class="token operator">--</span> a<span class="token punctuation">.</span>txtlength <span class="token operator">--</span> <span class="token number">209385038</span>location <span class="token operator">--</span> D<span class="token operator">:</span>\a<span class="token punctuation">.</span>txt</code></pre><h3 id="与流相关的方法"><a href="#与流相关的方法" class="headerlink" title="与流相关的方法"></a>与流相关的方法</h3><ul><li><code>public void load(InputStream inStream)</code>： 从字节输入流中读取键值对。 </li></ul><p>参数中使用了字节输入流，通过流对象，可以关联到某文件上，这样就能够加载文本中的数据了。文本数据格式:</p><pre><code>filename=a.txtlength=209385038location=D:\a.txt</code></pre><p>加载代码演示：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProDemo2</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> FileNotFoundException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建属性集对象</span>        Properties pro <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 加载文本中信息到属性集</span>        pro<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"read.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 遍历集合并打印</span>        Set<span class="token operator">&lt;</span>String<span class="token operator">></span> strings <span class="token operator">=</span> pro<span class="token punctuation">.</span><span class="token function">stringPropertyNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String key <span class="token operator">:</span> strings <span class="token punctuation">)</span> <span class="token punctuation">{</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key<span class="token operator">+</span><span class="token string">" -- "</span><span class="token operator">+</span>pro<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span>输出结果：filename <span class="token operator">--</span> a<span class="token punctuation">.</span>txtlength <span class="token operator">--</span> <span class="token number">209385038</span>location <span class="token operator">--</span> D<span class="token operator">:</span>\a<span class="token punctuation">.</span>txt</code></pre><blockquote><p>小贴士：文本中的数据，必须是键值对形式，可以使用空格、等号、冒号等符号分隔。</p></blockquote><h3 id="form-www-itcast-com"><a href="#form-www-itcast-com" class="headerlink" title="form  www.itcast.com"></a>form  <a href="http://www.itcast.com/">www.itcast.com</a></h3>]]></content>
      
      
      <categories>
          
          <category> IO流 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Map集合</title>
      <link href="2020/08/06/map/"/>
      <url>2020/08/06/map/</url>
      
        <content type="html"><![CDATA[<h1 id="【Map】"><a href="#【Map】" class="headerlink" title="【Map】"></a>【Map】</h1><h2 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h2><ul><li> Map集合</li></ul><h2 id="教学目标"><a href="#教学目标" class="headerlink" title="教学目标"></a>教学目标</h2><ul><li><input disabled="" type="checkbox"> 能够说出Map集合特点</li><li><input disabled="" type="checkbox"> 使用Map集合添加方法保存数据</li><li><input disabled="" type="checkbox"> 使用”键找值”的方式遍历Map集合</li><li><input disabled="" type="checkbox"> 使用”键值对”的方式遍历Map集合</li><li><input disabled="" type="checkbox"> 能够使用HashMap存储自定义键值对的数据</li><li><input disabled="" type="checkbox"> 能够使用HashMap编写斗地主洗牌发牌案例</li></ul><a id="more"></a><h1 id="第一章-Map集合"><a href="#第一章-Map集合" class="headerlink" title="第一章 Map集合"></a>第一章 Map集合</h1><h2 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1 概述"></a>1.1 概述</h2><p>现实生活中，我们常会看到这样的一种集合：IP地址与主机名，身份证号与个人，系统用户名与系统用户对象等，这种一一对应的关系，就叫做映射。Java提供了专门的集合类用来存放这种对象关系的对象，即<code>java.util.Map</code>接口。</p><p>我们通过查看<code>Map</code>接口描述，发现<code>Map</code>接口下的集合与<code>Collection</code>接口下的集合，它们存储数据的形式不同，如下图。</p><p><img src="img%5CCollection%E4%B8%8EMap.bmp"></p><ul><li><code>Collection</code>中的集合，元素是孤立存在的（理解为单身），向集合中存储元素采用一个个元素的方式存储。</li><li><code>Map</code>中的集合，元素是成对存在的(理解为夫妻)。每个元素由键与值两部分组成，通过键可以找对所对应的值。</li><li><code>Collection</code>中的集合称为单列集合，<code>Map</code>中的集合称为双列集合。</li><li>需要注意的是，<code>Map</code>中的集合不能包含重复的键，值可以重复；每个键只能对应一个值。</li></ul><h2 id="1-2-Map常用子类"><a href="#1-2-Map常用子类" class="headerlink" title="1.2  Map常用子类"></a>1.2  Map常用子类</h2><p>通过查看Map接口描述，看到Map有多个子类，这里我们主要讲解常用的HashMap集合、LinkedHashMap集合。</p><ul><li>**HashMap&lt;K,V&gt;**：存储数据采用的哈希表结构，元素的存取顺序不能保证一致。由于要保证键的唯一、不重复，需要重写键的hashCode()方法、equals()方法。</li><li>**LinkedHashMap&lt;K,V&gt;**：HashMap下有个子类LinkedHashMap，存储数据采用的哈希表结构+链表结构。通过链表结构可以保证元素的存取顺序一致；通过哈希表结构可以保证的键的唯一、不重复，需要重写键的hashCode()方法、equals()方法。</li></ul><blockquote><p>tips：Map接口中的集合都有两个泛型变量&lt;K,V&gt;,在使用时，要为两个泛型变量赋予数据类型。两个泛型变量&lt;K,V&gt;的数据类型可以相同，也可以不同。</p></blockquote><h2 id="1-3-Map接口中的常用方法"><a href="#1-3-Map接口中的常用方法" class="headerlink" title="1.3  Map接口中的常用方法"></a>1.3  Map接口中的常用方法</h2><p>Map接口中定义了很多方法，常用的如下：</p><ul><li><code>public V put(K key, V value)</code>:  把指定的键与指定的值添加到Map集合中。</li><li><code>public V remove(Object key)</code>: 把指定的键 所对应的键值对元素 在Map集合中删除，返回被删除元素的值。</li><li><code>public V get(Object key)</code> 根据指定的键，在Map集合中获取对应的值。</li><li><code>boolean containsKey(Object key)  </code> 判断集合中是否包含指定的键。</li><li><code>public Set&lt;K&gt; keySet()</code>: 获取Map集合中所有的键，存储到Set集合中。</li><li><code>public Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet()</code>: 获取到Map集合中所有的键值对对象的集合(Set集合)。</li></ul><p>Map接口的方法演示</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MapDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建 map对象</span>        HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span>  map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//添加元素到集合</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"黄晓明"</span><span class="token punctuation">,</span> <span class="token string">"杨颖"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"文章"</span><span class="token punctuation">,</span> <span class="token string">"马伊琍"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"邓超"</span><span class="token punctuation">,</span> <span class="token string">"孙俪"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//String remove(String key)</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"邓超"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 想要查看 黄晓明的媳妇 是谁</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"黄晓明"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"邓超"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>tips:</p><p>使用put方法时，若指定的键(key)在集合中没有，则没有这个键对应的值，返回null，并把指定的键值添加到集合中； </p><p>若指定的键(key)在集合中存在，则返回值为集合中键对应的值（该值为替换前的值），并把指定键所对应的值，替换成指定的新值。 </p></blockquote><h2 id="1-4-Map集合遍历键找值方式"><a href="#1-4-Map集合遍历键找值方式" class="headerlink" title="1.4   Map集合遍历键找值方式"></a>1.4   Map集合遍历键找值方式</h2><p>键找值方式：即通过元素中的键，获取键所对应的值</p><p>分析步骤：</p><ol><li>获取Map中所有的键，由于键是唯一的，所以返回一个Set集合存储所有的键。方法提示:<code>keyset()</code></li><li>遍历键的Set集合，得到每一个键。</li><li>根据键，获取键所对应的值。方法提示:<code>get(K key)</code></li></ol><p>代码演示：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MapDemo01</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建Map集合对象 </span>        HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//添加元素到集合 </span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"胡歌"</span><span class="token punctuation">,</span> <span class="token string">"霍建华"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"郭德纲"</span><span class="token punctuation">,</span> <span class="token string">"于谦"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"薛之谦"</span><span class="token punctuation">,</span> <span class="token string">"大张伟"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取所有的键  获取键集</span>        Set<span class="token operator">&lt;</span>String<span class="token operator">></span> keys <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 遍历键集 得到 每一个键</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String key <span class="token operator">:</span> keys<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">//key  就是键</span>            <span class="token comment" spellcheck="true">//获取对应值</span>            String value <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key<span class="token operator">+</span><span class="token string">"的CP是："</span><span class="token operator">+</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>遍历图解：</p><p><img src="img%5CMap%E9%9B%86%E5%90%88%E9%81%8D%E5%8E%86%E6%96%B9%E5%BC%8F%E4%B8%80.bmp"></p><h2 id="1-5-Entry键值对对象"><a href="#1-5-Entry键值对对象" class="headerlink" title="1.5  Entry键值对对象"></a>1.5  Entry键值对对象</h2><p>我们已经知道，<code>Map</code>中存放的是两种对象，一种称为<strong>key</strong>(键)，一种称为<strong>value</strong>(值)，它们在在<code>Map</code>中是一一对应关系，这一对对象又称做<code>Map</code>中的一个<code>Entry(项)</code>。<code>Entry</code>将键值对的对应关系封装成了对象。即键值对对象，这样我们在遍历<code>Map</code>集合时，就可以从每一个键值对（<code>Entry</code>）对象中获取对应的键与对应的值。</p><p> 既然Entry表示了一对键和值，那么也同样提供了获取对应键和对应值得方法：</p><ul><li><code>public K getKey()</code>：获取Entry对象中的键。</li><li><code>public V getValue()</code>：获取Entry对象中的值。</li></ul><p>在Map集合中也提供了获取所有Entry对象的方法：</p><ul><li><code>public Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet()</code>: 获取到Map集合中所有的键值对对象的集合(Set集合)。</li></ul><h2 id="1-6-Map集合遍历键值对方式"><a href="#1-6-Map集合遍历键值对方式" class="headerlink" title="1.6 Map集合遍历键值对方式"></a>1.6 Map集合遍历键值对方式</h2><p>键值对方式：即通过集合中每个键值对(Entry)对象，获取键值对(Entry)对象中的键与值。</p><p>操作步骤与图解：</p><ol><li><p> 获取Map集合中，所有的键值对(Entry)对象，以Set集合形式返回。方法提示:<code>entrySet()</code>。</p></li><li><p> 遍历包含键值对(Entry)对象的Set集合，得到每一个键值对(Entry)对象。</p></li><li><p> 通过键值对(Entry)对象，获取Entry对象中的键与值。  方法提示:<code>getkey() getValue()</code>     </p></li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MapDemo02</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建Map集合对象 </span>        HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 添加元素到集合 </span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"胡歌"</span><span class="token punctuation">,</span> <span class="token string">"霍建华"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"郭德纲"</span><span class="token punctuation">,</span> <span class="token string">"于谦"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"薛之谦"</span><span class="token punctuation">,</span> <span class="token string">"大张伟"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取 所有的 entry对象  entrySet</span>        Set<span class="token operator">&lt;</span>Entry<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">>></span> entrySet <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 遍历得到每一个entry对象</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Entry<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> entry <span class="token operator">:</span> entrySet<span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token comment" spellcheck="true">// 解析 </span>            String key <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String value <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key<span class="token operator">+</span><span class="token string">"的CP是:"</span><span class="token operator">+</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>遍历图解：</p><p><img src="img%5CMap%E9%9B%86%E5%90%88%E9%81%8D%E5%8E%86%E6%96%B9%E5%BC%8F%E4%BA%8C.bmp"></p><blockquote><p>tips：Map集合不能直接使用迭代器或者foreach进行遍历。但是转成Set之后就可以使用了。</p></blockquote><h2 id="1-7-HashMap存储自定义类型键值"><a href="#1-7-HashMap存储自定义类型键值" class="headerlink" title="1.7  HashMap存储自定义类型键值"></a>1.7  HashMap存储自定义类型键值</h2><p>练习：每位学生（姓名，年龄）都有自己的家庭住址。那么，既然有对应关系，则将学生对象和家庭住址存储到map集合中。学生作为键, 家庭住址作为值。</p><blockquote><p>注意，学生姓名相同并且年龄相同视为同一名学生。</p></blockquote><p>编写学生类：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> o<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> o<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        Student student <span class="token operator">=</span> <span class="token punctuation">(</span>Student<span class="token punctuation">)</span> o<span class="token punctuation">;</span>        <span class="token keyword">return</span> age <span class="token operator">==</span> student<span class="token punctuation">.</span>age <span class="token operator">&amp;&amp;</span> Objects<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> student<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Objects<span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>编写测试类：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HashMapTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1,创建Hashmap集合对象。</span>        Map<span class="token operator">&lt;</span>Student<span class="token punctuation">,</span>String<span class="token operator">></span>map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>Student<span class="token punctuation">,</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2,添加元素。</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token function">newStudent</span><span class="token punctuation">(</span><span class="token string">"lisi"</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"上海"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token function">newStudent</span><span class="token punctuation">(</span><span class="token string">"wangwu"</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"北京"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token function">newStudent</span><span class="token punctuation">(</span><span class="token string">"zhaoliu"</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"成都"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token function">newStudent</span><span class="token punctuation">(</span><span class="token string">"zhouqi"</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"广州"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token function">newStudent</span><span class="token punctuation">(</span><span class="token string">"wangwu"</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"南京"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//3,取出元素。键找值方式</span>        Set<span class="token operator">&lt;</span>Student<span class="token operator">></span>keySet <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>Student key<span class="token operator">:</span> keySet<span class="token punctuation">)</span><span class="token punctuation">{</span>            Stringvalue <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"....."</span><span class="token operator">+</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>当给HashMap中存放自定义对象时，如果自定义对象作为key存在，这时要保证对象唯一，必须复写对象的hashCode和equals方法(如果忘记，请回顾HashSet存放自定义对象)。</li><li>如果要保证map中存放的key和取出的顺序一致，可以使用<code>java.util.LinkedHashMap</code>集合来存放。</li></ul><h2 id="1-8-LinkedHashMap"><a href="#1-8-LinkedHashMap" class="headerlink" title="1.8   LinkedHashMap"></a>1.8   LinkedHashMap</h2><p>我们知道HashMap保证成对元素唯一，并且查询速度很快，可是成对元素存放进去是没有顺序的，那么我们要保证有序，还要速度快怎么办呢？</p><p>在HashMap下面有一个子类LinkedHashMap，它是链表和哈希表组合的一个数据存储结构。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LinkedHashMapDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        LinkedHashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"邓超"</span><span class="token punctuation">,</span> <span class="token string">"孙俪"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"李晨"</span><span class="token punctuation">,</span> <span class="token string">"范冰冰"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"刘德华"</span><span class="token punctuation">,</span> <span class="token string">"朱丽倩"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Set<span class="token operator">&lt;</span>Entry<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">>></span> entrySet <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Entry<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> entry <span class="token operator">:</span> entrySet<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"  "</span> <span class="token operator">+</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>结果:</p><pre><code>邓超  孙俪李晨  范冰冰刘德华  朱丽倩</code></pre><h2 id="1-9-Map集合练习"><a href="#1-9-Map集合练习" class="headerlink" title="1.9 Map集合练习"></a>1.9 Map集合练习</h2><p><strong>需求：</strong></p><p>计算一个字符串中每个字符出现次数。</p><p><strong>分析：</strong></p><ol><li> 获取一个字符串对象</li><li> 创建一个Map集合，键代表字符，值代表次数。</li><li> 遍历字符串得到每个字符。</li><li> 判断Map中是否有该键。</li><li> 如果没有，第一次出现，存储次数为1；如果有，则说明已经出现过，获取到对应的值进行++，再次存储。     </li><li> 打印最终结果</li></ol><p><strong>代码：</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MapTest</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//友情提示</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请录入一个字符串:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String line <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 定义 每个字符出现次数的方法</span>        <span class="token function">findChar</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">findChar</span><span class="token punctuation">(</span>String line<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1:创建一个集合 存储  字符 以及其出现的次数</span>        HashMap<span class="token operator">&lt;</span>Character<span class="token punctuation">,</span> Integer<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>Character<span class="token punctuation">,</span> Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2:遍历字符串</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> line<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">char</span> c <span class="token operator">=</span> line<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//判断 该字符 是否在键集中</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//说明这个字符没有出现过</span>                <span class="token comment" spellcheck="true">//那就是第一次</span>                map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//先获取之前的次数</span>                Integer count <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//count++;</span>                <span class="token comment" spellcheck="true">//再次存入  更新</span>                map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token operator">++</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="第二章-补充知识点"><a href="#第二章-补充知识点" class="headerlink" title="第二章 补充知识点"></a>第二章 补充知识点</h1><h2 id="2-1-JDK9对集合添加的优化"><a href="#2-1-JDK9对集合添加的优化" class="headerlink" title="2.1  JDK9对集合添加的优化"></a>2.1  JDK9对集合添加的优化</h2><p>通常，我们在代码中创建一个集合（例如，List 或 Set ），并直接用一些元素填充它。 实例化集合，几个 add方法 调用，使得代码重复。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"def"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"ghi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p> Java 9，添加了几种集合工厂方法,更方便创建少量元素的集合、map实例。新的List、Set、Map的静态工厂方法可以更方便地创建集合的不可变实例。</p><p>例子：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloJDK9</span> <span class="token punctuation">{</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>          Set<span class="token operator">&lt;</span>String<span class="token operator">></span> str1<span class="token operator">=</span>Set<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//str1.add("c");这里编译的时候不会错，但是执行的时候会报错，因为是不可变的集合  </span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">;</span>          Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Integer<span class="token operator">></span> str2<span class="token operator">=</span>Map<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>          List<span class="token operator">&lt;</span>String<span class="token operator">></span> str3<span class="token operator">=</span>List<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str3<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span> </code></pre><p>需要注意以下两点：</p><blockquote><p>1:of()方法只是Map，List，Set这三个接口的静态方法，其父类接口和子类实现并没有这类方法，比如    HashSet，ArrayList等待；</p><p>2:返回的集合是不可变的；</p></blockquote><h2 id="2-2-Debug追踪"><a href="#2-2-Debug追踪" class="headerlink" title="2.2 Debug追踪"></a>2.2 Debug追踪</h2><p><strong>使用IDEA的断点调试功能，查看程序的运行过程</strong></p><ol><li><p>在有效代码行，点击行号右边的空白区域，设置断点，程序执行到断点将停止，我们可以手动来运行程序     </p><p>   <img src="img/debug1.png"></p></li><li><p>点击Debug运行模式       <img src="img%5Cdebug2.png">                                                                                                                                                                      </p></li><li><p>程序停止在断点上不再执行，而IDEA最下方打开了Debug调试窗口  </p><p>  <img src="img%5Cdebug3.png"><img src="img%5Cdebug4.png"></p></li><li><p>Debug调试窗口介绍</p><p> <img src="img%5Cdebug5.png"></p></li><li><p>快捷键F8，代码向下执行一行,第九行执行完毕，执行到第10行（第10行还未执行）</p><p><img src="img%5Cdebug6.png"></p></li><li><p>切换到控制台面板，控制台显示 请录入一个字符串： 并且等待键盘录入</p><p><img src="img%5Cdebug7.png"></p></li><li><p>快捷键F8，程序继续向后执行，执行键盘录入操作，在控制台录入数据 ababcea</p><p><img src="img%5Cdebug8.png"></p><p>回车之后效果：<img src="img%5Cdebug9.png"></p><p>调试界面效果：<img src="img%5Cdebug0.png"></p></li><li><p>此时到达findChar方法，快捷键F7，进入方法findChar</p><p><img src="img%5Cdebug11.png"></p></li><li><p>快捷键F8 接续执行，创建了map对象，变量区域显示</p><p><img src="img%5Cdebug12.png"></p></li><li><p>快捷键F8 接续执行，进入到循环中，循环变量i为 0,F8再继续执行，就获取到变量c赋值为字符‘a’ 字节值97</p><p><img src="img%5Cdebug13.png"></p></li><li><p>快捷键F8 接续执行，进入到判断语句中，因为该字符 不在Map集合键集中，再按F8执行，进入该判断中</p><p><img src="img%5Cdebug14.png"></p></li><li><p>快捷键F8 接续执行，循环结束，进入下次循环，此时map中已经添加一对儿元素</p><p><img src="img%5Cdebug15.png"></p></li><li><p>快捷键F8 接续执行，进入下次循环，再继续上面的操作，我们就可以看到代码每次是如何执行的了</p><p><img src="img%5Cdebug16.png"></p></li><li><p>如果不想继续debug,那么可以使用快捷键F9,程序正常执行到结束，程序结果在控制台显示</p><p><img src="img%5Cdebug17.png"></p></li></ol><h1 id="第三章-模拟斗地主洗牌发牌"><a href="#第三章-模拟斗地主洗牌发牌" class="headerlink" title="第三章  模拟斗地主洗牌发牌"></a>第三章  模拟斗地主洗牌发牌</h1><h2 id="3-1-案例介绍"><a href="#3-1-案例介绍" class="headerlink" title="3.1 案例介绍"></a>3.1 案例介绍</h2><p>按照斗地主的规则，完成洗牌发牌的动作。</p><p><img src="img%5C%E6%96%97%E5%9C%B0%E4%B8%BB.png"></p><p>具体规则：</p><ol><li>组装54张扑克牌将</li><li>54张牌顺序打乱</li><li>三个玩家参与游戏，三人交替摸牌，每人17张牌，最后三张留作底牌。</li><li>查看三人各自手中的牌（按照牌的大小排序）、底牌</li></ol><blockquote><p>规则：手中扑克牌从大到小的摆放顺序：大王,小王,2,A,K,Q,J,10,9,8,7,6,5,4,3</p></blockquote><h2 id="3-2-案例需求分析"><a href="#3-2-案例需求分析" class="headerlink" title="3.2 案例需求分析"></a>3.2 案例需求分析</h2><ol><li> 准备牌：</li></ol><p>完成数字与纸牌的映射关系：</p><p>使用双列Map(HashMap)集合，完成一个数字与字符串纸牌的对应关系(相当于一个字典)。</p><ol start="2"><li> 洗牌：</li></ol><p>通过数字完成洗牌发牌</p><ol start="3"><li> 发牌：</li></ol><p>将每个人以及底牌设计为ArrayList<string>,将最后3张牌直接存放于底牌，剩余牌通过对3取模依次发牌。</string></p><p>存放的过程中要求数字大小与斗地主规则的大小对应。</p><p>将代表不同纸牌的数字分配给不同的玩家与底牌。</p><ol start="4"><li> 看牌：</li></ol><p>通过Map集合找到对应字符展示。</p><p>通过查询纸牌与数字的对应关系，由数字转成纸牌字符串再进行展示。</p><p><img src="img%5C%E6%96%97%E5%9C%B0%E4%B8%BB%E5%88%86%E6%9E%90.png"></p><h2 id="3-3-实现代码步骤"><a href="#3-3-实现代码步骤" class="headerlink" title="3.3  实现代码步骤"></a>3.3  实现代码步骤</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Poker</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/*         * 1组装54张扑克牌         */</span>        <span class="token comment" spellcheck="true">// 1.1 创建Map集合存储</span>        HashMap<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> String<span class="token operator">></span> pokerMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 1.2 创建 花色集合 与 数字集合</span>        ArrayList<span class="token operator">&lt;</span>String<span class="token operator">></span> colors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ArrayList<span class="token operator">&lt;</span>String<span class="token operator">></span> numbers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 1.3 存储 花色 与数字</span>        Collections<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>colors<span class="token punctuation">,</span> <span class="token string">"♦"</span><span class="token punctuation">,</span> <span class="token string">"♣"</span><span class="token punctuation">,</span> <span class="token string">"♥"</span><span class="token punctuation">,</span> <span class="token string">"♠"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Collections<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>numbers<span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token string">"K"</span><span class="token punctuation">,</span> <span class="token string">"Q"</span><span class="token punctuation">,</span> <span class="token string">"J"</span><span class="token punctuation">,</span> <span class="token string">"10"</span><span class="token punctuation">,</span> <span class="token string">"9"</span><span class="token punctuation">,</span> <span class="token string">"8"</span><span class="token punctuation">,</span> <span class="token string">"7"</span><span class="token punctuation">,</span> <span class="token string">"6"</span><span class="token punctuation">,</span> <span class="token string">"5"</span><span class="token punctuation">,</span> <span class="token string">"4"</span><span class="token punctuation">,</span> <span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置 存储编号变量</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        pokerMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>count<span class="token operator">++</span><span class="token punctuation">,</span> <span class="token string">"大王"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pokerMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>count<span class="token operator">++</span><span class="token punctuation">,</span> <span class="token string">"小王"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 1.4 创建牌 存储到map集合中</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String number <span class="token operator">:</span> numbers<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>String color <span class="token operator">:</span> colors<span class="token punctuation">)</span> <span class="token punctuation">{</span>                String card <span class="token operator">=</span> color <span class="token operator">+</span> number<span class="token punctuation">;</span>                pokerMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>count<span class="token operator">++</span><span class="token punctuation">,</span> card<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/*         * 2 将54张牌顺序打乱         */</span>        <span class="token comment" spellcheck="true">// 取出编号 集合</span>        Set<span class="token operator">&lt;</span>Integer<span class="token operator">></span> numberSet <span class="token operator">=</span> pokerMap<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 因为要将编号打乱顺序 所以 应该先进行转换到 list集合中</span>        ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">></span> numberList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        numberList<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>numberSet<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 打乱顺序</span>        Collections<span class="token punctuation">.</span><span class="token function">shuffle</span><span class="token punctuation">(</span>numberList<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3 完成三个玩家交替摸牌，每人17张牌，最后三张留作底牌</span>        <span class="token comment" spellcheck="true">// 3.1 发牌的编号</span>        <span class="token comment" spellcheck="true">// 创建三个玩家编号集合 和一个 底牌编号集合</span>        ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">></span> noP1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">></span> noP2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">></span> noP3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">></span> dipaiNo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3.2发牌的编号</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numberList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 获取该编号</span>            Integer no <span class="token operator">=</span> numberList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 发牌</span>            <span class="token comment" spellcheck="true">// 留出底牌</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> <span class="token number">51</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                dipaiNo<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>no<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    noP1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>no<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    noP2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>no<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    noP3<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>no<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 4 查看三人各自手中的牌（按照牌的大小排序）、底牌</span>        <span class="token comment" spellcheck="true">// 4.1 对手中编号进行排序</span>        Collections<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>noP1<span class="token punctuation">)</span><span class="token punctuation">;</span>        Collections<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>noP2<span class="token punctuation">)</span><span class="token punctuation">;</span>        Collections<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>noP3<span class="token punctuation">)</span><span class="token punctuation">;</span>        Collections<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>dipaiNo<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 4.2 进行牌面的转换</span>        <span class="token comment" spellcheck="true">// 创建三个玩家牌面集合 以及底牌牌面集合</span>        ArrayList<span class="token operator">&lt;</span>String<span class="token operator">></span> player1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ArrayList<span class="token operator">&lt;</span>String<span class="token operator">></span> player2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ArrayList<span class="token operator">&lt;</span>String<span class="token operator">></span> player3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ArrayList<span class="token operator">&lt;</span>String<span class="token operator">></span> dipai <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 4.3转换</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Integer i <span class="token operator">:</span> noP1<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 4.4 根据编号找到 牌面 pokerMap</span>            String card <span class="token operator">=</span> pokerMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 添加到对应的 牌面集合中</span>            player1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>card<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Integer i <span class="token operator">:</span> noP2<span class="token punctuation">)</span> <span class="token punctuation">{</span>            String card <span class="token operator">=</span> pokerMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            player2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>card<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Integer i <span class="token operator">:</span> noP3<span class="token punctuation">)</span> <span class="token punctuation">{</span>            String card <span class="token operator">=</span> pokerMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            player3<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>card<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Integer i <span class="token operator">:</span> dipaiNo<span class="token punctuation">)</span> <span class="token punctuation">{</span>            String card <span class="token operator">=</span> pokerMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            dipai<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>card<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//4.5 查看</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"令狐冲："</span><span class="token operator">+</span>player1<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"石破天："</span><span class="token operator">+</span>player2<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"鸠摩智："</span><span class="token operator">+</span>player3<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"底牌："</span><span class="token operator">+</span>dipai<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="form-www-itcast-com"><a href="#form-www-itcast-com" class="headerlink" title="form  www.itcast.com"></a>form  <a href="http://www.itcast.com/">www.itcast.com</a></h3>]]></content>
      
      
      <categories>
          
          <category> Map </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>List、Set、数据结构、Collections学习笔记</title>
      <link href="2020/08/04/list-set/"/>
      <url>2020/08/04/list-set/</url>
      
        <content type="html"><![CDATA[<h1 id="【List、Set、数据结构、Collections】"><a href="#【List、Set、数据结构、Collections】" class="headerlink" title="【List、Set、数据结构、Collections】"></a>【List、Set、数据结构、Collections】</h1><h2 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h2><ul><li>数据结构</li><li>List集合</li><li>Set集合</li><li>Collections</li></ul><a id="more"></a><h2 id="教学目标"><a href="#教学目标" class="headerlink" title="教学目标"></a>教学目标</h2><ul><li><input disabled="" type="checkbox"> 能够说出List集合特点</li><li><input disabled="" type="checkbox"> 能够说出常见的数据结构</li><li><input disabled="" type="checkbox"> 能够说出数组结构特点</li><li><input disabled="" type="checkbox"> 能够说出栈结构特点</li><li><input disabled="" type="checkbox"> 能够说出队列结构特点</li><li><input disabled="" type="checkbox"> 能够说出单向链表结构特点</li><li><input disabled="" type="checkbox"> 能够说出Set集合的特点</li><li><input disabled="" type="checkbox"> 能够说出哈希表的特点</li><li><input disabled="" type="checkbox"> 使用HashSet集合存储自定义元素</li><li><input disabled="" type="checkbox"> 能够说出可变参数的格式</li><li><input disabled="" type="checkbox"> 能够使用集合工具类</li><li><input disabled="" type="checkbox"> 能够使用Comparator比较器进行排序</li></ul><h1 id="第一章-数据结构"><a href="#第一章-数据结构" class="headerlink" title="第一章 数据结构"></a>第一章 数据结构</h1><h2 id="2-1-数据结构有什么用？"><a href="#2-1-数据结构有什么用？" class="headerlink" title="2.1 数据结构有什么用？"></a>2.1 数据结构有什么用？</h2><p>当你用着java里面的容器类很爽的时候，你有没有想过，怎么ArrayList就像一个无限扩充的数组，也好像链表之类的。好用吗？好用，这就是数据结构的用处，只不过你在不知不觉中使用了。</p><p>现实世界的存储，我们使用的工具和建模。每种数据结构有自己的优点和缺点，想想如果Google的数据用的是数组的存储，我们还能方便地查询到所需要的数据吗？而算法，在这么多的数据中如何做到最快的插入，查找，删除，也是在追求更快。</p><p>我们java是面向对象的语言，就好似自动档轿车，C语言好似手动档吉普。数据结构呢？是变速箱的工作原理。你完全可以不知道变速箱怎样工作，就把自动档的车子从 A点 开到 B点，而且未必就比懂得的人慢。写程序这件事，和开车一样，经验可以起到很大作用，但如果你不知道底层是怎么工作的，就永远只能开车，既不会修车，也不能造车。当然了，数据结构内容比较多，细细的学起来也是相对费功夫的，不可能达到一蹴而就。我们将常见的数据结构：堆栈、队列、数组、链表和红黑树 这几种给大家介绍一下，作为数据结构的入门，了解一下它们的特点即可。</p><p><img src="img%5C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%AF%94%E5%96%BB.png"></p><h2 id="2-2-常见的数据结构"><a href="#2-2-常见的数据结构" class="headerlink" title="2.2 常见的数据结构"></a>2.2 常见的数据结构</h2><p>数据存储的常用结构有：栈、队列、数组、链表和红黑树。我们分别来了解一下：</p><h4 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h4><ul><li><strong>栈</strong>：<strong>stack</strong>,又称堆栈，它是运算受限的线性表，其限制是仅允许在标的一端进行插入和删除操作，不允许在其他任何位置进行添加、查找、删除等操作。</li></ul><p>简单的说：采用该结构的集合，对元素的存取有如下的特点</p><ul><li><p>先进后出（即，存进去的元素，要在后它后面的元素依次取出后，才能取出该元素）。例如，子弹压进弹夹，先压进去的子弹在下面，后压进去的子弹在上面，当开枪时，先弹出上面的子弹，然后才能弹出下面的子弹。</p></li><li><p>栈的入口、出口的都是栈的顶端位置。</p><p><img src="img%5C%E5%A0%86%E6%A0%88.png"></p></li></ul><p>这里两个名词需要注意：</p><ul><li><strong>压栈</strong>：就是存元素。即，把元素存储到栈的顶端位置，栈中已有元素依次向栈底方向移动一个位置。</li><li><strong>弹栈</strong>：就是取元素。即，把栈的顶端位置元素取出，栈中已有元素依次向栈顶方向移动一个位置。</li></ul><h4 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h4><ul><li><strong>队列</strong>：<strong>queue</strong>,简称队，它同堆栈一样，也是一种运算受限的线性表，其限制是仅允许在表的一端进行插入，而在表的另一端进行删除。</li></ul><p>简单的说，采用该结构的集合，对元素的存取有如下的特点：</p><ul><li>先进先出（即，存进去的元素，要在后它前面的元素依次取出后，才能取出该元素）。例如，小火车过山洞，车头先进去，车尾后进去；车头先出来，车尾后出来。</li><li>队列的入口、出口各占一侧。例如，下图中的左侧为入口，右侧为出口。</li></ul><p><img src="img%5C%E9%98%9F%E5%88%97%E5%9B%BE.bmp"></p><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><ul><li><strong>数组</strong>:<strong>Array</strong>,是有序的元素序列，数组是在内存中开辟一段连续的空间，并在此空间存放元素。就像是一排出租屋，有100个房间，从001到100每个房间都有固定编号，通过编号就可以快速找到租房子的人。</li></ul><p>简单的说,采用该结构的集合，对元素的存取有如下的特点：</p><ul><li><p>查找元素快：通过索引，可以快速访问指定位置的元素</p><p> <img src="img/%E6%95%B0%E7%BB%84%E6%9F%A5%E8%AF%A2%E5%BF%AB.png"></p></li><li><p>增删元素慢</p><ul><li><strong>指定索引位置增加元素</strong>：需要创建一个新数组，将指定新元素存储在指定索引位置，再把原数组元素根据索引，复制到新数组对应索引的位置。如下图<img src="img/%E6%95%B0%E7%BB%84%E6%B7%BB%E5%8A%A0.png"></li><li><strong>指定索引位置删除元素：</strong>需要创建一个新数组，把原数组元素根据索引，复制到新数组对应索引的位置，原数组中指定索引位置元素不复制到新数组中。如下图<img src="img/%E6%95%B0%E7%BB%84%E5%88%A0%E9%99%A4.png"></li></ul></li></ul><h4 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h4><ul><li><p><strong>链表</strong>:<strong>linked list</strong>,由一系列结点node（链表中每一个元素称为结点）组成，结点可以在运行时i动态生成。每个结点包括两个部分：一个是存储数据元素的数据域，另一个是存储下一个结点地址的指针域。我们常说的链表结构有单向链表与双向链表，那么这里给大家介绍的是<strong>单向链表</strong>。</p><p><img src="img%5C%E5%8D%95%E9%93%BE%E8%A1%A8%E7%BB%93%E6%9E%84%E7%89%B9%E7%82%B9.png"></p></li></ul><p>简单的说，采用该结构的集合，对元素的存取有如下的特点：</p><ul><li><p>多个结点之间，通过地址进行连接。例如，多个人手拉手，每个人使用自己的右手拉住下个人的左手，依次类推，这样多个人就连在一起了。</p><p><img src="img%5C%E5%8D%95%E9%93%BE%E8%A1%A8%E7%BB%93%E6%9E%84.png"></p></li><li><p>查找元素慢：想查找某个元素，需要通过连接的节点，依次向后查找指定元素</p></li><li><p>增删元素快：</p><ul><li><p>增加元素：只需要修改连接下个元素的地址即可。</p><p><img src="img%5C%E5%A2%9E%E5%8A%A0%E7%BB%93%E7%82%B9.png"></p></li><li><p>删除元素：只需要修改连接下个元素的地址即可。</p><p><img src="img%5C%E5%88%A0%E9%99%A4%E7%BB%93%E7%82%B9.bmp"></p></li></ul></li></ul><h4 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h4><ul><li><strong>二叉树</strong>：<strong>binary tree</strong> ,是每个结点不超过2的有序<strong>树（tree）</strong> 。</li></ul><p>简单的理解，就是一种类似于我们生活中树的结构，只不过每个结点上都最多只能有两个子结点。</p><p>二叉树是每个节点最多有两个子树的树结构。顶上的叫根结点，两边被称作“左子树”和“右子树”。</p><p>如图：</p><p><img src="img%5C%E4%BA%8C%E5%8F%89%E6%A0%91.bmp"></p><p>我们要说的是二叉树的一种比较有意思的叫做<strong>红黑树</strong>，红黑树本身就是一颗二叉查找树，将节点插入后，该树仍然是一颗二叉查找树。也就意味着，树的键值仍然是有序的。</p><p>红黑树的约束:</p><ol><li>节点可以是红色的或者黑色的</li></ol><ol start="2"><li>根节点是黑色的</li></ol><ol start="3"><li>叶子节点(特指空节点)是黑色的</li><li>每个红色节点的子节点都是黑色的</li><li>任何一个节点到其每一个叶子节点的所有路径上黑色节点数相同</li></ol><p>红黑树的特点:</p><p>​    速度特别快,趋近平衡树,查找叶子元素最少和最多次数不多于二倍</p><h1 id="第二章-List集合"><a href="#第二章-List集合" class="headerlink" title="第二章 List集合"></a>第二章 List集合</h1><p>我们掌握了Collection接口的使用后，再来看看Collection接口中的子类，他们都具备那些特性呢？</p><p>接下来，我们一起学习Collection中的常用几个子类（<code>java.util.List</code>集合、<code>java.util.Set</code>集合）。</p><h2 id="1-1-List接口介绍"><a href="#1-1-List接口介绍" class="headerlink" title="1.1 List接口介绍"></a>1.1 List接口介绍</h2><p><code>java.util.List</code>接口继承自<code>Collection</code>接口，是单列集合的一个重要分支，习惯性地会将实现了<code>List</code>接口的对象称为List集合。在List集合中允许出现重复的元素，所有的元素是以一种线性方式进行存储的，在程序中可以通过索引来访问集合中的指定元素。另外，List集合还有一个特点就是元素有序，即元素的存入顺序和取出顺序一致。</p><p>看完API，我们总结一下：</p><p>List接口特点：</p><ol><li>它是一个元素存取有序的集合。例如，存元素的顺序是11、22、33。那么集合中，元素的存储就是按照11、22、33的顺序完成的）。</li><li>它是一个带有索引的集合，通过索引就可以精确的操作集合中的元素（与数组的索引是一个道理）。</li><li>集合中可以有重复的元素，通过元素的equals方法，来比较是否为重复的元素。</li></ol><blockquote><p>tips:我们在基础班的时候已经学习过List接口的子类java.util.ArrayList类，该类中的方法都是来自List中定义。</p></blockquote><h2 id="1-2-List接口中常用方法"><a href="#1-2-List接口中常用方法" class="headerlink" title="1.2 List接口中常用方法"></a>1.2 List接口中常用方法</h2><p>List作为Collection集合的子接口，不但继承了Collection接口中的全部方法，而且还增加了一些根据元素索引来操作集合的特有方法，如下：</p><ul><li><code>public void add(int index, E element)</code>: 将指定的元素，添加到该集合中的指定位置上。</li><li><code>public E get(int index)</code>:返回集合中指定位置的元素。</li><li><code>public E remove(int index)</code>: 移除列表中指定位置的元素, 返回的是被移除的元素。</li><li><code>public E set(int index, E element)</code>:用指定元素替换集合中指定位置的元素,返回值的更新前的元素。</li></ul><p>List集合特有的方法都是跟索引相关，我们在基础班都学习过，那么我们再来复习一遍吧：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ListDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建List集合对象</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 往 尾部添加 指定元素</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"图图"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"小美"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"不高兴"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// add(int index,String s) 往指定位置添加</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"没头脑"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// String remove(int index) 删除指定位置元素  返回被删除元素</span>        <span class="token comment" spellcheck="true">// 删除索引位置为2的元素 </span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除索引位置为2的元素"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// String set(int index,String s)</span>        <span class="token comment" spellcheck="true">// 在指定位置 进行 元素替代（改） </span>        <span class="token comment" spellcheck="true">// 修改指定位置元素</span>        list<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"三毛"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// String get(int index)  获取指定位置元素</span>                <span class="token comment" spellcheck="true">// 跟size() 方法一起用  来 遍历的 </span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//还可以使用增强for</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String string <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>          <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="第三章-List的子类"><a href="#第三章-List的子类" class="headerlink" title="第三章 List的子类"></a>第三章 List的子类</h1><h2 id="3-1-ArrayList集合"><a href="#3-1-ArrayList集合" class="headerlink" title="3.1 ArrayList集合"></a>3.1 ArrayList集合</h2><p><code>java.util.ArrayList</code>集合数据存储的结构是数组结构。元素增删慢，查找快，由于日常开发中使用最多的功能为查询数据、遍历数据，所以<code>ArrayList</code>是最常用的集合。</p><p>许多程序员开发时非常随意地使用ArrayList完成任何需求，并不严谨，这种用法是不提倡的。</p><h2 id="3-2-LinkedList集合"><a href="#3-2-LinkedList集合" class="headerlink" title="3.2 LinkedList集合"></a>3.2 LinkedList集合</h2><p><code>java.util.LinkedList</code>集合数据存储的结构是链表结构。方便元素添加、删除的集合。</p><blockquote><p>LinkedList是一个双向链表，那么双向链表是什么样子的呢，我们用个图了解下</p></blockquote><p><img src="img%5C%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8.png"></p><p>实际开发中对一个集合元素的添加与删除经常涉及到首尾操作，而LinkedList提供了大量首尾操作的方法。这些方法我们作为了解即可：</p><ul><li><code>public void addFirst(E e)</code>:将指定元素插入此列表的开头。</li><li><code>public void addLast(E e)</code>:将指定元素添加到此列表的结尾。</li><li><code>public E getFirst()</code>:返回此列表的第一个元素。</li><li><code>public E getLast()</code>:返回此列表的最后一个元素。</li><li><code>public E removeFirst()</code>:移除并返回此列表的第一个元素。</li><li><code>public E removeLast()</code>:移除并返回此列表的最后一个元素。</li><li><code>public E pop()</code>:从此列表所表示的堆栈处弹出一个元素。</li><li><code>public void push(E e)</code>:将元素推入此列表所表示的堆栈。</li><li><code>public boolean isEmpty()</code>：如果列表不包含元素，则返回true。</li></ul><p>LinkedList是List的子类，List中的方法LinkedList都是可以使用，这里就不做详细介绍，我们只需要了解LinkedList的特有方法即可。在开发时，LinkedList集合也可以作为堆栈，队列的结构使用。（了解即可）</p><p>方法演示：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LinkedListDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        LinkedList<span class="token operator">&lt;</span>String<span class="token operator">></span> link <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//添加元素</span>        link<span class="token punctuation">.</span><span class="token function">addFirst</span><span class="token punctuation">(</span><span class="token string">"abc1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        link<span class="token punctuation">.</span><span class="token function">addFirst</span><span class="token punctuation">(</span><span class="token string">"abc2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        link<span class="token punctuation">.</span><span class="token function">addFirst</span><span class="token punctuation">(</span><span class="token string">"abc3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>link<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取元素</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>link<span class="token punctuation">.</span><span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>link<span class="token punctuation">.</span><span class="token function">getLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 删除元素</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>link<span class="token punctuation">.</span><span class="token function">removeFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>link<span class="token punctuation">.</span><span class="token function">removeLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>link<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//判断集合是否为空</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>link<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//弹出集合中的栈顶元素</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>link<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="第四章-Set接口"><a href="#第四章-Set接口" class="headerlink" title="第四章 Set接口"></a>第四章 Set接口</h1><p><code>java.util.Set</code>接口和<code>java.util.List</code>接口一样，同样继承自<code>Collection</code>接口，它与<code>Collection</code>接口中的方法基本一致，并没有对<code>Collection</code>接口进行功能上的扩充，只是比<code>Collection</code>接口更加严格了。与<code>List</code>接口不同的是，<code>Set</code>接口中元素无序，并且都会以某种规则保证存入的元素不出现重复。</p><p><code>Set</code>集合有多个子类，这里我们介绍其中的<code>java.util.HashSet</code>、<code>java.util.LinkedHashSet</code>这两个集合。</p><blockquote><p>tips:Set集合取出元素的方式可以采用：迭代器、增强for。</p></blockquote><h2 id="3-1-HashSet集合介绍"><a href="#3-1-HashSet集合介绍" class="headerlink" title="3.1 HashSet集合介绍"></a>3.1 HashSet集合介绍</h2><p><code>java.util.HashSet</code>是<code>Set</code>接口的一个实现类，它所存储的元素是不可重复的，并且元素都是无序的(即存取顺序不一致)。<code>java.util.HashSet</code>底层的实现其实是一个<code>java.util.HashMap</code>支持，由于我们暂时还未学习，先做了解。</p><p><code>HashSet</code>是根据对象的哈希值来确定元素在集合中的存储位置，因此具有良好的存取和查找性能。保证元素唯一性的方式依赖于：<code>hashCode</code>与<code>equals</code>方法。</p><p>我们先来使用一下Set集合存储，看下现象，再进行原理的讲解:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HashSetDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建 Set集合</span>        HashSet<span class="token operator">&lt;</span>String<span class="token operator">></span>  set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//添加元素</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"cba"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"bac"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"cba"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//遍历</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String name <span class="token operator">:</span> set<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>输出结果如下，说明集合中不能存储重复元素：</p><pre><code>cbaabcbac</code></pre><blockquote><p>tips:根据结果我们发现字符串”cba”只存储了一个，也就是说重复的元素set集合不存储。</p></blockquote><h2 id="2-2-HashSet集合存储数据的结构（哈希表）"><a href="#2-2-HashSet集合存储数据的结构（哈希表）" class="headerlink" title="2.2  HashSet集合存储数据的结构（哈希表）"></a>2.2  HashSet集合存储数据的结构（哈希表）</h2><p>什么是哈希表呢？</p><p>在<strong>JDK1.8</strong>之前，哈希表底层采用数组+链表实现，即使用链表处理冲突，同一hash值的链表都存储在一个链表里。但是当位于一个桶中的元素较多，即hash值相等的元素较多时，通过key值依次查找的效率较低。而JDK1.8中，哈希表存储采用数组+链表+红黑树实现，当链表长度超过阈值（8）时，将链表转换为红黑树，这样大大减少了查找时间。</p><p>简单的来说，哈希表是由数组+链表+红黑树（JDK1.8增加了红黑树部分）实现的，如下图所示。<img src="img%5C%E5%93%88%E5%B8%8C%E8%A1%A8.png"></p><p>看到这张图就有人要问了，这个是怎么存储的呢？</p><p>为了方便大家的理解我们结合一个存储流程图来说明一下：</p><p><img src="img%5C%E5%93%88%E5%B8%8C%E6%B5%81%E7%A8%8B%E5%9B%BE.png"></p><p>总而言之，<strong>JDK1.8</strong>引入红黑树大程度优化了HashMap的性能，那么对于我们来讲保证HashSet集合元素的唯一，其实就是根据对象的hashCode和equals方法来决定的。如果我们往集合中存放自定义的对象，那么保证其唯一，就必须复写hashCode和equals方法建立属于当前对象的比较方式。</p><h2 id="2-3-HashSet存储自定义类型元素"><a href="#2-3-HashSet存储自定义类型元素" class="headerlink" title="2.3  HashSet存储自定义类型元素"></a>2.3  HashSet存储自定义类型元素</h2><p>给HashSet中存放自定义类型元素时，需要重写对象中的hashCode和equals方法，建立自己的比较方式，才能保证HashSet集合中的对象唯一</p><p>创建自定义Student类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> o<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> o<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        Student student <span class="token operator">=</span> <span class="token punctuation">(</span>Student<span class="token punctuation">)</span> o<span class="token punctuation">;</span>        <span class="token keyword">return</span> age <span class="token operator">==</span> student<span class="token punctuation">.</span>age <span class="token operator">&amp;&amp;</span>               Objects<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> student<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Objects<span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HashSetDemo2</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建集合对象   该集合中存储 Student类型对象</span>        HashSet<span class="token operator">&lt;</span>Student<span class="token operator">></span> stuSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span>Student<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//存储 </span>        Student stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"于谦"</span><span class="token punctuation">,</span> <span class="token number">43</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stuSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>stu<span class="token punctuation">)</span><span class="token punctuation">;</span>        stuSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"郭德纲"</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stuSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"于谦"</span><span class="token punctuation">,</span> <span class="token number">43</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stuSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"郭麒麟"</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stuSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>stu<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Student stu2 <span class="token operator">:</span> stuSet<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stu2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>执行结果：Student <span class="token punctuation">[</span>name<span class="token operator">=</span>郭德纲<span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">44</span><span class="token punctuation">]</span>Student <span class="token punctuation">[</span>name<span class="token operator">=</span>于谦<span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">43</span><span class="token punctuation">]</span>Student <span class="token punctuation">[</span>name<span class="token operator">=</span>郭麒麟<span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">23</span><span class="token punctuation">]</span></code></pre><h2 id="2-3-LinkedHashSet"><a href="#2-3-LinkedHashSet" class="headerlink" title="2.3 LinkedHashSet"></a>2.3 LinkedHashSet</h2><p>我们知道HashSet保证元素唯一，可是元素存放进去是没有顺序的，那么我们要保证有序，怎么办呢？</p><p>在HashSet下面有一个子类<code>java.util.LinkedHashSet</code>，它是链表和哈希表组合的一个数据存储结构。</p><p>演示代码如下:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LinkedHashSetDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Set<span class="token operator">&lt;</span>String<span class="token operator">></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"bbb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"bbc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Iterator<span class="token operator">&lt;</span>String<span class="token operator">></span> it <span class="token operator">=</span> set<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>结果：  bbb  aaa  abc  bbc</code></pre><h2 id="1-9-可变参数"><a href="#1-9-可变参数" class="headerlink" title="1.9  可变参数"></a>1.9  可变参数</h2><p>在<strong>JDK1.5</strong>之后，如果我们定义一个方法需要接受多个参数，并且多个参数类型一致，我们可以对其简化成如下格式：</p><pre><code>修饰符 返回值类型 方法名(参数类型... 形参名){  }</code></pre><p>其实这个书写完全等价与</p><pre><code>修饰符 返回值类型 方法名(参数类型[] 形参名){  }</code></pre><p>只是后面这种定义，在调用时必须传递数组，而前者可以直接传递数据即可。</p><p><strong>JDK1.5</strong>以后。出现了简化操作。**…** 用在参数上，称之为可变参数。</p><p>同样是代表数组，但是在调用这个带有可变参数的方法时，不用创建数组(这就是简单之处)，直接将数组中的元素作为实际参数进行传递，其实编译成的class文件，将这些元素先封装到一个数组中，在进行传递。这些动作都在编译.class文件时，自动完成了。</p><p>代码演示：    </p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ChangeArgs</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">62</span><span class="token punctuation">,</span> <span class="token number">431</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token function">getSum</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//  6  7  2 12 2121</span>        <span class="token comment" spellcheck="true">// 求 这几个元素和 6  7  2 12 2121</span>        <span class="token keyword">int</span> sum2 <span class="token operator">=</span> <span class="token function">getSum</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">2121</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sum2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*     * 完成数组  所有元素的求和 原始写法           public static int getSum(int[] arr){        int sum = 0;        for(int a : arr){            sum += a;        }                return sum;      }    */</span>    <span class="token comment" spellcheck="true">//可变参数写法</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> a <span class="token operator">:</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>            sum <span class="token operator">+=</span> a<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> sum<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>tips: 上述add方法在同一个类中，只能存在一个。因为会发生调用的不确定性</p><p>注意：如果在方法书写时，这个方法拥有多参数，参数中包含可变参数，可变参数一定要写在参数列表的末尾位置。</p></blockquote><h1 id="第五章-Collections"><a href="#第五章-Collections" class="headerlink" title="第五章  Collections"></a>第五章  Collections</h1><h2 id="2-1-常用功能"><a href="#2-1-常用功能" class="headerlink" title="2.1 常用功能"></a>2.1 常用功能</h2><ul><li><code>java.utils.Collections</code>是集合工具类，用来对集合进行操作。部分方法如下：</li></ul><ul><li><code>public static &lt;T&gt; boolean addAll(Collection&lt;T&gt; c, T... elements)  </code>:往集合中添加一些元素。</li><li><code>public static void shuffle(List&lt;?&gt; list) 打乱顺序</code>:打乱集合顺序。</li><li><code>public static &lt;T&gt; void sort(List&lt;T&gt; list)</code>:将集合中元素按照默认规则排序。</li><li><code>public static &lt;T&gt; void sort(List&lt;T&gt; list，Comparator&lt;? super T&gt; )</code>:将集合中元素按照指定规则排序。</li></ul><p>代码演示：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CollectionsDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//原来写法</span>        <span class="token comment" spellcheck="true">//list.add(12);</span>        <span class="token comment" spellcheck="true">//list.add(14);</span>        <span class="token comment" spellcheck="true">//list.add(15);</span>        <span class="token comment" spellcheck="true">//list.add(1000);</span>        <span class="token comment" spellcheck="true">//采用工具类 完成 往集合中添加元素  </span>        Collections<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">222</span><span class="token punctuation">,</span> <span class="token number">1</span>，<span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//排序方法 </span>        Collections<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>结果：<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">222</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">222</span><span class="token punctuation">]</span></code></pre><p>代码演示之后 ，发现我们的集合按照顺序进行了排列，可是这样的顺序是采用默认的顺序，如果想要指定顺序那该怎么办呢？</p><p>我们发现还有个方法没有讲，<code>public static &lt;T&gt; void sort(List&lt;T&gt; list，Comparator&lt;? super T&gt; )</code>:将集合中元素按照指定规则排序。接下来讲解一下指定规则的排列。</p><h2 id="2-2-Comparator比较器"><a href="#2-2-Comparator比较器" class="headerlink" title="2.2 Comparator比较器"></a>2.2 Comparator比较器</h2><p>我们还是先研究这个方法</p><p><code>public static &lt;T&gt; void sort(List&lt;T&gt; list)</code>:将集合中元素按照默认规则排序。</p><p>不过这次存储的是字符串类型。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CollectionsDemo2</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ArrayList<span class="token operator">&lt;</span>String<span class="token operator">></span>  list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"cba"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"aba"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"sba"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"nba"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//排序方法</span>        Collections<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>结果：</p><pre><code>[aba, cba, nba, sba]</code></pre><p>我们使用的是默认的规则完成字符串的排序，那么默认规则是怎么定义出来的呢？</p><p>说到排序了，简单的说就是两个对象之间比较大小，那么在JAVA中提供了两种比较实现的方式，一种是比较死板的采用<code>java.lang.Comparable</code>接口去实现，一种是灵活的当我需要做排序的时候在去选择的<code>java.util.Comparator</code>接口完成。</p><p>那么我们采用的<code>public static &lt;T&gt; void sort(List&lt;T&gt; list)</code>这个方法完成的排序，实际上要求了被排序的类型需要实现Comparable接口完成比较的功能，在String类型上如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">String</span> <span class="token keyword">implements</span> <span class="token class-name">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable</span><span class="token punctuation">,</span> Comparable<span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">,</span> CharSequence <span class="token punctuation">{</span></code></pre><p>String类实现了这个接口，并完成了比较规则的定义，但是这样就把这种规则写死了，那比如我想要字符串按照第一个字符降序排列，那么这样就要修改String的源代码，这是不可能的了，那么这个时候我们可以使用</p><p><code>public static &lt;T&gt; void sort(List&lt;T&gt; list，Comparator&lt;? super T&gt; )</code>方法灵活的完成，这个里面就涉及到了Comparator这个接口，位于位于java.util包下，排序是comparator能实现的功能之一,该接口代表一个比较器，比较器具有可比性！顾名思义就是做排序的，通俗地讲需要比较两个对象谁排在前谁排在后，那么比较的方法就是：</p><ul><li><p><code> public int compare(String o1, String o2)</code>：比较其两个参数的顺序。</p><blockquote><p>两个对象比较的结果有三种：大于，等于，小于。</p><p>如果要按照升序排序，<br>则o1 小于o2，返回（负数），相等返回0，01大于02返回（正数）<br>如果要按照降序排序<br>则o1 小于o2，返回（正数），相等返回0，01大于02返回（负数）</p></blockquote></li></ul><p>操作如下:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CollectionsDemo3</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ArrayList<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"cba"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"aba"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"sba"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"nba"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//排序方法  按照第一个单词的降序</span>        Collections<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span>String o1<span class="token punctuation">,</span> String o2<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> o2<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">-</span> o1<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>结果如下：</p><pre><code>[sba, nba, cba, aba]</code></pre><h2 id="2-3-简述Comparable和Comparator两个接口的区别。"><a href="#2-3-简述Comparable和Comparator两个接口的区别。" class="headerlink" title="2.3 简述Comparable和Comparator两个接口的区别。"></a>2.3 简述Comparable和Comparator两个接口的区别。</h2><p><strong>Comparable</strong>：强行对实现它的每个类的对象进行整体排序。这种排序被称为类的自然排序，类的compareTo方法被称为它的自然比较方法。只能在类中实现compareTo()一次，不能经常修改类的代码实现自己想要的排序。实现此接口的对象列表（和数组）可以通过Collections.sort（和Arrays.sort）进行自动排序，对象可以用作有序映射中的键或有序集合中的元素，无需指定比较器。</p><p><strong>Comparator</strong>强行对某个对象进行整体排序。可以将Comparator 传递给sort方法（如Collections.sort或 Arrays.sort），从而允许在排序顺序上实现精确控制。还可以使用Comparator来控制某些数据结构（如有序set或有序映射）的顺序，或者为那些没有自然顺序的对象collection提供排序。</p><h2 id="2-4-练习"><a href="#2-4-练习" class="headerlink" title="2.4  练习"></a>2.4  练习</h2><p>创建一个学生类，存储到ArrayList集合中完成指定排序操作。</p><p>Student 初始类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Student{"</span> <span class="token operator">+</span>               <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>               <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span>               <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>测试类：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建四个学生对象 存储到集合中</span>        ArrayList<span class="token operator">&lt;</span>Student<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Student<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"rose"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"jack"</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"ace"</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"mark"</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*          让学生 按照年龄排序 升序         */</span><span class="token comment" spellcheck="true">//        Collections.sort(list);//要求 该list中元素类型  必须实现比较器Comparable接口</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Student student <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>发现，当我们调用Collections.sort()方法的时候 程序报错了。</p><p>原因：如果想要集合中的元素完成排序，那么必须要实现比较器Comparable接口。</p><p>于是我们就完成了Student类的一个实现，如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token operator">&lt;</span>Student<span class="token operator">></span><span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span>Student o<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">-</span>o<span class="token punctuation">.</span>age<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//升序</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>再次测试，代码就OK 了效果如下：</p><pre class=" language-java"><code class="language-java">Student<span class="token punctuation">{</span>name<span class="token operator">=</span><span class="token string">'jack'</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">}</span>Student<span class="token punctuation">{</span>name<span class="token operator">=</span><span class="token string">'abc'</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">}</span>Student<span class="token punctuation">{</span>name<span class="token operator">=</span><span class="token string">'mark'</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">}</span>Student<span class="token punctuation">{</span>name<span class="token operator">=</span><span class="token string">'ace'</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">17</span><span class="token punctuation">}</span>Student<span class="token punctuation">{</span>name<span class="token operator">=</span><span class="token string">'rose'</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">18</span><span class="token punctuation">}</span></code></pre><h2 id="2-5-扩展"><a href="#2-5-扩展" class="headerlink" title="2.5 扩展"></a>2.5 扩展</h2><p>如果在使用的时候，想要独立的定义规则去使用 可以采用Collections.sort(List list,Comparetor<t> c)方式，自己定义规则：</t></p><pre class=" language-java"><code class="language-java">Collections<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token operator">&lt;</span>Student<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span>Student o1<span class="token punctuation">,</span> Student o2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> o2<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>o1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//以学生的年龄降序</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>效果：</p><pre><code>Student{name='rose', age=18}Student{name='ace', age=17}Student{name='jack', age=16}Student{name='abc', age=16}Student{name='mark', age=16}</code></pre><p>如果想要规则更多一些，可以参考下面代码：</p><pre class=" language-java"><code class="language-java">Collections<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token operator">&lt;</span>Student<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span>Student o1<span class="token punctuation">,</span> Student o2<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 年龄降序</span>                <span class="token keyword">int</span> result <span class="token operator">=</span> o2<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>o1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//年龄降序</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>result<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//第一个规则判断完了 下一个规则 姓名的首字母 升序</span>                    result <span class="token operator">=</span> o1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">-</span>o2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span> result<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>效果如下：</p><pre><code>Student{name='rose', age=18}Student{name='ace', age=17}Student{name='abc', age=16}Student{name='jack', age=16}Student{name='mark', age=16}</code></pre><h3 id="form-www-itcast-com"><a href="#form-www-itcast-com" class="headerlink" title="form  www.itcast.com"></a>form  <a href="http://www.itcast.com/">www.itcast.com</a></h3>]]></content>
      
      
      <categories>
          
          <category> 集合 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Object类学习笔记</title>
      <link href="2020/08/04/object-lei-chang-yong-api-bi-ji/"/>
      <url>2020/08/04/object-lei-chang-yong-api-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="day01【Object类、常用API】"><a href="#day01【Object类、常用API】" class="headerlink" title="day01【Object类、常用API】"></a>day01【Object类、常用API】</h1><h2 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h2><ul><li>Object类</li><li>Date类</li><li>DateFormat类</li><li>Calendar类</li><li>System类</li><li>StringBuilder类</li><li>包装类</li></ul><a id="more"></a><h2 id="教学目标"><a href="#教学目标" class="headerlink" title="教学目标"></a>教学目标</h2><p>-[ ] 能够说出Object类的特点<br>-[ ] 能够重写Object类的toString方法<br>-[ ] 能够重写Object类的equals方法<br>-[ ] 能够使用日期类输出当前日期<br>-[ ] 能够使用将日期格式化为字符串的方法<br>-[ ] 能够使用将字符串转换成日期的方法<br>-[ ] 能够使用System类的数组复制方法<br>-[ ] 能够使用System类获取当前毫秒时刻值<br>-[ ] 能够说出使用StringBuilder类可以解决的问题<br>-[ ] 能够使用StringBuilder进行字符串拼接操作<br>-[ ] 能够说出8种基本类型对应的包装类名称<br>-[ ] 能够说出自动装箱、自动拆箱的概念<br>-[ ] 能够将字符串转换为对应的基本类型<br>-[ ] 能够将基本类型转换为对应的字符串</p><h1 id="第一章-Object类"><a href="#第一章-Object类" class="headerlink" title="第一章 Object类"></a>第一章 Object类</h1><h2 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1 概述"></a>1.1 概述</h2><p><code>java.lang.Object</code>类是Java语言中的根类，即所有类的父类。它中描述的所有方法子类都可以使用。在对象实例化的时候，最终找的父类就是Object。</p><p>如果一个类没有特别指定父类，    那么默认则继承自Object类。例如：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token comment" spellcheck="true">/*extends Object*/</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span></code></pre><p>根据JDK源代码及Object类的API文档，Object类当中包含的方法有11个。今天我们主要学习其中的2个：</p><ul><li><code>public String toString()</code>：返回该对象的字符串表示。</li><li><code>public boolean equals(Object obj)</code>：指示其他某个对象是否与此对象“相等”。</li></ul><h2 id="1-2-toString方法"><a href="#1-2-toString方法" class="headerlink" title="1.2 toString方法"></a>1.2 toString方法</h2><h3 id="方法摘要"><a href="#方法摘要" class="headerlink" title="方法摘要"></a>方法摘要</h3><ul><li><code>public String toString()</code>：返回该对象的字符串表示。</li></ul><p>toString方法返回该对象的字符串表示，其实该字符串内容就是对象的类型+@+内存地址值。</p><p>由于toString方法返回的结果是内存地址，而在开发中，经常需要按照对象的属性得到相应的字符串表现形式，因此也需要重写它。</p><h3 id="覆盖重写"><a href="#覆盖重写" class="headerlink" title="覆盖重写"></a>覆盖重写</h3><p>如果不希望使用toString方法的默认行为，则可以对它进行覆盖重写。例如自定义的Person类：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>      <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Person{"</span> <span class="token operator">+</span> <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span> <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span> <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 省略构造器与Getter Setter</span><span class="token punctuation">}</span></code></pre><p>在IntelliJ IDEA中，可以点击<code>Code</code>菜单中的<code>Generate...</code>，也可以使用快捷键<code>alt+insert</code>，点击<code>toString()</code>选项。选择需要包含的成员变量并确定。如下图所示：</p><p><img src="img%5CtoString%E6%96%B9%E6%B3%95%E7%9A%84%E8%87%AA%E5%8A%A8%E9%87%8D%E5%86%99.bmp" alt="toString方法的自动重写"></p><blockquote><p>小贴士： 在我们直接使用输出语句输出对象名的时候,其实通过该对象调用了其toString()方法。</p></blockquote><h2 id="1-3-equals方法"><a href="#1-3-equals方法" class="headerlink" title="1.3 equals方法"></a>1.3 equals方法</h2><h3 id="方法摘要-1"><a href="#方法摘要-1" class="headerlink" title="方法摘要"></a>方法摘要</h3><ul><li><code>public boolean equals(Object obj)</code>：指示其他某个对象是否与此对象“相等”。</li></ul><p>调用成员方法equals并指定参数为另一个对象，则可以判断这两个对象是否是相同的。这里的“相同”有默认和自定义两种方式。</p><h3 id="默认地址比较"><a href="#默认地址比较" class="headerlink" title="默认地址比较"></a>默认地址比较</h3><p>如果没有覆盖重写equals方法，那么Object类中默认进行<code>==</code>运算符的对象地址比较，只要不是同一个对象，结果必然为false。</p><h3 id="对象内容比较"><a href="#对象内容比较" class="headerlink" title="对象内容比较"></a>对象内容比较</h3><p>如果希望进行对象的内容比较，即所有或指定的部分成员变量相同就判定两个对象相同，则可以覆盖重写equals方法。例如：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Objects<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 如果对象地址一样，则认为相同</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> o<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 如果参数为空，或者类型信息不一样，则认为不同</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> o<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 转换为当前类型</span>        Person person <span class="token operator">=</span> <span class="token punctuation">(</span>Person<span class="token punctuation">)</span> o<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 要求基本类型相等，并且将引用类型交给java.util.Objects类的equals静态方法取用结果</span>        <span class="token keyword">return</span> age <span class="token operator">==</span> person<span class="token punctuation">.</span>age <span class="token operator">&amp;&amp;</span> Objects<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> person<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这段代码充分考虑了对象为空、类型一致等问题，但方法内容并不唯一。大多数IDE都可以自动生成equals方法的代码内容。在IntelliJ IDEA中，可以使用<code>Code</code>菜单中的<code>Generate…</code>选项，也可以使用快捷键<code>alt+insert</code>，并选择<code>equals() and hashCode()</code>进行自动代码生成。如下图所示：</p><p><img src="img%5Cequals%E6%96%B9%E6%B3%951.png"></p><p><img src="img%5Cequals%E6%96%B9%E6%B3%952.png"></p><p><img src="img%5Cequals%E6%96%B9%E6%B3%953.png"></p><blockquote><p>tips：Object类当中的hashCode等其他方法，今后学习。</p></blockquote><h2 id="1-4-Objects类"><a href="#1-4-Objects类" class="headerlink" title="1.4 Objects类"></a>1.4 Objects类</h2><p>在刚才IDEA自动重写equals代码中，使用到了<code>java.util.Objects</code>类，那么这个类是什么呢？</p><p>在<strong>JDK7</strong>添加了一个Objects工具类，它提供了一些方法来操作对象，它由一些静态的实用方法组成，这些方法是null-save（空指针安全的）或null-tolerant（容忍空指针的），用于计算对象的hashcode、返回对象的字符串表示形式、比较两个对象。</p><p>在比较两个对象的时候，Object的equals方法容易抛出空指针异常，而Objects类中的equals方法就优化了这个问题。方法如下：</p><ul><li><code>public static boolean equals(Object a, Object b)</code>:判断两个对象是否相等。</li></ul><p>我们可以查看一下源码，学习一下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object a<span class="token punctuation">,</span> Object b<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>a <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><h1 id="第二章-日期时间类"><a href="#第二章-日期时间类" class="headerlink" title="第二章 日期时间类"></a>第二章 日期时间类</h1><h2 id="2-1-Date类"><a href="#2-1-Date类" class="headerlink" title="2.1 Date类"></a>2.1 Date类</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p><code> java.util.Date</code>类 表示特定的瞬间，精确到毫秒。</p><p>继续查阅Date类的描述，发现Date拥有多个构造函数，只是部分已经过时，但是其中有未过时的构造函数可以把毫秒值转成日期对象。</p><ul><li><code>public Date()</code>：分配Date对象并初始化此对象，以表示分配它的时间（精确到毫秒）。</li><li><code>public Date(long date)</code>：分配Date对象并初始化此对象，以表示自从标准基准时间（称为“历元（epoch）”，即1970年1月1日00:00:00 GMT）以来的指定毫秒数。</li></ul><blockquote><p>tips: 由于我们处于东八区，所以我们的基准时间为1970年1月1日8时0分0秒。</p></blockquote><p>简单来说：使用无参构造，可以自动设置当前系统时间的毫秒时刻；指定long类型的构造参数，可以自定义毫秒时刻。例如：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01Date</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建日期对象，把当前的时间</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Tue Jan 16 14:37:35 CST 2018</span>        <span class="token comment" spellcheck="true">// 创建日期对象，把当前的毫秒值转成日期对象</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>0L<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Thu Jan 01 08:00:00 CST 1970</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>tips:在使用println方法时，会自动调用Date类中的toString方法。Date类对Object类中的toString方法进行了覆盖重写，所以结果为指定格式的字符串。</p></blockquote><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><p>Date类中的多数方法已经过时，常用的方法有：</p><ul><li><code>public long getTime()</code> 把日期对象转换成对应的时间毫秒值。</li></ul><h2 id="2-2-DateFormat类"><a href="#2-2-DateFormat类" class="headerlink" title="2.2 DateFormat类"></a>2.2 DateFormat类</h2><p><code>java.text.DateFormat</code> 是日期/时间格式化子类的抽象类，我们通过这个类可以帮我们完成日期和文本之间的转换,也就是可以在Date对象与String对象之间进行来回转换。</p><ul><li><strong>格式化</strong>：按照指定的格式，从Date对象转换为String对象。</li><li><strong>解析</strong>：按照指定的格式，从String对象转换为Date对象。</li></ul><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><p>由于DateFormat为抽象类，不能直接使用，所以需要常用的子类<code>java.text.SimpleDateFormat</code>。这个类需要一个模式（格式）来指定格式化或解析的标准。构造方法为：</p><ul><li><code>public SimpleDateFormat(String pattern)</code>：用给定的模式和默认语言环境的日期格式符号构造SimpleDateFormat。</li></ul><p>参数pattern是一个字符串，代表日期时间的自定义格式。</p><h3 id="格式规则"><a href="#格式规则" class="headerlink" title="格式规则"></a>格式规则</h3><p>常用的格式规则为：</p><table><thead><tr><th>标识字母（区分大小写）</th><th>含义</th></tr></thead><tbody><tr><td>y</td><td>年</td></tr><tr><td>M</td><td>月</td></tr><tr><td>d</td><td>日</td></tr><tr><td>H</td><td>时</td></tr><tr><td>m</td><td>分</td></tr><tr><td>s</td><td>秒</td></tr></tbody></table><blockquote><p>备注：更详细的格式规则，可以参考SimpleDateFormat类的API文档0。</p></blockquote><p>创建SimpleDateFormat对象的代码如：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>text<span class="token punctuation">.</span>DateFormat<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>text<span class="token punctuation">.</span>SimpleDateFormat<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo02SimpleDateFormat</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 对应的日期格式如：2018-01-16 15:06:38</span>        DateFormat format <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h3 id="常用方法-1"><a href="#常用方法-1" class="headerlink" title="常用方法"></a>常用方法</h3><p>DateFormat类的常用方法有：</p><ul><li><code>public String format(Date date)</code>：将Date对象格式化为字符串。</li><li><code>public Date parse(String source)</code>：将字符串解析为Date对象。</li></ul><h4 id="format方法"><a href="#format方法" class="headerlink" title="format方法"></a>format方法</h4><p>使用format方法的代码为：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>text<span class="token punctuation">.</span>DateFormat<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>text<span class="token punctuation">.</span>SimpleDateFormat<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 把Date对象转换成String*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo03DateFormatMethod</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Date date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建日期格式化对象,在获取格式化对象时可以指定风格</span>        DateFormat df <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy年MM月dd日"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String str <span class="token operator">=</span> df<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2008年1月23日</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="parse方法"><a href="#parse方法" class="headerlink" title="parse方法"></a>parse方法</h4><p>使用parse方法的代码为：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>text<span class="token punctuation">.</span>DateFormat<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>text<span class="token punctuation">.</span>ParseException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>text<span class="token punctuation">.</span>SimpleDateFormat<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 把String转换成Date对象*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo04DateFormatMethod</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> ParseException <span class="token punctuation">{</span>        DateFormat df <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy年MM月dd日"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String str <span class="token operator">=</span> <span class="token string">"2018年12月11日"</span><span class="token punctuation">;</span>        Date date <span class="token operator">=</span> df<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Tue Dec 11 00:00:00 CST 2018</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="2-3-练习"><a href="#2-3-练习" class="headerlink" title="2.3 练习"></a>2.3 练习</h2><p>请使用日期时间相关的API，计算出一个人已经出生了多少天。</p><p><strong>思路：</strong></p><p>1.获取当前时间对应的毫秒值</p><p>2.获取自己出生日期对应的毫秒值</p><p>3.两个时间相减（当前时间– 出生日期）</p><p><strong>代码实现：</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入出生日期 格式 YYYY-MM-dd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取出生日期,键盘输入</span>    String birthdayString <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 将字符串日期,转成Date对象</span>    <span class="token comment" spellcheck="true">// 创建SimpleDateFormat对象,写日期模式</span>    SimpleDateFormat sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 调用方法parse,字符串转成日期对象</span>    Date birthdayDate <span class="token operator">=</span> sdf<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>birthdayString<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取今天的日期对象</span>    Date todayDate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 将两个日期转成毫秒值,Date类的方法getTime</span>    <span class="token keyword">long</span> birthdaySecond <span class="token operator">=</span> birthdayDate<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> todaySecond <span class="token operator">=</span> todayDate<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> secone <span class="token operator">=</span> todaySecond<span class="token operator">-</span>birthdaySecond<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>secone <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"还没出生呢"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>secone<span class="token operator">/</span><span class="token number">1000</span><span class="token operator">/</span><span class="token number">60</span><span class="token operator">/</span><span class="token number">60</span><span class="token operator">/</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="2-4-Calendar类"><a href="#2-4-Calendar类" class="headerlink" title="2.4 Calendar类"></a>2.4 Calendar类</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>日历我们都见过</p><p><img src="img%5C%E6%97%A5%E5%8E%86.jpg"></p><p><code>java.util.Calendar</code>是日历类，在Date后出现，替换掉了许多Date的方法。该类将所有可能用到的时间信息封装为静态成员变量，方便获取。日历类就是方便获取各个时间属性的。</p><h3 id="获取方式"><a href="#获取方式" class="headerlink" title="获取方式"></a>获取方式</h3><p>Calendar为抽象类，由于语言敏感性，Calendar类在创建对象时并非直接创建，而是通过静态方法创建，返回子类对象，如下：</p><p>Calendar静态方法</p><ul><li><code>public static Calendar getInstance()</code>：使用默认时区和语言环境获得一个日历</li></ul><p>例如：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Calendar<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo06CalendarInit</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Calendar cal <span class="token operator">=</span> Calendar<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h3 id="常用方法-2"><a href="#常用方法-2" class="headerlink" title="常用方法"></a>常用方法</h3><p>根据Calendar类的API文档，常用方法有：</p><ul><li><code>public int get(int field)</code>：返回给定日历字段的值。</li><li><code>public void set(int field, int value)</code>：将给定的日历字段设置为给定值。</li><li><code>public abstract void add(int field, int amount)</code>：根据日历的规则，为给定的日历字段添加或减去指定的时间量。</li><li><code>public Date getTime()</code>：返回一个表示此Calendar时间值（从历元到现在的毫秒偏移量）的Date对象。</li></ul><p>Calendar类中提供很多成员常量，代表给定的日历字段：</p><table><thead><tr><th>字段值</th><th>含义</th></tr></thead><tbody><tr><td>YEAR</td><td>年</td></tr><tr><td>MONTH</td><td>月（从0开始，可以+1使用）</td></tr><tr><td>DAY_OF_MONTH</td><td>月中的天（几号）</td></tr><tr><td>HOUR</td><td>时（12小时制）</td></tr><tr><td>HOUR_OF_DAY</td><td>时（24小时制）</td></tr><tr><td>MINUTE</td><td>分</td></tr><tr><td>SECOND</td><td>秒</td></tr><tr><td>DAY_OF_WEEK</td><td>周中的天（周几，周日为1，可以-1使用）</td></tr></tbody></table><h4 id="get-set方法"><a href="#get-set方法" class="headerlink" title="get/set方法"></a>get/set方法</h4><p>get方法用来获取指定字段的值，set方法用来设置指定字段的值，代码使用演示：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Calendar<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CalendarUtil</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建Calendar对象</span>        Calendar cal <span class="token operator">=</span> Calendar<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置年 </span>        <span class="token keyword">int</span> year <span class="token operator">=</span> cal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>YEAR<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置月</span>        <span class="token keyword">int</span> month <span class="token operator">=</span> cal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>MONTH<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置日</span>        <span class="token keyword">int</span> dayOfMonth <span class="token operator">=</span> cal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>DAY_OF_MONTH<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>year <span class="token operator">+</span> <span class="token string">"年"</span> <span class="token operator">+</span> month <span class="token operator">+</span> <span class="token string">"月"</span> <span class="token operator">+</span> dayOfMonth <span class="token operator">+</span> <span class="token string">"日"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Calendar<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo07CalendarMethod</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Calendar cal <span class="token operator">=</span> Calendar<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cal<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>YEAR<span class="token punctuation">,</span> <span class="token number">2020</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>year <span class="token operator">+</span> <span class="token string">"年"</span> <span class="token operator">+</span> month <span class="token operator">+</span> <span class="token string">"月"</span> <span class="token operator">+</span> dayOfMonth <span class="token operator">+</span> <span class="token string">"日"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2020年1月17日</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="add方法"><a href="#add方法" class="headerlink" title="add方法"></a>add方法</h4><p>add方法可以对指定日历字段的值进行加减操作，如果第二个参数为正数则加上偏移量，如果为负数则减去偏移量。代码如：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Calendar<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo08CalendarMethod</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Calendar cal <span class="token operator">=</span> Calendar<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>year <span class="token operator">+</span> <span class="token string">"年"</span> <span class="token operator">+</span> month <span class="token operator">+</span> <span class="token string">"月"</span> <span class="token operator">+</span> dayOfMonth <span class="token operator">+</span> <span class="token string">"日"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2018年1月17日</span>        <span class="token comment" spellcheck="true">// 使用add方法</span>        cal<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>DAY_OF_MONTH<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 加2天</span>        cal<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>YEAR<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 减3年</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>year <span class="token operator">+</span> <span class="token string">"年"</span> <span class="token operator">+</span> month <span class="token operator">+</span> <span class="token string">"月"</span> <span class="token operator">+</span> dayOfMonth <span class="token operator">+</span> <span class="token string">"日"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2015年1月18日; </span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="getTime方法"><a href="#getTime方法" class="headerlink" title="getTime方法"></a>getTime方法</h4><p>Calendar中的getTime方法并不是获取毫秒时刻，而是拿到对应的Date对象。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Calendar<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo09CalendarMethod</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Calendar cal <span class="token operator">=</span> Calendar<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Date date <span class="token operator">=</span> cal<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Tue Jan 16 16:03:09 CST 2018</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>小贴士：</p><p>​     西方星期的开始为周日，中国为周一。</p><p>​     在Calendar类中，月份的表示是以0-11代表1-12月。</p><p>​     日期是有大小关系的，时间靠后，时间越大。</p></blockquote><h1 id="第三章-System类"><a href="#第三章-System类" class="headerlink" title="第三章 System类"></a>第三章 System类</h1><p><code>java.lang.System</code>类中提供了大量的静态方法，可以获取与系统相关的信息或系统级操作，在System类的API文档中，常用的方法有：</p><ul><li><code>public static long currentTimeMillis()</code>：返回以毫秒为单位的当前时间。</li><li><code>public static void arraycopy(Object src, int srcPos, Object dest, int destPos, int length)</code>：将数组中指定的数据拷贝到另一个数组中。</li></ul><h2 id="3-1-currentTimeMillis方法"><a href="#3-1-currentTimeMillis方法" class="headerlink" title="3.1 currentTimeMillis方法"></a>3.1 currentTimeMillis方法</h2><p>实际上，currentTimeMillis方法就是 获取当前系统时间与1970年01月01日00:00点之间的毫秒差值</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SystemDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token comment" spellcheck="true">//获取当前时间毫秒值</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1516090531144</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><p>验证for循环打印数字1-9999所需要使用的时间（毫秒）</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SystemTest1</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">long</span> start <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">long</span> end <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"共耗时毫秒："</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="3-2-arraycopy方法"><a href="#3-2-arraycopy方法" class="headerlink" title="3.2 arraycopy方法"></a>3.2 arraycopy方法</h2><ul><li><code>public static void arraycopy(Object src, int srcPos, Object dest, int destPos, int length)</code>：将数组中指定的数据拷贝到另一个数组中。</li></ul><p>数组的拷贝动作是系统级的，性能很高。System.arraycopy方法具有5个参数，含义分别为：</p><table><thead><tr><th>参数序号</th><th>参数名称</th><th>参数类型</th><th>参数含义</th></tr></thead><tbody><tr><td>1</td><td>src</td><td>Object</td><td>源数组</td></tr><tr><td>2</td><td>srcPos</td><td>int</td><td>源数组索引起始位置</td></tr><tr><td>3</td><td>dest</td><td>Object</td><td>目标数组</td></tr><tr><td>4</td><td>destPos</td><td>int</td><td>目标数组索引起始位置</td></tr><tr><td>5</td><td>length</td><td>int</td><td>复制元素个数</td></tr></tbody></table><h3 id="练习-1"><a href="#练习-1" class="headerlink" title="练习"></a>练习</h3><p>将src数组中前3个元素，复制到dest数组的前3个位置上复制元素前：src数组元素[1,2,3,4,5]，dest数组元素[6,7,8,9,10]复制元素后：src数组元素[1,2,3,4,5]，dest数组元素[1,2,3,9,10]</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo11SystemArrayCopy</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> src <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span> src<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> dest<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*代码运行后：两个数组中的元素发生了变化         src数组元素[1,2,3,4,5]         dest数组元素[1,2,3,9,10]        */</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="第四章-StringBuilder类"><a href="#第四章-StringBuilder类" class="headerlink" title="第四章 StringBuilder类"></a>第四章 StringBuilder类</h1><h2 id="4-1-字符串拼接问题"><a href="#4-1-字符串拼接问题" class="headerlink" title="4.1 字符串拼接问题"></a>4.1 字符串拼接问题</h2><p>由于String类的对象内容不可改变，所以每当进行字符串拼接时，总是会在内存中创建一个新的对象。例如：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String s <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token punctuation">;</span>        s <span class="token operator">+=</span> <span class="token string">"World"</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在API中对String类有这样的描述：字符串是常量，它们的值在创建后不能被更改。</p><p>根据这句话分析我们的代码，其实总共产生了三个字符串，即<code>"Hello"</code>、<code>"World"</code>和<code>"HelloWorld"</code>。引用变量s首先指向<code>Hello</code>对象，最终指向拼接出来的新字符串对象，即<code>HelloWord</code> 。</p><p><img src="img%5CString%E6%8B%BC%E6%8E%A5%E9%97%AE%E9%A2%98.bmp"></p><p>由此可知，如果对字符串进行拼接操作，每次拼接，都会构建一个新的String对象，既耗时，又浪费空间。为了解决这一问题，可以使用<code>java.lang.StringBuilder</code>类。</p><h2 id="4-2-StringBuilder概述"><a href="#4-2-StringBuilder概述" class="headerlink" title="4.2 StringBuilder概述"></a>4.2 StringBuilder概述</h2><p>查阅<code>java.lang.StringBuilder</code>的API，StringBuilder又称为可变字符序列，它是一个类似于 String 的字符串缓冲区，通过某些方法调用可以改变该序列的长度和内容。</p><p>原来StringBuilder是个字符串的缓冲区，即它是一个容器，容器中可以装很多字符串。并且能够对其中的字符串进行各种操作。</p><p>它的内部拥有一个数组用来存放字符串内容，进行字符串拼接时，直接在数组中加入新内容。StringBuilder会自动维护数组的扩容。原理如下图所示：(默认16字符空间，超过自动扩充)</p><p><img src="img%5C06-StringBuilder%E7%9A%84%E5%8E%9F%E7%90%86.png" alt="06-StringBuilder的原理"></p><h2 id="4-3-构造方法"><a href="#4-3-构造方法" class="headerlink" title="4.3 构造方法"></a>4.3 构造方法</h2><p>根据StringBuilder的API文档，常用构造方法有2个：</p><ul><li><code>public StringBuilder()</code>：构造一个空的StringBuilder容器。</li><li><code>public StringBuilder(String str)</code>：构造一个StringBuilder容器，并将字符串添加进去。</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringBuilderDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        StringBuilder sb1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sb1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// (空白)</span>        <span class="token comment" spellcheck="true">// 使用带参构造</span>        StringBuilder sb2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token string">"itcast"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sb2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// itcast</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="4-4-常用方法"><a href="#4-4-常用方法" class="headerlink" title="4.4 常用方法"></a>4.4 常用方法</h2><p>StringBuilder常用的方法有2个：</p><ul><li><code>public StringBuilder append(...)</code>：添加任意类型数据的字符串形式，并返回当前对象自身。</li><li><code>public String toString()</code>：将当前StringBuilder对象转换为String对象。</li></ul><h3 id="append方法"><a href="#append方法" class="headerlink" title="append方法"></a>append方法</h3><p>append方法具有多种重载形式，可以接收任意类型的参数。任何数据作为参数都会将对应的字符串内容添加到StringBuilder中。例如：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo02StringBuilder</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建对象</span>        StringBuilder builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//public StringBuilder append(任意类型)</span>        StringBuilder builder2 <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//对比一下</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"builder:"</span><span class="token operator">+</span>builder<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"builder2:"</span><span class="token operator">+</span>builder2<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>builder <span class="token operator">==</span> builder2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//true</span>        <span class="token comment" spellcheck="true">// 可以添加 任何类型</span>        builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 在我们开发中，会遇到调用一个方法后，返回一个对象的情况。然后使用返回的对象继续调用方法。</span>        <span class="token comment" spellcheck="true">// 这种时候，我们就可以把代码现在一起，如append方法一样，代码如下</span>        <span class="token comment" spellcheck="true">//链式编程</span>        builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"builder:"</span><span class="token operator">+</span>builder<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>备注：StringBuilder已经覆盖重写了Object当中的toString方法。</p></blockquote><h3 id="toString方法"><a href="#toString方法" class="headerlink" title="toString方法"></a>toString方法</h3><p>通过toString方法，StringBuilder对象将会转换为不可变的String对象。如：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo16StringBuilder</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 链式创建</span>        StringBuilder sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"World"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"Java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 调用方法</span>        String str <span class="token operator">=</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// HelloWorldJava</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="第五章-包装类"><a href="#第五章-包装类" class="headerlink" title="第五章 包装类"></a>第五章 包装类</h1><h2 id="5-1-概述"><a href="#5-1-概述" class="headerlink" title="5.1 概述"></a>5.1 概述</h2><p>Java提供了两个类型系统，基本类型与引用类型，使用基本类型在于效率，然而很多情况，会创建对象使用，因为对象可以做更多的功能，如果想要我们的基本类型像对象一样操作，就可以使用基本类型对应的包装类，如下：</p><table><thead><tr><th>基本类型</th><th>对应的包装类（位于java.lang包中）</th></tr></thead><tbody><tr><td>byte</td><td>Byte</td></tr><tr><td>short</td><td>Short</td></tr><tr><td>int</td><td><strong>Integer</strong></td></tr><tr><td>long</td><td>Long</td></tr><tr><td>float</td><td>Float</td></tr><tr><td>double</td><td>Double</td></tr><tr><td>char</td><td><strong>Character</strong></td></tr><tr><td>boolean</td><td>Boolean</td></tr></tbody></table><h2 id="5-2-装箱与拆箱"><a href="#5-2-装箱与拆箱" class="headerlink" title="5.2 装箱与拆箱"></a>5.2 装箱与拆箱</h2><p>基本类型与对应的包装类对象之间，来回转换的过程称为”装箱“与”拆箱“：</p><ul><li><p><strong>装箱</strong>：从基本类型转换为对应的包装类对象。</p></li><li><p><strong>拆箱</strong>：从包装类对象转换为对应的基本类型。</p></li></ul><p>用Integer与 int为例：（看懂代码即可）</p><p>基本数值—-&gt;包装对象</p><pre class=" language-java"><code class="language-java">Integer i <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//使用构造函数函数</span>Integer iii <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//使用包装类中的valueOf方法</span></code></pre><p>包装对象—-&gt;基本数值</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> num <span class="token operator">=</span> i<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="5-3自动装箱与自动拆箱"><a href="#5-3自动装箱与自动拆箱" class="headerlink" title="5.3自动装箱与自动拆箱"></a>5.3自动装箱与自动拆箱</h2><p>由于我们经常要做基本类型与包装类之间的转换，从Java 5（JDK 1.5）开始，基本类型与包装类的装箱、拆箱动作可以自动完成。例如：</p><pre class=" language-java"><code class="language-java">Integer i <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//自动装箱。相当于Integer i = Integer.valueOf(4);</span>i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//等号右边：将i对象转成基本数值(自动拆箱) i.intValue() + 5;</span><span class="token comment" spellcheck="true">//加法运算完成后，再次装箱，把基本数值转成对象。</span></code></pre><h2 id="5-3-基本类型与字符串之间的转换"><a href="#5-3-基本类型与字符串之间的转换" class="headerlink" title="5.3 基本类型与字符串之间的转换"></a>5.3 基本类型与字符串之间的转换</h2><h3 id="基本类型转换为String"><a href="#基本类型转换为String" class="headerlink" title="基本类型转换为String"></a>基本类型转换为String</h3><p>   基本类型转换String总共有三种方式，查看课后资料可以得知，这里只讲最简单的一种方式： </p><pre><code>基本类型直接与””相连接即可；如：34+""</code></pre><p>String转换成对应的基本类型 </p><p>除了Character类之外，其他所有包装类都具有parseXxx静态方法可以将字符串参数转换为对应的基本类型：</p><ul><li><code>public static byte parseByte(String s)</code>：将字符串参数转换为对应的byte基本类型。</li><li><code>public static short parseShort(String s)</code>：将字符串参数转换为对应的short基本类型。</li><li><code>public static int parseInt(String s)</code>：将字符串参数转换为对应的int基本类型。</li><li><code>public static long parseLong(String s)</code>：将字符串参数转换为对应的long基本类型。</li><li><code>public static float parseFloat(String s)</code>：将字符串参数转换为对应的float基本类型。</li><li><code>public static double parseDouble(String s)</code>：将字符串参数转换为对应的double基本类型。</li><li><code>public static boolean parseBoolean(String s)</code>：将字符串参数转换为对应的boolean基本类型。</li></ul><p>代码使用（仅以Integer类的静态方法parseXxx为例）如：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo18WrapperParse</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"100"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>注意:如果字符串参数的内容无法正确转换为对应的基本类型，则会抛出<code>java.lang.NumberFormatException</code>异常。</p></blockquote><h2 id="来自-–黑马程序员"><a href="#来自-–黑马程序员" class="headerlink" title="来自 –黑马程序员"></a>来自 –黑马程序员</h2>]]></content>
      
      
      <categories>
          
          <category> Object类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Final学习笔记</title>
      <link href="2020/08/03/final-xue-xi-bi-ji/"/>
      <url>2020/08/03/final-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="Final学习笔记"><a href="#Final学习笔记" class="headerlink" title="Final学习笔记"></a>Final学习笔记</h1><p>final关键字代表最终、不可改变的。<br>  常见四种用法.</p><ol><li>可以用来修饰一一个类</li><li>可以用来修饰一个方法</li><li>还可以用来修饰一一个局部变量</li><li>还可以用来修饰一一个成员变量</li></ol><a id="more"></a><p>当final关键字用来修饰一个类的时候，格式:</p><ul><li>public final class 类名称{</li><li>//</li><li>…</li><li>}</li><li>含义:当前这个类不能有任何的子类。 (太监类)</li><li></li><li>意，二不类如果是Finol的，那么其中所有的成员方法都无法进行覆盖重写(因为设儿子)</li></ul><p>注意：不能使用一个final类来作为父类</p><ul><li>当final关键字用来修饰一个方法的时候，这个方法就是最终方法，也就是不能被覆盖重写。<ul><li><p>格式:</p><pre><code>修饰符final. 返回值类型方法名称(參数列表) {      //方法体      }</code></pre><p>注意事项:<br>对于类、 方法来说，abstract关键字和final关键字不能同时使用， 因为矛盾。</p></li></ul></li></ul><h3 id="Final关键字修饰局部变量"><a href="#Final关键字修饰局部变量" class="headerlink" title="Final关键字修饰局部变量"></a>Final关键字修饰局部变量</h3><p>举例：</p><ul><li><p>学生类</p><pre><code>public class Student {  private String name;  public Student() {  }  public Student(String name) {      this.name = name;  }  public String getName() {      return name;  }  public void setName(String name) {      this.name = name;  }}</code></pre></li></ul><pre><code>- Final实现</code></pre><p>public class Demo01Final {</p><pre><code>public static void main(String[] args) {    int num1 = 10;    System.out.println(num1);    num1 = 20;    System.out.println(num1);    //一旦使用final用来修饰局部变量，那么这个变量就不能进行更改。    //“一次赋值，终生不变”    final int num2 = 200;    System.out.println(num2);</code></pre><p>//        num2 = 250;</p><p>//        num2 = 200;</p><pre><code>    //正确写法!只要保证有唯一一次赋值即可    final int num3;    num3 = 30;    //对于基本类型来说，不可变说的是变量当中的数据不可改变    //对于引用类型来说，不可变说的是变量当中的地址值不可改变    Student stu1 = new Student("赵丽颖");    System.out.println(stu1);    System.out.println(stu1.getName());    stu1 = new Student("霍建华");    System.out.println(stu1);    System.out.println(stu1.getName());    System.out.println("================");    final Student stu2 = new Student("高圆圆");    //错误写法! final 的引用类型变量，其中的地址不可改变</code></pre><p>//        stu2 = new Student(“赵又廷”);</p><pre><code>    System.out.println(stu2.getName());    stu2.setName("高圆圆圆圆圆圆");    System.out.println(stu2.getName());}</code></pre><p>}</p><pre><code>### Final关键字修饰成员变量对于成员变量来说，如果使用final关键字修饰，那么这个变量也照样是不可变。1. 由于成员变量具有默认值，所以用了final之后必须手动赋值，不会再给默认值了。2. 对于final的成员变量，要么使用直接赋值，要么通过构造方法赋值。二者选其一。3. 必须保证类当中所有重载的构造方法，都最终会对final的成员变量进行赋值。#### 举例：- Person类</code></pre><p>public class Person {<br>    private final String name/* = “鹿晗”*/;</p><pre><code>public Person() {    name = "关晓彤";}public Person(String name) {    this.name = name;}public String getName() {    return name;}</code></pre><p>//    public void setName(String name) {<br>//        this.name = name;<br>//    }<br>}</p><pre><code>### 四种权限修饰符Java中有四种权限修饰符:*  public &gt; protected &gt; ( default) &gt; private同一个类(我自己)YESYESYESYES同一个包(我邻居)YESYESYESNO不同包子类(我儿子)YESYESNO不同包非子类(陌生人)YESNONONO注意事项。(default)并不是关键字"default"， 而是根本不写。### 内部类的概念和分类如果一个事物的内部包含另一个事物，那么这就是一个类内部包含另一个类。例如。身体和心脏的关系。又如，汽车和发动机的关系。分类:1. 成员内部类2. 局部内部类(包含匿名内部类)### 成员内部类的定义方法- 成员内部类的定义格式，</code></pre><p>修饰符class 外部类名称{<br>修饰符class 内部类名称{<br>// …<br>}<br>//…<br>}</p><pre><code>注意:内用外，随意访问:外用内，需要内部类对象。.Body内部类代码实现</code></pre><p>public class Body {//外部类</p><pre><code>public class Heart{//成员内部类    //内部类的方法    public void beat(){        System.out.println("心脏跳动，嘭嘭嘭");        System.out.println("我叫：" + name);    }}//外部类的变量private String name;public void nethodBody(){    System.out.println("外部类的方法！");}public Body(String name) {    this.name = name;}public String getName() {    return name;}</code></pre><p>}</p><pre><code>### 使用成员外部类如何使用成员内部类?有两种方式:1 .间接方式:在外部类的方法当中，使用内部类:然后main只是调用外部类的方法。2. 直接方式，公式:</code></pre><p>类名称对象名= new类名称();<br>[外部类名称.内部类名称对象名= new外部类名称(). new内部类名称();]</p><pre><code>代码实现：</code></pre><p>public class Demo01InnerClass {</p><pre><code>public static void main(String[] args) {    Body body = new Body();    //通过外部类的对象，调用外部类的方法，里面间接在使用内部类Heart    body.methodBody();    System.out.println("====================");    Body.Heart heart = new Body().new Heart();    heart.beat();}</code></pre><p>}</p><pre><code>### 内部类重名成员变量访问代码实现：Outer.java</code></pre><p>//如果出现了重名现象，那么格式是：外部类名称.this.外部类成员变量名<br>public class Outer {</p><pre><code>int num = 10;//外部类的成员变量public class Inner{    int num = 20;//内部类的成员变量    public void methodInner(){        int num = 30;//内部类方法的局部变量        System.out.println(num);//局部变量，就近原则        System.out.println(this.num);//内部类的成员变量        System.out.println(Outer.this.num);//外部类的成员变量    }}</code></pre><p>}</p><pre><code>代码实现：Demo02InnerClass.java</code></pre><p>public class Demo02InnerClass {</p><pre><code>public static void main(String[] args) {    //[外部类名称.内部类名称对象名= new外部类名称(). new内部类名称();]    Outer.Inner obj = new Outer().new Inner();    obj.methodInner();}</code></pre><p>}</p><pre><code>### 局部内部类定义如果一个类是定义在一个方法内部的，那么这就是一个局部内部类。 “局部”:只有当前所属的方法才能使用它，出了这个方法外面就不能用了。定义格式:</code></pre><p>修饰符class 外部类名称{<br>修饰符 返回值类型外部类方法名称(参数列表) {<br>class局部内部类名称{<br>// …<br>          }<br>      }<br> }</p><pre><code>代码实现：Outer.java</code></pre><p>public class Outer {</p><pre><code>public void methodOuter(){    class Inner{//局部内部类        int num = 10;        public void methodInner(){            System.out.println(num);        }    }    Inner inner = new Inner();    inner.methodInner();}</code></pre><p>}</p><pre><code>代码实现：DemoMian.java</code></pre><p>public class DemoMain {</p><pre><code>public static void main(String[] args) {    Outer obj = new Outer();    obj.methodOuter();}</code></pre><p>}</p><pre><code>### 权限修饰符小结public &gt; protected &gt; (default) &gt; private定义一个类的时候，权限修饰符规则。”1. 外部类: public / (default)2. 成员内部类public / protected / (default) / private3. 局部内部类，什么都不能写### 局部内部类的final问题局部内部类，如果希望访问所在方法的局部变量，那么这个局部变量必须是[有效final的]备注。从Java 8+开始，只要局部变量事实不变,那么final关键字可以省略。原因:1. new出来的对象在堆内存当中。2. 局部变量是跟着方法走的，在栈内存当中。3. 方法运行结束之后，立刻出栈，局部变量就会立刻消失。4. 但是new出来的对象会在堆当中持续存在，直到垃圾回收消失。### 匿名内部类如果接口的实现类(或者是父类的子类)只需要使用唯一一的一次，那么这种情况下就可以省略掉该类的定义，而改为使用[匿名内部类]。匿名内部类的定义格式:</code></pre><p>接口名称_对象名二new.接口名称() {<br> //覆盖重写所有抽象方法<br> }；</p><pre><code>对格式“new.接口名称(). {... }"进行解析:1. new代表创建对象的动作2. 接口名称就是匿名内部类需要实现哪个接口3. {... }这才是匿名内部类的内容- 另外还要注意几点问题:1. 匿名内部类，在[创建对象]的时候，只能使用唯一一次。如果希望多次创建对象，而且类的内容一样的话， 那么就必须使用单独定义的实现类了。2. 匿名对象，在[调用方法]的时候，只能调用唯一次。如果希望同一个对象，调用多次方法，那么必须给对象起个名字。3. 匿名内部类是省略了[实现类/子类名称]，但是匿名对象是省略了[对象名称]强调:匿名内部类和匿名对象不是一回事! ! !匿名内部类的接口代码实现：MyInterface.java(接口-Interface)</code></pre><p>package demo05;</p><p>public interface MyInterface {</p><pre><code>void method1();//抽象方法void method2();</code></pre><p>}</p><pre><code>匿名内部类继承的代码实现:MyInterfaceImpl.java</code></pre><p>import demo02.MyClass;</p><p>public class MyInterfaceImpl implements MyInterface {</p><pre><code>@Overridepublic void method1() {    System.out.println("实现类覆盖重写了方法！111");}@Overridepublic void method2() {    System.out.println("实现类覆盖重写了方法！222");}</code></pre><p>}</p><pre><code>匿名内部类的代码实现：DemoMian.java</code></pre><p>public class DemoMian {</p><pre><code>public static void main(String[] args) {</code></pre><p>//        MyInterfaceImpl impl = new MyInterfaceImpl();<br>//        impl.method();</p><p>//        MyInterface some = new MyInterface();//错误写法</p><pre><code>    //使用匿名内部类    MyInterface objA = new MyInterface() {        @Override        public void method1() {            System.out.println("匿名内部类实现了方法！111a");        }        @Override        public void method2() {            System.out.println("匿名内部类实现了方法！222a");        }    };    objA.method1();    objA.method2();    System.out.println("====================");    //使用了匿名内部类，而且省略了对象名称，也是匿名对象    new MyInterface() {        @Override        public void method1() {            System.out.println("匿名内部类实现了方法！111b");        }        @Override        public void method2() {            System.out.println("匿名内部类实现了方法！222b");        }    }.method1();    //因为匿名对象无法调用第二次方法，所以需要再创建一个匿名内部类的匿名对象    new MyInterface() {        @Override        public void method1() {            System.out.println("匿名内部类实现了方法！111b");        }        @Override        public void method2() {            System.out.println("匿名内部类实现了方法！222b");        }    }.method2();}</code></pre><p>}</p><pre><code>### 类作为成员变量类型代码实现：Hero.java</code></pre><p>//游戏当中的英雄角色类<br>public class Hero {</p><pre><code>private String name;//英雄的名字private  int age;//英雄的年龄private Weapon weapon;//英雄的武器public Hero() {}public Hero(String name, int age, Weapon weapon) {    this.name = name;    this.age = age;    this.weapon = weapon;}public void attack(){    System.out.println("年龄为" + age + "的" + name + "用" + weapon.getCode() + "攻击敌方");}public String getName() {    return name;}public void setName(String name) {    this.name = name;}public int getAge() {    return age;}public void setAge(int age) {    this.age = age;}public Weapon getWeapon() {    return weapon;}public void setWeapon(Weapon weapon) {    this.weapon = weapon;}</code></pre><p>}</p><pre><code>代码实现：Weapon.java</code></pre><p>public class Weapon {</p><pre><code>private String code;//武器的代号public Weapon() {}public Weapon(String code) {    this.code = code;}public String getCode() {    return code;}public void setCode(String code) {    this.code = code;}</code></pre><p>}</p><pre><code>代码实现：DemoMian.java</code></pre><p>public class DemoMian {</p><pre><code>public static void main(String[] args) {    //创建一个英雄角色    Hero hero = new Hero();    //为英雄起一个名字，并且设置年龄    hero.setName("盖伦");    hero.setAge(20);    //创建一个武器对象    Weapon weapon = new Weapon("霜之哀伤");    //为英雄配备武器    hero.setWeapon(weapon);    //年龄为20的盖伦用多兰剑攻击敌方。    hero.attack();}</code></pre><p>}</p><pre><code>### 接口作为成员变量类型代码实现：Hero.java</code></pre><p>public class Hero {</p><pre><code>private String name;//英雄的名称private Skill skill;//英雄的技能public Hero() {}public Hero(String name, Skill skill) {    this.name = name;    this.skill = skill;}public void attack(){    System.out.println("我叫" + name + ",开始释放技能");    skill.use();//调用接口的抽象方法    System.out.println("释放技能完成");}public String getName() {    return name;}public void setName(String name) {    this.name = name;}public Skill getSkill() {    return skill;}public void setSkill(Skill skill) {    this.skill = skill;}</code></pre><p>}</p><pre><code>代码实现：Skill.java</code></pre><p>public interface Skill {</p><pre><code>void use();//释放技能的抽象方法</code></pre><p>}</p><pre><code>代码实现：SkillImpl.java</code></pre><p>public class SkillImpl  implements Skill{<br>    @Override<br>    public void use() {</p><pre><code>}</code></pre><p>}</p><pre><code>代码实现：DemoMian.java</code></pre><p>public class DemoGame {</p><pre><code>public static void main(String[] args) {    Hero hero = new Hero();    hero.setName("艾希");//设置英雄的名称    //设置英雄的技能</code></pre><p>//        hero.setSkill(new SkillImpl());</p><pre><code>    //还可以改成使用匿名内部类</code></pre><p>//        Skill skill = new Skill() {<br>//            @Override<br>//            public int hashCode() {<br>//                System.out.println(“pia<del>pia</del>pia~”);<br>//            }<br>//        };<br>//        hero.setSkill(skill);</p><pre><code>    //进一步简化，同时使用匿名内部类和匿名对象    hero.setSkill(new Skill() {        @Override        public void use() {            System.out.println("biu~pia~biu~pia");        }    });    {        hero.attack();    }}</code></pre><p>}</p><pre><code>### 接口作为方法的参数和返回值代码实现：DemoInterface.java</code></pre><p>import java.util.ArrayList;<br>import java.util.List;</p><p>/**</p><ul><li><p>java. util.List正是ArrayList所实现的接口。</p></li><li><p>/<br>public class DemoInterface {</p><p>  public static void main(String[] args) {</p><pre><code>  //左边是接口名称，右边是实现类名称，这就是多态写法  List&lt;String&gt; list = new ArrayList&lt;&gt;();  List&lt;String&gt; result = addName(list);  for (int i = 0; i &lt; result.size(); i++) {      System.out.println(result.get(i));  }</code></pre><p>  }</p><p>  public static List<string> addName(List<string> list){</string></string></p><pre><code>  list.add("迪丽热巴！");  list.add("古力娜扎！");  list.add("马儿扎哈！");  list.add("沙扬娜拉！");  return list;</code></pre><p>  }<br>}</p><pre><code></code></pre></li></ul><h3 id="发红包案例"><a href="#发红包案例" class="headerlink" title="发红包案例"></a>发红包案例</h3><p>场景说明:<br>红包发出去之后，所有人都有红包，大家抢完了之后，最后一个红包给群主自己。<br>大多数代码都是现成的，我们需要做的就是填空題。</p><p>我们自己要做的事情有:</p><ol><li>设置一下程序的标题，通过构造方法的字符串参数</li><li>设置群主名称</li><li>设置分发策略:平均，还是随机?</li></ol><p>红包分发的策略:</p><ol><li>普通红包(平均)。totalMoney, ! totalCount, 余数放在最后-一个红包当中。</li><li>手气紅包(随机) :最少1分钱，最多不超过平均数的2倍。应该越发越少。</li></ol><p>代码实现：BootStrap.java  (主)</p><pre><code>public class BootStrap {    public static void main(String[] args) {        MyRed red = new MyRed("展爸爸发红包啦~");        //设置群主名称        red.setOwnerName("王思聪");        //普通红包//        OpenMode normal = new MomalMode();//        red.setOpenWay(normal);        //手气红包        OpenMode random = new RandomMode();        red.setOpenWay(random);    }}</code></pre><p>代码实现：MyRed.java  (继承)</p><pre><code>import red.RedPacketFrame;public class MyRed extends RedPacketFrame {    /**     * 构造方法：生成红包界面。     *     * @param title 界面的标题     */    public MyRed(String title) {        super(title);    }}</code></pre><p>代码实现：MormalMode.java  (算法)</p><pre><code>import red.OpenMode;import java.util.ArrayList;public class MomalMode  implements OpenMode {    @Override    public ArrayList&lt;Integer&gt; divide(final int totalMoney, final int totalCount) {        ArrayList&lt;Integer&gt; list = new ArrayList&lt;&gt;();        int avg = totalMoney / totalCount;//平均值        int mod = totalMoney % totalCount;//余数，模，零头        for (int i = 0; i &lt; totalCount - 1; i++) {            list.add(avg);        }        //有零头，需要放在最后一个红包中        list.add(avg + mod);        return null;    }}</code></pre><p>代码实现：RandomMode.java  随机红包(算法)</p><pre><code>import red.OpenMode;import java.util.ArrayList;import java.util.Random;public class RandomMode implements OpenMode {    @Override    public ArrayList&lt;Integer&gt; divide(final int totalMoney,final int totalCount) {        ArrayList&lt;Integer&gt; list = new ArrayList&lt;&gt;();        //随机分配，有可能多，有可能少。        //最少1分钱，最多不超过”剩下金额平均数的2倍“        //第一次发红包，随机范围是0.01-6.66元        //第一次发完之后，剩下的至少是3.34元        //此时还需要再发两个红包        //此时的再发范围应该是0.01元-3.34元（取不到右边，剩下0.01）        //总结一下，范围的[公式]是：1 + random. nextInt(leftMoney / leftCount * 2);        Random r = new Random();//首先创建一个随机数生成器        // totalMoney是总 金额，totalCount是 总份数，不变        //额外定义两个变量，分别代表剩下多少钱，剩下多少份        int leftMoney = totalMoney;        int leftCount = totalCount;        //随机发前n-1个，最后一个不需要随机        for (int i = 0; i &lt;totalCount; i++){            int money = r.nextInt(leftMoney / leftCount * 2) + 1;            list.add(money);//将一个随机红包放入集合            leftMoney -= money;//剩下的金额越发越少            leftCount --;//剩下还应该再发的红包个数，递减        }        //最后一个红包，直接放进去        list.add(leftMoney);        return list;    }}</code></pre><p>代码实现：OpenMode.java  随机红包(接口)</p><pre><code>import java.util.ArrayList;public interface OpenMode {    /**     * 请将totalMoney分成count份，保存到ArrayList&lt;Integer&gt;中，返回即可。     *     * @param totalMoney            总金额为方便计算，已经转换为整数，单位为分。     * @param totalCount            红包个数     * @return ArrayList&lt;Integer&gt;    元素为各个红包的金额值，所有元素的值累和等于总金额。     */    ArrayList&lt;Integer&gt; divide(int totalMoney, int totalCount);}</code></pre><p>代码实现：RedPacketFrame.java  随机红包(图形化界面)</p><pre><code>package red;import javax.swing.*;import java.awt.*;import java.awt.event.KeyAdapter;import java.awt.event.KeyEvent;import java.awt.event.MouseAdapter;import java.awt.event.MouseEvent;import java.util.ArrayList;import java.util.HashMap;/** * 红包的框架 RedPacketFrame * * AWT / Swing / JavaFX * * @author 不是我 */public abstract class RedPacketFrame extends JFrame {    private static final long serialVersionUID = 1L;        private static final String DIR = "day11-code\\pic";    private ArrayList&lt;Integer&gt; moneyList = null;    private static int initMoney = 0;    private static int totalMoney = 0; // 单位为“分”    private static int count = 0;    private static HashMap&lt;JPanel, JLabel&gt; panelLable = new HashMap&lt;&gt;();    // 设置字体    private static Font fontYaHei = new Font("微软雅黑", Font.BOLD, 20);    private static Font msgFont = new Font("微软雅黑", Font.BOLD, 20);    private static Font totalShowFont = new Font("微软雅黑", Font.BOLD, 40);    private static Font nameFont = new Font("微软雅黑", Font.BOLD, 40);    private static Font showNameFont = new Font("微软雅黑", Font.BOLD, 20);    private static Font showMoneyFont = new Font("微软雅黑", Font.BOLD, 50);    private static Font showResultFont = new Font("微软雅黑", Font.BOLD, 15);    /**     * 窗体大小 WIDTH:400 HEIGHT:600     */    private static final int FRAME_WIDTH = 416; // 静态全局窗口大小    private static final int FRAME_HEIGHT = 650;    private static JLayeredPane layeredPane = null;    /// private static JPanel contentPane = null;    /**     * page1:输入页面 - InputPanel . 组件和初始化!     */    private static JPanel inputPanel = new JPanel();    // private static JTextField input_total = new JTextField("200"); // 测试用    // private static JTextField input_count = new JTextField("3"); // 测试用    private static JTextField input_total = new JTextField();    private static JTextField input_count = new JTextField();    private static JTextField input_people = new JTextField("30");    private static JTextField input_msg = new JTextField("恭喜发财  ,  大吉大利");    private static JTextField input_total_show = new JTextField("$ " + input_total.getText().trim());    private static JLabel input_inMoney = new JLabel(); // 不可见    private static JLabel input_bg_label = new JLabel(new ImageIcon(DIR + "\\01_input.jpg"));    static {        // 设置位置        input_total.setBounds(200, 90, 150, 50);        input_count.setBounds(200, 215, 150, 50);        input_people.setBounds(90, 275, 25, 30);        input_msg.setBounds(180, 340, 200, 50);        input_total_show.setBounds(130, 430, 200, 80);        input_inMoney.setBounds(10, 535, 380, 65);        input_bg_label.setBounds(0, 0, 400, 600); // 背景        // 设置字体        input_total.setFont(fontYaHei);        input_count.setFont(fontYaHei);        input_people.setFont(fontYaHei);        input_msg.setFont(msgFont);        input_msg.setForeground(new Color(255, 233, 38)); // 字体颜色 为金色        input_total_show.setFont(totalShowFont);        input_inMoney.setFont(fontYaHei);        // 透明        input_people.setOpaque(false);        input_total_show.setOpaque(false);        // 编 辑 -- 不可编辑        input_people.setEditable(false);        input_total_show.setEditable(false);        // 边界 -- 无        input_total.setBorder(null);        input_count.setBorder(null);        input_people.setBorder(null);        input_msg.setBorder(null);        input_total_show.setBorder(null);    }    /**     * page2:打开页面 - openPanel . 组件和初始化!     */    private static JPanel openPanel = new JPanel();    private static JTextField open_ownerName = new JTextField("谁谁谁");    private static JLabel open_label = new JLabel(new ImageIcon(DIR + "\\02_open_2.gif"));    private static JLabel open_bg_label = new JLabel(new ImageIcon(DIR + "\\02_open_1.jpg"));    static {        // 设置 位置.        open_ownerName.setBounds(0, 110, 400, 50);        open_bg_label.setBounds(0, 0, 400, 620);        open_label.setBounds(102, 280, 200, 200);        open_ownerName.setHorizontalAlignment(JTextField.CENTER);        // 设置字体        open_ownerName.setFont(nameFont);        open_ownerName.setForeground(new Color(255, 200, 163)); // 字体颜色 为金色        // 背景色        // open_name.setOpaque(false);        open_ownerName.setBackground(new Color(219, 90, 68));        // 不可编辑        open_ownerName.setEditable(false);        // 边框        open_ownerName.setBorder(null);    }    /**     * page3:展示页面 - showPanel . 组件和初始化!     */    private static JPanel showPanel = new JPanel();    private static JPanel showPanel2 = new JPanel();    private static JScrollPane show_jsp = new JScrollPane(showPanel2);    private static JLabel show_bg_label = new JLabel(new ImageIcon(DIR + "\\03_money_1.jpg"));    private static JTextField show_name = new JTextField("用户名称");    private static JTextField show_msg = new JTextField("祝福信息");    private static JTextField show_money = new JTextField("99.99");    private static JTextField show_result = new JTextField(count + "个红包共" + (totalMoney / 100.0) + "元,被抢光了");    static {        // 分别设置水平和垂直滚动条自动出现        // jsp.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);        // jsp.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);        /*         * 两部分 页面 . 1.本人获得的红包-- showPanel 2.别人获得的红包-- show_jsp         */        show_name.setBounds(125, 180, 100, 30);        show_name.setOpaque(false);        show_name.setBorder(null);        show_name.setFont(showNameFont);        show_msg.setBounds(0, 220, 400, 30);        show_msg.setOpaque(false);        show_msg.setBorder(null);        show_msg.setFont(msgFont);        show_msg.setHorizontalAlignment(JTextField.CENTER);        show_money.setBounds(0, 270, 250, 40);        show_money.setOpaque(false);        show_money.setBorder(null);        show_money.setFont(showMoneyFont);        show_money.setForeground(new Color(255, 233, 38)); // 字体颜色 为金色        show_money.setHorizontalAlignment(SwingConstants.RIGHT);        show_result.setBounds(10, 460, 400, 20);        show_result.setOpaque(false);        show_result.setBorder(null);        show_result.setFont(showResultFont);        show_result.setForeground(new Color(170, 170, 170)); // 字体颜色 为灰色        // 设置 图片.        show_bg_label.setBounds(0, 0, 400, 500);    }    static {        // 页面和 背景的对应关系.        panelLable.put(inputPanel, input_bg_label);        panelLable.put(openPanel, open_bg_label);        panelLable.put(showPanel, show_bg_label);    }    private void init() {        // 层次面板-- 用于设置背景        layeredPane = this.getLayeredPane();//        System.out.println("层次面板||" + layeredPane);        // System.out.println(layeredPane);        // 初始化框架 -- logo 和基本设置        initFrame();        // 初始化 三个页面 -- 准备页面        initPanel();        // 2.添加 页面 --第一个页面, 输入 panel 设置到 页面上.        setPanel(inputPanel);        // 3.添加 监听        addListener();    }    /**     * 初始化框架 -- logo 和基本设置     */    private void initFrame() {        // logo        this.setIconImage(Toolkit.getDefaultToolkit().getImage(DIR + "\\logo.gif"));//        System.out.println("LOGO初始化...");        // 窗口设置        this.setSize(FRAME_WIDTH, FRAME_HEIGHT); // 设置界面大小        this.setLocation(280, 30); // 设置界面出现的位置        this.setDefaultCloseOperation(EXIT_ON_CLOSE);        this.setLayout(null);        // 测试期 注释 拖 拽 , 运行放开        // this.setResizable(false);        this.setVisible(true);    }    /**     * 初始化页面-- 准备三个页面     */    private void initPanel() {//        System.out.println("页面初始化...");        initInputPanel();        initOpenPanel();        initShowPanel();    }    private void initInputPanel() {        inputPanel.setLayout(null);        inputPanel.setBounds(0, -5, 400, 600);        // this.add(bg_label);        inputPanel.add(input_total);        inputPanel.add(input_count);        inputPanel.add(input_people);        inputPanel.add(input_msg);        inputPanel.add(input_total_show);        inputPanel.add(input_inMoney);//        System.out.println("输入页面||" + inputPanel);    }    private void initOpenPanel() {        openPanel.setLayout(null);        openPanel.setBounds(0, 0, 400, 600);        // this.add(bg_label);        openPanel.add(open_ownerName);        openPanel.add(open_label);//        System.out.println("打开页面||" + openPanel);    }    private void initShowPanel() {        showPanel.setLayout(null);        showPanel.setBounds(10, 10, 300, 600);        // ==============        showPanel.add(show_name);        showPanel.add(show_msg);        showPanel.add(show_money);        showPanel.add(show_result);//        System.out.println("展示页面||" + showPanel);        // ====================================        // showPanel2.setLayout(null);        // showPanel2.setBounds(0, 500, 401, 300);        showPanel2.setPreferredSize(new Dimension(300, 1000));        showPanel2.setBackground(Color.white);        show_jsp.setBounds(0, 500, 400, 110);    }    /**     * 每次打开页面, 设置 panel的方法     */    private void setPanel(JPanel panel) {        // 移除当前页面        layeredPane.removeAll();//        System.out.println("重新设置:新页面");        // 背景lable添加到layeredPane的默认层        layeredPane.add(panelLable.get(panel), JLayeredPane.DEFAULT_LAYER);        // 面板panel设置为透明        panel.setOpaque(false);        // 面板panel 添加到 layeredPane的modal层        layeredPane.add(panel, JLayeredPane.MODAL_LAYER);    }    // private void setShowPanel(JPanel show) {    // setPanel(show);    // layeredPane.add(show_jsp, JLayeredPane.MODAL_LAYER);    //    // }    /**     * 设置组件的监听器     */    private void addListener() {        input_total.addKeyListener(new KeyAdapter() {            @Override            public void keyReleased(KeyEvent e) {                // System.out.println(e);                String input_total_money = input_total.getText();                input_total_show.setText("$ " + input_total_money);            }        });        input_count.addKeyListener(new KeyAdapter() {            @Override            public void keyReleased(KeyEvent e) {                // System.out.println(e);//                System.out.println("个数:" + input_count.getText());            }        });        input_msg.addKeyListener(new KeyAdapter() {            @Override            public void keyReleased(KeyEvent e) {                // System.out.println(e);//                System.out.println("留言:" + input_msg.getText());            }        });        input_inMoney.addMouseListener(new MouseAdapter() {            @Override            public void mouseClicked(MouseEvent e) {                try {                    // 获取页面的值.                    totalMoney = (int) (Double.parseDouble(input_total.getText()) * 100); // 转换成"分"                    count = Integer.parseInt(input_count.getText());                    if (count &gt; 30) {                        JOptionPane.showMessageDialog(null, "红包个数不得超过30个", "红包个数有误", JOptionPane.INFORMATION_MESSAGE);                        return;                    }                    initMoney = totalMoney;                    System.out.println("总金额：[" + totalMoney + "]分");                    System.out.println("红包个数：[" + count + "]个");                    input_inMoney.removeMouseListener(this);//                    System.out.println("跳转--&gt;打开新页面");                    // 设置群主名称                    open_ownerName.setText(ownerName);                    // 设置打开页面                    setPanel(openPanel);                } catch (Exception e2) {                    JOptionPane.showMessageDialog(null, "请输入正确【总金额】或【红包个数】", "输入信息有误", JOptionPane.ERROR_MESSAGE);                }            }        });        // open_ownerName ,点击 [名称],触发的方法 , 提示如何设置群主名称.        open_ownerName.addMouseListener(new MouseAdapter() {            @Override            public void mouseClicked(MouseEvent arg0) {                JOptionPane.showMessageDialog(null, "请通过【setOwnerName】方法设置群主名称", "群主名称未设置",                        JOptionPane.QUESTION_MESSAGE);            }        });        // open label , 点击 [开],触发的方法,提示如何设置打开方式.        open_label.addMouseListener(new MouseAdapter() {            @Override            public void mouseClicked(MouseEvent e) {                if (openWay == null) {                    JOptionPane.showMessageDialog(null, "请通过【setOpenWay】方法设置打开方式", "打开方式未设置",                            JOptionPane.QUESTION_MESSAGE);                    return;                }//                System.out.println("跳转--&gt;展示页面");                moneyList = openWay.divide(totalMoney, count);//                System.out.println(moneyList);                /*                 * showPanel 添加数据                 *                 */                show_name.setText(ownerName);                show_msg.setText(input_msg.getText());                if (moneyList.size() &gt; 0) {                    show_money.setText(moneyList.get(moneyList.size() - 1) / 100.0 + "");                }                show_result.setText(count + "个红包共" + (initMoney / 100.0) + "元,被抢光了");                open_label.removeMouseListener(this);                setPanel(showPanel);                // 添加数据                for (int i = 0; i &lt; moneyList.size(); i++) {                    JTextField tf = new JTextField();                    tf.setBorder(null);                    tf.setFont(showNameFont);                    tf.setHorizontalAlignment(JTextField.LEFT);                    if (i == moneyList.size() - 1) {                        tf.setText(ownerName + "：\t" + moneyList.get(i) / 100.0 + "元");                    } else {                        tf.setText("群成员-" + i + "：\t" + moneyList.get(i) / 100.0 + "元");                    }                    showPanel2.add(tf);                }                layeredPane.add(show_jsp, JLayeredPane.MODAL_LAYER);            }        });    }    /* ======================================================================     * **********************************************************************     * * 以上代码均为页面部分处理,包括布局/互动/跳转/显示等,大家                            *     * *                                                                    *     * *                                                                    *     * **********************************************************************     * ======================================================================     */    /**     * ownerName : 群主名称     */    private String ownerName = "谁谁谁"; // 群主名称    /**     * openWay : 红包的类型 [普通红包/手气红包]     */    private OpenMode openWay = null;    /**     * 构造方法：生成红包界面。     *     * @param title 界面的标题     */    public RedPacketFrame(String title) {        super(title);        // 页面相关的初始化        init();    }    public void setOwnerName(String ownerName) {        this.ownerName = ownerName;    }    public void setOpenWay(OpenMode openWay) {        this.openWay = openWay;    }}</code></pre><h3 id="form-www-itcast-com"><a href="#form-www-itcast-com" class="headerlink" title="form  www.itcast.com"></a>form  <a href="http://www.itcast.com/">www.itcast.com</a></h3>]]></content>
      
      
      <categories>
          
          <category> Final </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络编程学习笔记</title>
      <link href="2020/08/03/wang-luo-bian-cheng/"/>
      <url>2020/08/03/wang-luo-bian-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h1><h2 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h2><ul><li> 软件架构CS／BS</li><li> 网络通信三要素</li><li> TCP通信</li><li> Socket套接字</li><li> ServerSocket<a id="more"></a></li></ul><h2 id="教学目标"><a href="#教学目标" class="headerlink" title="教学目标"></a>教学目标</h2><ul><li><input disabled="" type="checkbox"> 能够辨别UDP和TCP协议特点</li><li><input disabled="" type="checkbox"> 能够说出TCP协议下两个常用类名称</li><li><input disabled="" type="checkbox"> 能够编写TCP协议下字符串数据传输程序</li><li><input disabled="" type="checkbox"> 能够理解TCP协议下文件上传案例</li><li><input disabled="" type="checkbox"> 能够理解TCP协议下案例2</li></ul><h1 id="第一章-网络编程入门"><a href="#第一章-网络编程入门" class="headerlink" title="第一章 网络编程入门"></a>第一章 网络编程入门</h1><h2 id="1-1软件结构"><a href="#1-1软件结构" class="headerlink" title="1.1软件结构"></a>1.1软件结构</h2><ul><li><strong>C/S结构</strong> ：全称为Client/Server结构，是指客户端和服务器结构。常见程序有ＱＱ、迅雷等软件。</li></ul><p><img src="img/1_cs.jpg"></p><p><strong>B/S结构</strong> ：全称为Browser/Server结构，是指浏览器和服务器结构。常见浏览器有谷歌、火狐等。</p><p><img src="img/2_bs.jpg"></p><p>两种架构各有优势，但是无论哪种架构，都离不开网络的支持。<strong>网络编程</strong>，就是在一定的协议下，实现两台计算机的通信的程序。</p><h2 id="1-2-网络通信协议"><a href="#1-2-网络通信协议" class="headerlink" title="1.2 网络通信协议"></a>1.2 网络通信协议</h2><ul><li><strong>网络通信协议：</strong>通过计算机网络可以使多台计算机实现连接，位于同一个网络中的计算机在进行连接和通信时需要遵守一定的规则，这就好比在道路中行驶的汽车一定要遵守交通规则一样。在计算机网络中，这些连接和通信的规则被称为网络通信协议，它对数据的传输格式、传输速率、传输步骤等做了统一规定，通信双方必须同时遵守才能完成数据交换。</li></ul><ul><li><strong>TCP/IP协议：</strong> 传输控制协议/因特网互联协议( Transmission Control Protocol/Internet Protocol)，是Internet最基本、最广泛的协议。它定义了计算机如何连入因特网，以及数据如何在它们之间传输的标准。它的内部包含一系列的用于处理数据通信的协议，并采用了4层的分层模型，每一层都呼叫它的下一层所提供的协议来完成自己的需求。</li></ul><p><img src="img/3_tcp_ip.jpg"></p><p>上图中，TCP/IP协议中的四层分别是应用层、传输层、网络层和链路层，每层分别负责不同的通信功能。<br>链路层：链路层是用于定义物理传输通道，通常是对某些网络连接设备的驱动协议，例如针对光纤、网线提供的驱动。<br>网络层：网络层是整个TCP/IP协议的核心，它主要用于将传输的数据进行分组，将分组数据发送到目标计算机或者网络。<br>运输层：主要使网络程序进行通信，在进行网络通信时，可以采用TCP协议，也可以采用UDP协议。<br>应用层：主要负责应用程序的协议，例如HTTP协议、FTP协议等。</p><h2 id="1-3-协议分类"><a href="#1-3-协议分类" class="headerlink" title="1.3 协议分类"></a>1.3 协议分类</h2><p>通信的协议还是比较复杂的，<code>java.net</code> 包中包含的类和接口，它们提供低层次的通信细节。我们可以直接使用这些类和接口，来专注于网络程序开发，而不用考虑通信的细节。</p><p><code>java.net</code> 包中提供了两种常见的网络协议的支持：</p><ul><li><p><strong>UDP</strong>：用户数据报协议(User Datagram Protocol)。UDP是无连接通信协议，即在数据传输时，数据的发送端和接收端不建立逻辑连接。简单来说，当一台计算机向另外一台计算机发送数据时，发送端不会确认接收端是否存在，就会发出数据，同样接收端在收到数据时，也不会向发送端反馈是否收到数据。</p><p>由于使用UDP协议消耗资源小，通信效率高，所以通常都会用于音频、视频和普通数据的传输例如视频会议都使用UDP协议，因为这种情况即使偶尔丢失一两个数据包，也不会对接收结果产生太大影响。</p><p>但是在使用UDP协议传送数据时，由于UDP的面向无连接性，不能保证数据的完整性，因此在传输重要数据时不建议使用UDP协议。UDP的交换过程如下图所示。</p></li></ul><p><img src="img%5CUDP%E9%80%9A%E4%BF%A1%E5%9B%BE%E8%A7%A3.bmp" alt="UDP通信图解"></p><p>特点:数据被限制在64kb以内，超出这个范围就不能发送了。</p><p>数据报(Datagram):网络传输的基本单位 </p><ul><li><p><strong>TCP</strong>：传输控制协议 (Transmission Control Protocol)。TCP协议是<strong>面向连接</strong>的通信协议，即传输数据之前，在发送端和接收端建立逻辑连接，然后再传输数据，它提供了两台计算机之间可靠无差错的数据传输。</p><p>在TCP连接中必须要明确客户端与服务器端，由客户端向服务端发出连接请求，每次连接的创建都需要经过“三次握手”。</p><ul><li>三次握手：TCP协议中，在发送数据的准备阶段，客户端与服务器之间的三次交互，以保证连接的可靠。<ul><li>第一次握手，客户端向服务器端发出连接请求，等待服务器确认。</li><li>第二次握手，服务器端向客户端回送一个响应，通知客户端收到了连接请求。</li><li>第三次握手，客户端再次向服务器端发送确认信息，确认连接。整个交互过程如下图所示。</li></ul></li></ul></li></ul><p><img src="img/4_tcp.jpg"></p><p>​    完成三次握手，连接建立后，客户端和服务器就可以开始进行数据传输了。由于这种面向连接的特性，TCP协议可以保证传输数据的安全，所以应用十分广泛，例如下载文件、浏览网页等。</p><h2 id="1-4-网络编程三要素"><a href="#1-4-网络编程三要素" class="headerlink" title="1.4 网络编程三要素"></a>1.4 网络编程三要素</h2><h3 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h3><ul><li><strong>协议：</strong>计算机网络通信必须遵守的规则，已经介绍过了，不再赘述。</li></ul><h3 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h3><ul><li><strong>IP地址：指互联网协议地址（Internet Protocol Address）</strong>，俗称IP。IP地址用来给一个网络中的计算机设备做唯一的编号。假如我们把“个人电脑”比作“一台电话”的话，那么“IP地址”就相当于“电话号码”。</li></ul><p><strong>IP地址分类</strong></p><ul><li><p>IPv4：是一个32位的二进制数，通常被分为4个字节，表示成<code>a.b.c.d</code> 的形式，例如<code>192.168.65.100</code> 。其中a、b、c、d都是0~255之间的十进制整数，那么最多可以表示42亿个。</p></li><li><p>IPv6：由于互联网的蓬勃发展，IP地址的需求量愈来愈大，但是网络地址资源有限，使得IP的分配越发紧张。</p><p>为了扩大地址空间，拟通过IPv6重新定义地址空间，采用128位地址长度，每16个字节一组，分成8组十六进制数，表示成<code>ABCD:EF01:2345:6789:ABCD:EF01:2345:6789</code>，号称可以为全世界的每一粒沙子编上一个网址，这样就解决了网络地址资源数量不够的问题。</p></li></ul><p><strong>常用命令</strong></p><ul><li>查看本机IP地址，在控制台输入：</li></ul><pre class=" language-java"><code class="language-java">ipconfig</code></pre><ul><li>检查网络是否连通，在控制台输入：</li></ul><pre class=" language-java"><code class="language-java">ping 空格 IP地址ping <span class="token number">220.181</span><span class="token punctuation">.</span><span class="token number">57.216</span></code></pre><p><strong>特殊的IP地址</strong></p><ul><li>本机IP地址：<code>127.0.0.1</code>、<code>localhost</code> 。</li></ul><h3 id="端口号"><a href="#端口号" class="headerlink" title="端口号"></a>端口号</h3><p>网络的通信，本质上是两个进程（应用程序）的通信。每台计算机都有很多的进程，那么在网络通信时，如何区分这些进程呢？</p><p>如果说<strong>IP地址</strong>可以唯一标识网络中的设备，那么<strong>端口号</strong>就可以唯一标识设备中的进程（应用程序）了。</p><ul><li><strong>端口号：用两个字节表示的整数，它的取值范围是0~65535</strong>。其中，0~1023之间的端口号用于一些知名的网络服务和应用，普通的应用程序需要使用1024以上的端口号。如果端口号被另外一个服务或应用所占用，会导致当前程序启动失败。</li></ul><p>利用<code>协议</code>+<code>IP地址</code>+<code>端口号</code> 三元组合，就可以标识网络中的进程了，那么进程间的通信就可以利用这个标识与其它进程进行交互。</p><h1 id="第二章-TCP通信程序"><a href="#第二章-TCP通信程序" class="headerlink" title="第二章 TCP通信程序"></a>第二章 TCP通信程序</h1><h2 id="2-1-概述"><a href="#2-1-概述" class="headerlink" title="2.1 概述"></a>2.1 概述</h2><p>TCP通信能实现两台计算机之间的数据交互，通信的两端，要严格区分为客户端（Client）与服务端（Server）。</p><p><strong>两端通信时步骤：</strong></p><ol><li>服务端程序，需要事先启动，等待客户端的连接。</li><li>客户端主动连接服务器端，连接成功才能通信。服务端不可以主动连接客户端。</li></ol><p><strong>在Java中，提供了两个类用于实现TCP通信程序：</strong></p><ol><li>客户端：<code>java.net.Socket</code> 类表示。创建<code>Socket</code>对象，向服务端发出连接请求，服务端响应请求，两者建立连接开始通信。</li><li>服务端：<code>java.net.ServerSocket</code> 类表示。创建<code>ServerSocket</code>对象，相当于开启一个服务，并等待客户端的连接。</li></ol><h2 id="2-2-Socket类"><a href="#2-2-Socket类" class="headerlink" title="2.2 Socket类"></a>2.2 Socket类</h2><p><code>Socket</code> 类：该类实现客户端套接字，套接字指的是两台设备之间通讯的端点。</p><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><ul><li><p><code>public Socket(String host, int port)</code> :创建套接字对象并将其连接到指定主机上的指定端口号。如果指定的host是null ，则相当于指定地址为回送地址。  </p><blockquote><p>小贴士：回送地址(127.x.x.x) 是本机回送地址（Loopback Address），主要用于网络软件测试以及本地机进程间通信，无论什么程序，一旦使用回送地址发送数据，立即返回，不进行任何网络传输。</p></blockquote></li></ul><p>构造举例，代码如下：</p><pre class=" language-java"><code class="language-java">Socket client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Socket</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">6666</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="成员方法"><a href="#成员方法" class="headerlink" title="成员方法"></a>成员方法</h3><ul><li><p><code>public InputStream getInputStream()</code> ： 返回此套接字的输入流。</p><ul><li>如果此Scoket具有相关联的通道，则生成的InputStream 的所有操作也关联该通道。</li><li>关闭生成的InputStream也将关闭相关的Socket。</li></ul></li><li><p><code>public OutputStream getOutputStream()</code> ： 返回此套接字的输出流。</p><ul><li>如果此Scoket具有相关联的通道，则生成的OutputStream 的所有操作也关联该通道。</li><li>关闭生成的OutputStream也将关闭相关的Socket。</li></ul></li><li><p><code>public void close()</code> ：关闭此套接字。</p><ul><li>一旦一个socket被关闭，它不可再使用。</li><li>关闭此socket也将关闭相关的InputStream和OutputStream 。 </li></ul></li><li><p><code>public void shutdownOutput()</code> ： 禁用此套接字的输出流。   </p><ul><li>任何先前写出的数据将被发送，随后终止输出流。 </li></ul><h2 id="2-3-ServerSocket类"><a href="#2-3-ServerSocket类" class="headerlink" title="2.3 ServerSocket类"></a>2.3 ServerSocket类</h2></li></ul><p><code>ServerSocket</code>类：这个类实现了服务器套接字，该对象等待通过网络的请求。</p><h3 id="构造方法-1"><a href="#构造方法-1" class="headerlink" title="构造方法"></a>构造方法</h3><ul><li><code>public ServerSocket(int port)</code> ：使用该构造方法在创建ServerSocket对象时，就可以将其绑定到一个指定的端口号上，参数port就是端口号。</li></ul><p>构造举例，代码如下：</p><pre class=" language-java"><code class="language-java">ServerSocket server <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span><span class="token number">6666</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="成员方法-1"><a href="#成员方法-1" class="headerlink" title="成员方法"></a>成员方法</h3><ul><li><code>public Socket accept()</code> ：侦听并接受连接，返回一个新的Socket对象，用于和客户端实现通信。该方法会一直阻塞直到建立连接。 </li></ul><h2 id="2-4-简单的TCP网络程序"><a href="#2-4-简单的TCP网络程序" class="headerlink" title="2.4 简单的TCP网络程序"></a>2.4 简单的TCP网络程序</h2><h3 id="TCP通信分析图解"><a href="#TCP通信分析图解" class="headerlink" title="TCP通信分析图解"></a>TCP通信分析图解</h3><ol><li>【服务端】启动,创建ServerSocket对象，等待连接。</li><li>【客户端】启动,创建Socket对象，请求连接。</li><li>【服务端】接收连接,调用accept方法，并返回一个Socket对象。</li><li>【客户端】Socket对象，获取OutputStream，向服务端写出数据。</li><li>【服务端】Scoket对象，获取InputStream，读取客户端发送的数据。</li></ol><blockquote><p>到此，客户端向服务端发送数据成功。</p></blockquote><p><img src="img/5_%E7%AE%80%E5%8D%95%E9%80%9A%E4%BF%A1.jpg"></p><blockquote><p>自此，服务端向客户端回写数据。</p></blockquote><ol start="6"><li>【服务端】Socket对象，获取OutputStream，向客户端回写数据。</li><li>【客户端】Scoket对象，获取InputStream，解析回写数据。</li><li>【客户端】释放资源，断开连接。</li></ol><h3 id="客户端向服务器发送数据"><a href="#客户端向服务器发送数据" class="headerlink" title="客户端向服务器发送数据"></a>客户端向服务器发送数据</h3><p><strong>服务端实现：</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServerTCP</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"服务端启动 , 等待连接 .... "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 1.创建 ServerSocket对象，绑定端口，开始等待连接</span>        ServerSocket ss <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span><span class="token number">6666</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2.接收连接 accept 方法, 返回 socket 对象.</span>        Socket server <span class="token operator">=</span> ss<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3.通过socket 获取输入流</span>        InputStream is <span class="token operator">=</span> server<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 4.一次性读取数据</span>          <span class="token comment" spellcheck="true">// 4.1 创建字节数组</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 4.2 据读取到字节数组中.</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> is<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>；        <span class="token comment" spellcheck="true">// 4.3 解析数组,打印字符串信息</span>        String msg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//5.关闭资源.</span>        is<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        server<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>客户端实现：</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClientTCP</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"客户端 发送数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 1.创建 Socket ( ip , port ) , 确定连接到哪里.</span>        Socket client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Socket</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token number">6666</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2.获取流对象 . 输出流</span>        OutputStream os <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3.写出数据.</span>        os<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"你好么? tcp ,我来了"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 4. 关闭资源 .</span>        os<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        client<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="服务器向客户端回写数据"><a href="#服务器向客户端回写数据" class="headerlink" title="服务器向客户端回写数据"></a>服务器向客户端回写数据</h3><p><strong>服务端实现：</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServerTCP</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"服务端启动 , 等待连接 .... "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 1.创建 ServerSocket对象，绑定端口，开始等待连接</span>        ServerSocket ss <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span><span class="token number">6666</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2.接收连接 accept 方法, 返回 socket 对象.</span>        Socket server <span class="token operator">=</span> ss<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3.通过socket 获取输入流</span>        InputStream is <span class="token operator">=</span> server<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 4.一次性读取数据</span>          <span class="token comment" spellcheck="true">// 4.1 创建字节数组</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 4.2 据读取到字节数组中.</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> is<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>；        <span class="token comment" spellcheck="true">// 4.3 解析数组,打印字符串信息</span>        String msg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// =================回写数据=======================</span>          <span class="token comment" spellcheck="true">// 5. 通过 socket 获取输出流</span>           OutputStream out <span class="token operator">=</span> server<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 6. 回写数据</span>           out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"我很好,谢谢你"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 7.关闭资源.</span>          out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        is<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        server<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>客户端实现：</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClientTCP</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"客户端 发送数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 1.创建 Socket ( ip , port ) , 确定连接到哪里.</span>        Socket client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Socket</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token number">6666</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2.通过Scoket,获取输出流对象 </span>        OutputStream os <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3.写出数据.</span>        os<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"你好么? tcp ,我来了"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// ==============解析回写=========================</span>          <span class="token comment" spellcheck="true">// 4. 通过Scoket,获取 输入流对象</span>          InputStream in <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 5. 读取数据数据</span>          <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token keyword">int</span> len <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 6. 关闭资源 .</span>          in<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        os<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        client<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="第三章-综合案例"><a href="#第三章-综合案例" class="headerlink" title="第三章 综合案例"></a>第三章 综合案例</h1><h2 id="3-1-文件上传案例"><a href="#3-1-文件上传案例" class="headerlink" title="3.1 文件上传案例"></a>3.1 文件上传案例</h2><h3 id="文件上传分析图解"><a href="#文件上传分析图解" class="headerlink" title="文件上传分析图解"></a>文件上传分析图解</h3><ol><li>【客户端】输入流，从硬盘读取文件数据到程序中。</li><li>【客户端】输出流，写出文件数据到服务端。</li><li>【服务端】输入流，读取文件数据到服务端程序。</li><li>【服务端】输出流，写出文件数据到服务器硬盘中。</li></ol><p><img src="img/6_upload.jpg">    </p><h4 id="基本实现"><a href="#基本实现" class="headerlink" title="基本实现"></a>基本实现</h4><p><strong>服务端实现：</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileUpload_Server</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"服务器 启动.....  "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 1. 创建服务端ServerSocket</span>          ServerSocket serverSocket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span><span class="token number">6666</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 2. 建立连接 </span>        Socket accept <span class="token operator">=</span> serverSocket<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 3. 创建流对象</span>          <span class="token comment" spellcheck="true">// 3.1 获取输入流,读取文件数据</span>        BufferedInputStream bis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span>accept<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3.2 创建输出流,保存到本地 .</span>        BufferedOutputStream bos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"copy.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 4. 读写数据</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> bis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            bos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//5. 关闭 资源</span>        bos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        accept<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"文件上传已保存"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>客户端实现：</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileUPload_Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1.创建流对象</span>        <span class="token comment" spellcheck="true">// 1.1 创建输入流,读取本地文件  </span>        BufferedInputStream bis  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"test.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 1.2 创建输出流,写到服务端 </span>        Socket socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Socket</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token number">6666</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        BufferedOutputStream   bos   <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedOutputStream</span><span class="token punctuation">(</span>socket<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.写出数据. </span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">8</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token punctuation">;</span>         <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span> len  <span class="token operator">=</span> bis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            bos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>            bos<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"文件发送完毕"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3.释放资源</span>        bos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"文件上传完毕 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="文件上传优化分析"><a href="#文件上传优化分析" class="headerlink" title="文件上传优化分析"></a>文件上传优化分析</h3><ol><li><p><strong>文件名称写死的问题</strong></p><p>服务端，保存文件的名称如果写死，那么最终导致服务器硬盘，只会保留一个文件，建议使用系统时间优化，保证文件名称唯一，代码如下：</p></li></ol><pre class=" language-java"><code class="language-java">FileOutputStream fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">".jpg"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 文件名称</span>BufferedOutputStream bos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedOutputStream</span><span class="token punctuation">(</span>fis<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ol start="2"><li><p><strong>循环接收的问题</strong></p><p>服务端，指保存一个文件就关闭了，之后的用户无法再上传，这是不符合实际的，使用循环改进，可以不断的接收不同用户的文件，代码如下：</p></li></ol><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 每次接收新的连接,创建一个Socket</span><span class="token keyword">while</span>（<span class="token boolean">true</span>）<span class="token punctuation">{</span>    Socket accept <span class="token operator">=</span> serverSocket<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><ol start="3"><li><p><strong>效率问题</strong></p><p>服务端，在接收大文件时，可能耗费几秒钟的时间，此时不能接收其他用户上传，所以，使用多线程技术优化，代码如下：</p></li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">while</span>（<span class="token boolean">true</span>）<span class="token punctuation">{</span>    Socket accept <span class="token operator">=</span> serverSocket<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// accept 交给子线程处理.</span>    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        InputStream bis <span class="token operator">=</span> accept<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="优化实现"><a href="#优化实现" class="headerlink" title="优化实现"></a>优化实现</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileUpload_Server</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"服务器 启动.....  "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 1. 创建服务端ServerSocket</span>        ServerSocket serverSocket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span><span class="token number">6666</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 2. 循环接收,建立连接</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Socket accept <span class="token operator">=</span> serverSocket<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">/*               3. socket对象交给子线程处理,进行读写操作               Runnable接口中,只有一个run方法,使用lambda表达式简化格式            */</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">(</span>                    <span class="token comment" spellcheck="true">//3.1 获取输入流对象</span>                    BufferedInputStream bis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span>accept<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//3.2 创建输出流对象, 保存到本地 .</span>                    FileOutputStream fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">".jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    BufferedOutputStream bos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedOutputStream</span><span class="token punctuation">(</span>fis<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 3.3 读写数据</span>                    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token keyword">int</span> len<span class="token punctuation">;</span>                    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> bis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                      bos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token comment" spellcheck="true">//4. 关闭 资源</span>                    bos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    bis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    accept<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"文件上传已保存"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                      e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="信息回写分析图解"><a href="#信息回写分析图解" class="headerlink" title="信息回写分析图解"></a>信息回写分析图解</h3><p>前四步与基本文件上传一致.</p><ol start="5"><li>【服务端】获取输出流，回写数据。</li><li>【客户端】获取输入流，解析回写数据。</li></ol><p><img src="img/6_upload2.jpg"></p><h4 id="回写实现"><a href="#回写实现" class="headerlink" title="回写实现"></a>回写实现</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileUpload_Server</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"服务器 启动.....  "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 1. 创建服务端ServerSocket</span>        ServerSocket serverSocket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span><span class="token number">6666</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2. 循环接收,建立连接</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Socket accept <span class="token operator">=</span> serverSocket<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">/*              3. socket对象交给子线程处理,进行读写操作               Runnable接口中,只有一个run方法,使用lambda表达式简化格式            */</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">(</span>                    <span class="token comment" spellcheck="true">//3.1 获取输入流对象</span>                    BufferedInputStream bis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span>accept<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//3.2 创建输出流对象, 保存到本地 .</span>                    FileOutputStream fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">".jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    BufferedOutputStream bos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedOutputStream</span><span class="token punctuation">(</span>fis<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 3.3 读写数据</span>                    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token keyword">int</span> len<span class="token punctuation">;</span>                    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> bis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        bos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token comment" spellcheck="true">// 4.=======信息回写===========================</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"back ........"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    OutputStream out <span class="token operator">=</span> accept<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"上传成功"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//================================</span>                    <span class="token comment" spellcheck="true">//5. 关闭 资源</span>                    bos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    bis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    accept<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"文件上传已保存"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>客户端实现：</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileUpload_Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1.创建流对象</span>        <span class="token comment" spellcheck="true">// 1.1 创建输入流,读取本地文件</span>        BufferedInputStream bis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"test.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 1.2 创建输出流,写到服务端</span>        Socket socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Socket</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token number">6666</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        BufferedOutputStream bos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedOutputStream</span><span class="token punctuation">(</span>socket<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.写出数据.</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">8</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span> len  <span class="token operator">=</span> bis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            bos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>          <span class="token comment" spellcheck="true">// 关闭输出流,通知服务端,写出数据完毕</span>        socket<span class="token punctuation">.</span><span class="token function">shutdownOutput</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"文件发送完毕"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3. =====解析回写============</span>        InputStream in <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> back <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>back<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>back<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        in<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// ============================</span>        <span class="token comment" spellcheck="true">// 4.释放资源</span>        socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="3-2-模拟B-S服务器-扩展知识点"><a href="#3-2-模拟B-S服务器-扩展知识点" class="headerlink" title="3.2 模拟B\S服务器(扩展知识点)"></a>3.2 模拟B\S服务器(扩展知识点)</h2><p>模拟网站服务器，使用浏览器访问自己编写的服务端程序，查看网页效果。</p><h3 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析"></a>案例分析</h3><ol><li><p>准备页面数据，web文件夹。</p><p>复制到我们Module中，比如复制到day08中</p><p><img src="img%5C%E5%A4%8D%E5%88%B6.png"></p></li><li><p>我们模拟服务器端，ServerSocket类监听端口，使用浏览器访问</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        ServerSocket server <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span><span class="token number">8000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Socket socket <span class="token operator">=</span> server<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        InputStream in <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        server<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="img%5C%E6%97%A0%E6%B3%95%E8%AE%BF%E9%97%AE.jpg"></p></li><li><p>服务器程序中字节输入流可以读取到浏览器发来的请求信息</p><p><img src="img%5C%E8%AF%BB%E5%8F%96%E8%AE%BF%E9%97%AE%E4%BF%A1%E6%81%AF.jpg"></p></li></ol><p>GET/web/index.html HTTP/1.1是浏览器的请求消息。/web/index.html为浏览器想要请求的服务器端的资源,使用字符串切割方式获取到请求的资源。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//转换流,读取浏览器请求第一行</span>BufferedReader readWb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>socket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String requst <span class="token operator">=</span> readWb<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//取出请求资源的路径</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> strArr <span class="token operator">=</span> requst<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//去掉web前面的/</span>String path <span class="token operator">=</span> strArr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="案例实现"><a href="#案例实现" class="headerlink" title="案例实现"></a>案例实现</h3><p>服务端实现：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SerDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"服务端  启动 , 等待连接 .... "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建ServerSocket 对象</span>        ServerSocket server <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span><span class="token number">8888</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Socket socket <span class="token operator">=</span> server<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 转换流读取浏览器的请求消息</span>        BufferedReader readWb <span class="token operator">=</span> <span class="token keyword">new</span>        <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>socket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String requst <span class="token operator">=</span> readWb<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 取出请求资源的路径</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> strArr <span class="token operator">=</span> requst<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 去掉web前面的/</span>        String path <span class="token operator">=</span> strArr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 读取客户端请求的资源文件</span>        FileInputStream fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 字节输出流,将文件写会客户端</span>        OutputStream out <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 写入HTTP协议响应头,固定写法</span>        out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"HTTP/1.1 200 OK\r\n"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"Content-Type:text/html\r\n"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 必须要写入空行,否则浏览器不解析</span>        out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        readWb<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        server<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="访问效果"><a href="#访问效果" class="headerlink" title="访问效果"></a>访问效果</h3><ul><li><strong>火狐</strong></li></ul><p><img src="img/%E6%95%88%E6%9E%9C%E5%9B%BE1.png"></p><blockquote><p>小贴士：不同的浏览器，内核不一样，解析效果有可能不一样。</p></blockquote><p>发现浏览器中出现很多的叉子,说明浏览器没有读取到图片信息导致。</p><p>浏览器工作原理是遇到图片会开启一个线程进行单独的访问,因此在服务器端加入线程技术。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServerDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        ServerSocket server <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span><span class="token number">8888</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            Socket socket <span class="token operator">=</span> server<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Web</span><span class="token punctuation">(</span>socket<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Web</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>        <span class="token keyword">private</span> Socket socket<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">Web</span><span class="token punctuation">(</span>Socket socket<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>socket<span class="token operator">=</span>socket<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//转换流,读取浏览器请求第一行</span>                BufferedReader readWb <span class="token operator">=</span> <span class="token keyword">new</span>                        <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>socket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                String requst <span class="token operator">=</span> readWb<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//取出请求资源的路径</span>                String<span class="token punctuation">[</span><span class="token punctuation">]</span> strArr <span class="token operator">=</span> requst<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>strArr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                String path <span class="token operator">=</span> strArr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>                FileInputStream fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>fis<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//向浏览器 回写数据</span>                OutputStream out <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"HTTP/1.1 200 OK\r\n"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"Content-Type:text/html\r\n"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                readWb<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception ex<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="form-www-itcast-com"><a href="#form-www-itcast-com" class="headerlink" title="form  www.itcast.com"></a>form  <a href="http://www.itcast.com/">www.itcast.com</a></h3>]]></content>
      
      
      <categories>
          
          <category> 网络编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程池、Lambda学习笔记</title>
      <link href="2020/08/03/xian-cheng-chi-lambda-biao-da-shi/"/>
      <url>2020/08/03/xian-cheng-chi-lambda-biao-da-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="线程池、Lambda表达式"><a href="#线程池、Lambda表达式" class="headerlink" title="线程池、Lambda表达式"></a>线程池、Lambda表达式</h1><h2 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h2><ul><li>  等待与唤醒案例</li><li>  线程池</li><li>  Lambda表达式</li></ul><a id="more"></a><h2 id="教学目标"><a href="#教学目标" class="headerlink" title="教学目标"></a>教学目标</h2><p>-[ ] 能够理解线程通信概念<br>-[ ] 能够理解等待唤醒机制<br>-[ ] 能够描述Java中线程池运行原理<br>-[ ] 能够理解函数式编程相对于面向对象的优点<br>-[ ] 能够掌握Lambda表达式的标准格式<br>-[ ] 能够使用Lambda标准格式使用Runnable与Comparator接口<br>-[ ] 能够掌握Lambda表达式的省略格式与规则<br>-[ ] 能够使用Lambda省略格式使用Runnable与Comparator接口<br>-[ ] 能够通过Lambda的标准格式使用自定义的接口（有且仅有一个抽象方法）<br>-[ ] 能够通过Lambda的省略格式使用自定义的接口（有且仅有一个抽象方法）<br>-[ ] 能够明确Lambda的两项使用前提</p><h1 id="第一章-等待唤醒机制"><a href="#第一章-等待唤醒机制" class="headerlink" title="第一章 等待唤醒机制"></a>第一章 等待唤醒机制</h1><h2 id="1-1-线程间通信"><a href="#1-1-线程间通信" class="headerlink" title="1.1 线程间通信"></a>1.1 线程间通信</h2><p><strong>概念：</strong>多个线程在处理同一个资源，但是处理的动作（线程的任务）却不相同。</p><p>比如：线程A用来生成包子的，线程B用来吃包子的，包子可以理解为同一资源，线程A与线程B处理的动作，一个是生产，一个是消费，那么线程A与线程B之间就存在线程通信问题。</p><p><img src="img%5C%E7%BA%BF%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1.bmp"></p><p><strong>为什么要处理线程间通信：</strong></p><p>多个线程并发执行时, 在默认情况下CPU是随机切换线程的，当我们需要多个线程来共同完成一件任务，并且我们希望他们有规律的执行, 那么多线程之间需要一些协调通信，以此来帮我们达到多线程共同操作一份数据。</p><p><strong>如何保证线程间通信有效利用资源：</strong></p><p>多个线程在处理同一个资源，并且任务不同时，需要线程通信来帮助解决线程之间对同一个变量的使用或操作。 就是多个线程在操作同一份数据时， 避免对同一共享变量的争夺。也就是我们需要通过一定的手段使各个线程能有效的利用资源。而这种手段即—— <strong>等待唤醒机制。</strong></p><h2 id="1-2-等待唤醒机制"><a href="#1-2-等待唤醒机制" class="headerlink" title="1.2 等待唤醒机制"></a>1.2 等待唤醒机制</h2><p><strong>什么是等待唤醒机制</strong></p><p>这是多个线程间的一种<strong>协作</strong>机制。谈到线程我们经常想到的是线程间的<strong>竞争（race）</strong>，比如去争夺锁，但这并不是故事的全部，线程间也会有协作机制。就好比在公司里你和你的同事们，你们可能存在在晋升时的竞争，但更多时候你们更多是一起合作以完成某些任务。</p><p>就是在一个线程进行了规定操作后，就进入等待状态（<strong>wait()**）， 等待其他线程执行完他们的指定代码过后 再将其唤醒（</strong>notify()**）;在有多个线程进行等待时， 如果需要，可以使用 notifyAll()来唤醒所有的等待线程。</p><p>wait/notify 就是线程间的一种协作机制。</p><p><strong>等待唤醒中的方法</strong></p><p>等待唤醒机制就是用于解决线程间通信的问题的，使用到的3个方法的含义如下：</p><ol><li>wait：线程不再活动，不再参与调度，进入 wait set 中，因此不会浪费 CPU 资源，也不会去竞争锁了，这时的线程状态即是 WAITING。它还要等着别的线程执行一个<strong>特别的动作</strong>，也即是“<strong>通知（notify）</strong>”在这个对象上等待的线程从wait set 中释放出来，重新进入到调度队列（ready queue）中</li><li>notify：则选取所通知对象的 wait set 中的一个线程释放；例如，餐馆有空位置后，等候就餐最久的顾客最先入座。</li><li>notifyAll：则释放所通知对象的 wait set 上的全部线程。</li></ol><blockquote><p>注意：</p><p>哪怕只通知了一个等待的线程，被通知线程也不能立即恢复执行，因为它当初中断的地方是在同步块内，而此刻它已经不持有锁，所以她需要再次尝试去获取锁（很可能面临其它线程的竞争），成功后才能在当初调用 wait 方法之后的地方恢复执行。</p><p>总结如下：</p><ul><li>如果能获取锁，线程就从 WAITING 状态变成 RUNNABLE 状态；</li><li>否则，从 wait set 出来，又进入 entry set，线程就从 WAITING 状态又变成 BLOCKED 状态</li></ul></blockquote><p><strong>调用wait和notify方法需要注意的细节</strong></p><ol><li>wait方法与notify方法必须要由同一个锁对象调用。因为：对应的锁对象可以通过notify唤醒使用同一个锁对象调用的wait方法后的线程。</li><li>wait方法与notify方法是属于Object类的方法的。因为：锁对象可以是任意对象，而任意对象的所属类都是继承了Object类的。</li><li>wait方法与notify方法必须要在同步代码块或者是同步函数中使用。因为：必须要通过锁对象调用这2个方法。</li></ol><h2 id="1-3-生产者与消费者问题"><a href="#1-3-生产者与消费者问题" class="headerlink" title="1.3 生产者与消费者问题"></a>1.3 生产者与消费者问题</h2><p>等待唤醒机制其实就是经典的“生产者与消费者”的问题。</p><p>就拿生产包子消费包子来说等待唤醒机制如何有效利用资源：</p><pre class=" language-java"><code class="language-java">包子铺线程生产包子，吃货线程消费包子。当包子没有时（包子状态为<span class="token boolean">false</span>），吃货线程等待，包子铺线程生产包子（即包子状态为<span class="token boolean">true</span>），并通知吃货线程（解除吃货的等待状态）<span class="token punctuation">,</span>因为已经有包子了，那么包子铺线程进入等待状态。接下来，吃货线程能否进一步执行则取决于锁的获取情况。如果吃货获取到锁，那么就执行吃包子动作，包子吃完（包子状态为<span class="token boolean">false</span>），并通知包子铺线程（解除包子铺的等待状态）<span class="token punctuation">,</span>吃货线程进入等待。包子铺线程能否进一步执行则取决于锁的获取情况。</code></pre><p><strong>代码演示：</strong></p><p>包子资源类：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BaoZi</span> <span class="token punctuation">{</span>     String  pier <span class="token punctuation">;</span>     String  xianer <span class="token punctuation">;</span>     <span class="token keyword">boolean</span>  flag <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token punctuation">;</span><span class="token comment" spellcheck="true">//包子资源 是否存在  包子资源状态</span><span class="token punctuation">}</span></code></pre><p>吃货线程类：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ChiHuo</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> BaoZi bz<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">ChiHuo</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span>BaoZi bz<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>bz <span class="token operator">=</span> bz<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>bz<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>bz<span class="token punctuation">.</span>flag <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//没包子</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        bz<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"吃货正在吃"</span><span class="token operator">+</span>bz<span class="token punctuation">.</span>pier<span class="token operator">+</span>bz<span class="token punctuation">.</span>xianer<span class="token operator">+</span><span class="token string">"包子"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                bz<span class="token punctuation">.</span>flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                bz<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>包子铺线程类：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BaoZiPu</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> BaoZi bz<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">BaoZiPu</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span>BaoZi bz<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>bz <span class="token operator">=</span> bz<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//造包子</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//同步</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>bz<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>bz<span class="token punctuation">.</span>flag <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//包子资源  存在</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        bz<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 没有包子  造包子</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"包子铺开始做包子"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>count<span class="token operator">%</span><span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 冰皮  五仁</span>                    bz<span class="token punctuation">.</span>pier <span class="token operator">=</span> <span class="token string">"冰皮"</span><span class="token punctuation">;</span>                    bz<span class="token punctuation">.</span>xianer <span class="token operator">=</span> <span class="token string">"五仁"</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 薄皮  牛肉大葱</span>                    bz<span class="token punctuation">.</span>pier <span class="token operator">=</span> <span class="token string">"薄皮"</span><span class="token punctuation">;</span>                    bz<span class="token punctuation">.</span>xianer <span class="token operator">=</span> <span class="token string">"牛肉大葱"</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                count<span class="token operator">++</span><span class="token punctuation">;</span>                bz<span class="token punctuation">.</span>flag<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"包子造好了："</span><span class="token operator">+</span>bz<span class="token punctuation">.</span>pier<span class="token operator">+</span>bz<span class="token punctuation">.</span>xianer<span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"吃货来吃吧"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//唤醒等待线程 （吃货）</span>                bz<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>测试类：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//等待唤醒案例</span>        BaoZi bz <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BaoZi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ChiHuo ch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChiHuo</span><span class="token punctuation">(</span><span class="token string">"吃货"</span><span class="token punctuation">,</span>bz<span class="token punctuation">)</span><span class="token punctuation">;</span>        BaoZiPu bzp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BaoZiPu</span><span class="token punctuation">(</span><span class="token string">"包子铺"</span><span class="token punctuation">,</span>bz<span class="token punctuation">)</span><span class="token punctuation">;</span>        ch<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bzp<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>执行效果：</p><pre class=" language-java"><code class="language-java">包子铺开始做包子包子造好了：冰皮五仁吃货来吃吧吃货正在吃冰皮五仁包子包子铺开始做包子包子造好了：薄皮牛肉大葱吃货来吃吧吃货正在吃薄皮牛肉大葱包子包子铺开始做包子包子造好了：冰皮五仁吃货来吃吧吃货正在吃冰皮五仁包子</code></pre><h1 id="第二章-线程池"><a href="#第二章-线程池" class="headerlink" title="第二章 线程池"></a>第二章 线程池</h1><h2 id="2-1-线程池思想概述"><a href="#2-1-线程池思想概述" class="headerlink" title="2.1 线程池思想概述"></a>2.1 线程池思想概述</h2><p><img src="img%5C%E6%B8%B8%E6%B3%B3%E6%B1%A0.jpg"></p><p>我们使用线程的时候就去创建一个线程，这样实现起来非常简便，但是就会有一个问题：</p><p>如果并发的线程数量很多，并且每个线程都是执行一个时间很短的任务就结束了，这样频繁创建线程就会大大降低系统的效率，因为频繁创建线程和销毁线程需要时间。</p><p>那么有没有一种办法使得线程可以复用，就是执行完一个任务，并不被销毁，而是可以继续执行其他的任务？</p><p>在Java中可以通过线程池来达到这样的效果。今天我们就来详细讲解一下Java的线程池。</p><h2 id="2-2-线程池概念"><a href="#2-2-线程池概念" class="headerlink" title="2.2 线程池概念"></a>2.2 线程池概念</h2><ul><li><strong>线程池：</strong>其实就是一个容纳多个线程的容器，其中的线程可以反复使用，省去了频繁创建线程对象的操作，无需反复创建线程而消耗过多资源。</li></ul><p>由于线程池中有很多操作都是与优化资源相关的，我们在这里就不多赘述。我们通过一张图来了解线程池的工作原理：</p><p><img src="img%5C%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%8E%9F%E7%90%86.bmp"></p><p>合理利用线程池能够带来三个好处：</p><ol><li>降低资源消耗。减少了创建和销毁线程的次数，每个工作线程都可以被重复利用，可执行多个任务。</li><li>提高响应速度。当任务到达时，任务可以不需要的等到线程创建就能立即执行。</li><li>提高线程的可管理性。可以根据系统的承受能力，调整线程池中工作线线程的数目，防止因为消耗过多的内存，而把服务器累趴下(每个线程需要大约1MB内存，线程开的越多，消耗的内存也就越大，最后死机)。</li></ol><h2 id="2-3-线程池的使用"><a href="#2-3-线程池的使用" class="headerlink" title="2.3 线程池的使用"></a>2.3 线程池的使用</h2><p>Java里面线程池的顶级接口是<code>java.util.concurrent.Executor</code>，但是严格意义上讲<code>Executor</code>并不是一个线程池，而只是一个执行线程的工具。真正的线程池接口是<code>java.util.concurrent.ExecutorService</code>。</p><p>要配置一个线程池是比较复杂的，尤其是对于线程池的原理不是很清楚的情况下，很有可能配置的线程池不是较优的，因此在<code>java.util.concurrent.Executors</code>线程工厂类里面提供了一些静态工厂，生成一些常用的线程池。官方建议使用Executors工程类来创建线程池对象。</p><p>Executors类中有个创建线程池的方法如下：</p><ul><li><code>public static ExecutorService newFixedThreadPool(int nThreads)</code>：返回线程池对象。(创建的是有界线程池,也就是池中的线程个数可以指定最大数量)</li></ul><p>获取到了一个线程池ExecutorService 对象，那么怎么使用呢，在这里定义了一个使用线程池对象的方法如下：</p><ul><li><p><code>public Future&lt;?&gt; submit(Runnable task)</code>:获取线程池中的某一个线程对象，并执行</p><blockquote><p>Future接口：用来记录线程任务执行完毕后产生的结果。线程池创建与使用。</p></blockquote></li></ul><p>使用线程池中线程对象的步骤：</p><ol><li>创建线程池对象。</li><li>创建Runnable接口子类对象。(task)</li><li>提交Runnable接口子类对象。(take task)</li><li>关闭线程池(一般不做)。</li></ol><p>Runnable实现类代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyRunnable</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我要一个教练"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"教练来了： "</span> <span class="token operator">+</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"教我游泳,交完后，教练回到了游泳池"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>线程池测试类：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadPoolDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建线程池对象</span>        ExecutorService service <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//包含2个线程对象</span>        <span class="token comment" spellcheck="true">// 创建Runnable实例对象</span>        MyRunnable r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyRunnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//自己创建线程对象的方式</span>        <span class="token comment" spellcheck="true">// Thread t = new Thread(r);</span>        <span class="token comment" spellcheck="true">// t.start(); ---> 调用MyRunnable中的run()</span>        <span class="token comment" spellcheck="true">// 从线程池中获取线程对象,然后调用MyRunnable中的run()</span>        service<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 再获取个线程对象，调用MyRunnable中的run()</span>        service<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>        service<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 注意：submit方法调用结束后，程序并不终止，是因为线程池控制了线程的关闭。</span>        <span class="token comment" spellcheck="true">// 将使用完的线程又归还到了线程池中</span>        <span class="token comment" spellcheck="true">// 关闭线程池</span>        <span class="token comment" spellcheck="true">//service.shutdown();</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="第三章-Lambda表达式"><a href="#第三章-Lambda表达式" class="headerlink" title="第三章 Lambda表达式"></a>第三章 Lambda表达式</h1><h2 id="3-1-函数式编程思想概述"><a href="#3-1-函数式编程思想概述" class="headerlink" title="3.1 函数式编程思想概述"></a>3.1 函数式编程思想概述</h2><p><img src="img/03-Overview.png"></p><p>在数学中，<strong>函数</strong>就是有输入量、输出量的一套计算方案，也就是“拿什么东西做什么事情”。相对而言，面向对象过分强调“必须通过对象的形式来做事情”，而函数式思想则尽量忽略面向对象的复杂语法——<strong>强调做什么，而不是以什么形式做</strong>。</p><p>面向对象的思想:</p><p>​    做一件事情,找一个能解决这个事情的对象,调用对象的方法,完成事情.</p><p>函数式编程思想:</p><p>​    只要能获取到结果,谁去做的,怎么做的都不重要,重视的是结果,不重视过程</p><h2 id="3-2-冗余的Runnable代码"><a href="#3-2-冗余的Runnable代码" class="headerlink" title="3.2 冗余的Runnable代码"></a>3.2 冗余的Runnable代码</h2><h3 id="传统写法"><a href="#传统写法" class="headerlink" title="传统写法"></a>传统写法</h3><p>当需要启动一个线程去完成任务时，通常会通过<code>java.lang.Runnable</code>接口来定义任务内容，并使用<code>java.lang.Thread</code>类来启动该线程。代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01Runnable</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 匿名内部类</span>        Runnable task <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 覆盖重写抽象方法</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"多线程任务执行！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 启动线程</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>本着“一切皆对象”的思想，这种做法是无可厚非的：首先创建一个<code>Runnable</code>接口的匿名内部类对象来指定任务内容，再将其交给一个线程来启动。</p><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p>对于<code>Runnable</code>的匿名内部类用法，可以分析出几点内容：</p><ul><li><code>Thread</code>类需要<code>Runnable</code>接口作为参数，其中的抽象<code>run</code>方法是用来指定线程任务内容的核心；</li><li>为了指定<code>run</code>的方法体，<strong>不得不</strong>需要<code>Runnable</code>接口的实现类；</li><li>为了省去定义一个<code>RunnableImpl</code>实现类的麻烦，<strong>不得不</strong>使用匿名内部类；</li><li>必须覆盖重写抽象<code>run</code>方法，所以方法名称、方法参数、方法返回值<strong>不得不</strong>再写一遍，且不能写错；</li><li>而实际上，<strong>似乎只有方法体才是关键所在</strong>。</li></ul><h2 id="3-3-编程思想转换"><a href="#3-3-编程思想转换" class="headerlink" title="3.3 编程思想转换"></a>3.3 编程思想转换</h2><h3 id="做什么，而不是怎么做"><a href="#做什么，而不是怎么做" class="headerlink" title="做什么，而不是怎么做"></a>做什么，而不是怎么做</h3><p>我们真的希望创建一个匿名内部类对象吗？不。我们只是为了做这件事情而<strong>不得不</strong>创建一个对象。我们真正希望做的事情是：将<code>run</code>方法体内的代码传递给<code>Thread</code>类知晓。</p><p><strong>传递一段代码</strong>——这才是我们真正的目的。而创建对象只是受限于面向对象语法而不得不采取的一种手段方式。那，有没有更加简单的办法？如果我们将关注点从“怎么做”回归到“做什么”的本质上，就会发现只要能够更好地达到目的，过程与形式其实并不重要。</p><h3 id="生活举例"><a href="#生活举例" class="headerlink" title="生活举例"></a>生活举例</h3><p><img src="img/01-%E4%BA%A4%E9%80%9A%E6%96%B9%E5%BC%8F.png"></p><p>当我们需要从北京到上海时，可以选择高铁、汽车、骑行或是徒步。我们的真正目的是到达上海，而如何才能到达上海的形式并不重要，所以我们一直在探索有没有比高铁更好的方式——搭乘飞机。</p><p><img src="img/02-Lambda.png"></p><p>而现在这种飞机（甚至是飞船）已经诞生：2014年3月Oracle所发布的Java 8（JDK 1.8）中，加入了<strong>Lambda表达式</strong>的重量级新特性，为我们打开了新世界的大门。</p><h2 id="3-4-体验Lambda的更优写法"><a href="#3-4-体验Lambda的更优写法" class="headerlink" title="3.4 体验Lambda的更优写法"></a>3.4 体验Lambda的更优写法</h2><p>借助Java 8的全新语法，上述<code>Runnable</code>接口的匿名内部类写法可以通过更简单的Lambda表达式达到等效：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo02LambdaRunnable</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"多线程任务执行！"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 启动线程</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这段代码和刚才的执行效果是完全一样的，可以在1.8或更高的编译级别下通过。从代码的语义中可以看出：我们启动了一个线程，而线程任务的内容以一种更加简洁的形式被指定。</p><p>不再有“不得不创建接口对象”的束缚，不再有“抽象方法覆盖重写”的负担，就是这么简单！</p><h2 id="3-5-回顾匿名内部类"><a href="#3-5-回顾匿名内部类" class="headerlink" title="3.5 回顾匿名内部类"></a>3.5 回顾匿名内部类</h2><p>Lambda是怎样击败面向对象的？在上例中，核心代码其实只是如下所示的内容：</p><pre class=" language-java"><code class="language-java"><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"多线程任务执行！"</span><span class="token punctuation">)</span></code></pre><p>为了理解Lambda的语义，我们需要从传统的代码起步。</p><h3 id="使用实现类"><a href="#使用实现类" class="headerlink" title="使用实现类"></a>使用实现类</h3><p>要启动一个线程，需要创建一个<code>Thread</code>类的对象并调用<code>start</code>方法。而为了指定线程执行的内容，需要调用<code>Thread</code>类的构造方法：</p><ul><li><code>public Thread(Runnable target)</code></li></ul><p>为了获取<code>Runnable</code>接口的实现对象，可以为该接口定义一个实现类<code>RunnableImpl</code>：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RunnableImpl</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"多线程任务执行！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>然后创建该实现类的对象作为<code>Thread</code>类的构造参数：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo03ThreadInitParam</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Runnable task <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RunnableImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="使用匿名内部类"><a href="#使用匿名内部类" class="headerlink" title="使用匿名内部类"></a>使用匿名内部类</h3><p>这个<code>RunnableImpl</code>类只是为了实现<code>Runnable</code>接口而存在的，而且仅被使用了唯一一次，所以使用匿名内部类的语法即可省去该类的单独定义，即匿名内部类：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo04ThreadNameless</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"多线程任务执行！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="匿名内部类的好处与弊端"><a href="#匿名内部类的好处与弊端" class="headerlink" title="匿名内部类的好处与弊端"></a>匿名内部类的好处与弊端</h3><p>一方面，匿名内部类可以帮我们<strong>省去实现类的定义</strong>；另一方面，匿名内部类的语法——<strong>确实太复杂了！</strong></p><h3 id="语义分析"><a href="#语义分析" class="headerlink" title="语义分析"></a>语义分析</h3><p>仔细分析该代码中的语义，<code>Runnable</code>接口只有一个<code>run</code>方法的定义：</p><ul><li><code>public abstract void run();</code></li></ul><p>即制定了一种做事情的方案（其实就是一个函数）：</p><ul><li><strong>无参数</strong>：不需要任何条件即可执行该方案。</li><li><strong>无返回值</strong>：该方案不产生任何结果。</li><li><strong>代码块</strong>（方法体）：该方案的具体执行步骤。</li></ul><p>同样的语义体现在<code>Lambda</code>语法中，要更加简单：</p><pre class=" language-java"><code class="language-java"><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"多线程任务执行！"</span><span class="token punctuation">)</span></code></pre><ul><li>前面的一对小括号即<code>run</code>方法的参数（无），代表不需要任何条件；</li><li>中间的一个箭头代表将前面的参数传递给后面的代码；</li><li>后面的输出语句即业务逻辑代码。</li></ul><h2 id="3-6-Lambda标准格式"><a href="#3-6-Lambda标准格式" class="headerlink" title="3.6 Lambda标准格式"></a>3.6 Lambda标准格式</h2><p>Lambda省去面向对象的条条框框，格式由<strong>3个部分</strong>组成：</p><ul><li>一些参数</li><li>一个箭头</li><li>一段代码</li></ul><p>Lambda表达式的<strong>标准格式</strong>为：</p><pre><code>(参数类型 参数名称) -&gt; { 代码语句 }</code></pre><p>格式说明：</p><ul><li>小括号内的语法与传统方法参数列表一致：无参数则留空；多个参数则用逗号分隔。</li><li><code>-&gt;</code>是新引入的语法格式，代表指向动作。</li><li>大括号内的语法与传统方法体要求基本一致。</li></ul><h2 id="3-7-练习：使用Lambda标准格式（无参无返回）"><a href="#3-7-练习：使用Lambda标准格式（无参无返回）" class="headerlink" title="3.7 练习：使用Lambda标准格式（无参无返回）"></a>3.7 练习：使用Lambda标准格式（无参无返回）</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>给定一个厨子<code>Cook</code>接口，内含唯一的抽象方法<code>makeFood</code>，且无参数、无返回值。如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Cook</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">makeFood</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在下面的代码中，请使用Lambda的<strong>标准格式</strong>调用<code>invokeCook</code>方法，打印输出“吃饭啦！”字样：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo05InvokeCook</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO 请在此使用Lambda【标准格式】调用invokeCook方法</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">invokeCook</span><span class="token punctuation">(</span>Cook cook<span class="token punctuation">)</span> <span class="token punctuation">{</span>        cook<span class="token punctuation">.</span><span class="token function">makeFood</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">invokeCook</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"吃饭啦！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><blockquote><p>备注：小括号代表<code>Cook</code>接口<code>makeFood</code>抽象方法的参数为空，大括号代表<code>makeFood</code>的方法体。</p></blockquote><h2 id="3-8-Lambda的参数和返回值"><a href="#3-8-Lambda的参数和返回值" class="headerlink" title="3.8 Lambda的参数和返回值"></a>3.8 Lambda的参数和返回值</h2><pre><code>需求:    使用数组存储多个Person对象    对数组中的Person对象使用Arrays的sort方法通过年龄进行升序排序</code></pre><p>下面举例演示<code>java.util.Comparator&lt;T&gt;</code>接口的使用场景代码，其中的抽象方法定义为：</p><ul><li><code>public abstract int compare(T o1, T o2);</code></li></ul><p>当需要对一个对象数组进行排序时，<code>Arrays.sort</code>方法需要一个<code>Comparator</code>接口实例来指定排序的规则。假设有一个<code>Person</code>类，含有<code>String name</code>和<code>int age</code>两个成员变量：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>     <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 省略构造器、toString方法与Getter Setter </span><span class="token punctuation">}</span></code></pre><h3 id="传统写法-1"><a href="#传统写法-1" class="headerlink" title="传统写法"></a>传统写法</h3><p>如果使用传统的代码对<code>Person[]</code>数组进行排序，写法如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Comparator<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo06Comparator</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 本来年龄乱序的对象数组</span>        Person<span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"古力娜扎"</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"迪丽热巴"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">,</span>               <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"马尔扎哈"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 匿名内部类</span>        Comparator<span class="token operator">&lt;</span>Person<span class="token operator">></span> comp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token operator">&lt;</span>Person<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span>Person o1<span class="token punctuation">,</span> Person o2<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> o1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> o2<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> comp<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 第二个参数为排序规则，即Comparator接口实例</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Person person <span class="token operator">:</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这种做法在面向对象的思想中，似乎也是“理所当然”的。其中<code>Comparator</code>接口的实例（使用了匿名内部类）代表了“按照年龄从小到大”的排序规则。</p><h3 id="代码分析-1"><a href="#代码分析-1" class="headerlink" title="代码分析"></a>代码分析</h3><p>下面我们来搞清楚上述代码真正要做什么事情。</p><ul><li>为了排序，<code>Arrays.sort</code>方法需要排序规则，即<code>Comparator</code>接口的实例，抽象方法<code>compare</code>是关键；</li><li>为了指定<code>compare</code>的方法体，<strong>不得不</strong>需要<code>Comparator</code>接口的实现类；</li><li>为了省去定义一个<code>ComparatorImpl</code>实现类的麻烦，<strong>不得不</strong>使用匿名内部类；</li><li>必须覆盖重写抽象<code>compare</code>方法，所以方法名称、方法参数、方法返回值<strong>不得不</strong>再写一遍，且不能写错；</li><li>实际上，<strong>只有参数和方法体才是关键</strong>。</li></ul><h3 id="Lambda写法"><a href="#Lambda写法" class="headerlink" title="Lambda写法"></a>Lambda写法</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo07ComparatorLambda</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Person<span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token punctuation">{</span>              <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"古力娜扎"</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">,</span>              <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"迪丽热巴"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">,</span>              <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"马尔扎哈"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>        Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token punctuation">(</span>Person a<span class="token punctuation">,</span> Person b<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>              <span class="token keyword">return</span> a<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> b<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Person person <span class="token operator">:</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="3-9-练习：使用Lambda标准格式（有参有返回）"><a href="#3-9-练习：使用Lambda标准格式（有参有返回）" class="headerlink" title="3.9 练习：使用Lambda标准格式（有参有返回）"></a>3.9 练习：使用Lambda标准格式（有参有返回）</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>给定一个计算器<code>Calculator</code>接口，内含抽象方法<code>calc</code>可以将两个int数字相加得到和值：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Calculator</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在下面的代码中，请使用Lambda的<strong>标准格式</strong>调用<code>invokeCalc</code>方法，完成120和130的相加计算：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo08InvokeCalc</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO 请在此使用Lambda【标准格式】调用invokeCalc方法来计算120+130的结果ß</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">invokeCalc</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> Calculator calculator<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> calculator<span class="token punctuation">.</span><span class="token function">calc</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"结果是："</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="解答-1"><a href="#解答-1" class="headerlink" title="解答"></a>解答</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">invokeCalc</span><span class="token punctuation">(</span><span class="token number">120</span><span class="token punctuation">,</span> <span class="token number">130</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><blockquote><p>备注：小括号代表<code>Calculator</code>接口<code>calc</code>抽象方法的参数，大括号代表<code>calc</code>的方法体。</p></blockquote><h2 id="3-10-Lambda省略格式"><a href="#3-10-Lambda省略格式" class="headerlink" title="3.10 Lambda省略格式"></a>3.10 Lambda省略格式</h2><h3 id="可推导即可省略"><a href="#可推导即可省略" class="headerlink" title="可推导即可省略"></a>可推导即可省略</h3><p>Lambda强调的是“做什么”而不是“怎么做”，所以凡是可以根据上下文推导得知的信息，都可以省略。例如上例还可以使用Lambda的省略写法：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">invokeCalc</span><span class="token punctuation">(</span><span class="token number">120</span><span class="token punctuation">,</span> <span class="token number">130</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="省略规则"><a href="#省略规则" class="headerlink" title="省略规则"></a>省略规则</h3><p>在Lambda标准格式的基础上，使用省略写法的规则为：</p><ol><li>小括号内参数的类型可以省略；</li><li>如果小括号内<strong>有且仅有一个参</strong>，则小括号可以省略；</li><li>如果大括号内<strong>有且仅有一个语句</strong>，则无论是否有返回值，都可以省略大括号、return关键字及语句分号。</li></ol><blockquote><p>备注：掌握这些省略规则后，请对应地回顾本章开头的多线程案例。</p></blockquote><h2 id="3-11-练习：使用Lambda省略格式"><a href="#3-11-练习：使用Lambda省略格式" class="headerlink" title="3.11 练习：使用Lambda省略格式"></a>3.11 练习：使用Lambda省略格式</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p>仍然使用前文含有唯一<code>makeFood</code>抽象方法的厨子<code>Cook</code>接口，在下面的代码中，请使用Lambda的<strong>省略格式</strong>调用<code>invokeCook</code>方法，打印输出“吃饭啦！”字样：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo09InvokeCook</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO 请在此使用Lambda【省略格式】调用invokeCook方法</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">invokeCook</span><span class="token punctuation">(</span>Cook cook<span class="token punctuation">)</span> <span class="token punctuation">{</span>        cook<span class="token punctuation">.</span><span class="token function">makeFood</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="解答-2"><a href="#解答-2" class="headerlink" title="解答"></a>解答</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">invokeCook</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"吃饭啦！"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="3-12-Lambda的使用前提"><a href="#3-12-Lambda的使用前提" class="headerlink" title="3.12 Lambda的使用前提"></a>3.12 Lambda的使用前提</h2><p>Lambda的语法非常简洁，完全没有面向对象复杂的束缚。但是使用时有几个问题需要特别注意：</p><ol><li>使用Lambda必须具有接口，且要求<strong>接口中有且仅有一个抽象方法</strong>。<br>无论是JDK内置的<code>Runnable</code>、<code>Comparator</code>接口还是自定义的接口，只有当接口中的抽象方法存在且唯一时，才可以使用Lambda。</li><li>使用Lambda必须具有<strong>上下文推断</strong>。<br>也就是方法的参数或局部变量类型必须为Lambda对应的接口类型，才能使用Lambda作为该接口的实例。</li></ol><blockquote><p>备注：有且仅有一个抽象方法的接口，称为“<strong>函数式接口</strong>”。</p></blockquote><h3 id="form-www-itcast-com"><a href="#form-www-itcast-com" class="headerlink" title="form  www.itcast.com"></a>form  <a href="http://www.itcast.com/">www.itcast.com</a></h3>]]></content>
      
      
      <categories>
          
          <category> 线程池、Lambda </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>File类、递归学习笔记</title>
      <link href="2020/08/03/file-lei-di-gui/"/>
      <url>2020/08/03/file-lei-di-gui/</url>
      
        <content type="html"><![CDATA[<h1 id="File类、递归"><a href="#File类、递归" class="headerlink" title="File类、递归"></a>File类、递归</h1><h2 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h2><ul><li> File类</li><li> 递归</li></ul><a id="more"></a><h2 id="教学目标"><a href="#教学目标" class="headerlink" title="教学目标"></a>教学目标</h2><ul><li><input disabled="" type="checkbox"> 能够说出File对象的创建方式</li><li><input disabled="" type="checkbox"> 能够说出File类获取名称的方法名称</li><li><input disabled="" type="checkbox"> 能够说出File类获取绝对路径的方法名称</li><li><input disabled="" type="checkbox"> 能够说出File类获取文件大小的方法名称</li><li><input disabled="" type="checkbox"> 能够说出File类判断是否是文件的方法名称</li><li><input disabled="" type="checkbox"> 能够说出File类判断是否是文件夹的方法名称</li><li><input disabled="" type="checkbox"> 能够辨别相对路径和绝对路径</li><li><input disabled="" type="checkbox"> 能够遍历文件夹</li><li><input disabled="" type="checkbox"> 能够解释递归的含义</li><li><input disabled="" type="checkbox"> 能够使用递归的方式计算5的阶乘</li><li><input disabled="" type="checkbox"> 能够说出使用递归会内存溢出隐患的原因</li></ul><h1 id="第一章-File类"><a href="#第一章-File类" class="headerlink" title="第一章 File类"></a>第一章 File类</h1><h2 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1 概述"></a>1.1 概述</h2><p><code>java.io.File</code> 类是文件和目录路径名的抽象表示，主要用于文件和目录的创建、查找和删除等操作。</p><h2 id="1-2-构造方法"><a href="#1-2-构造方法" class="headerlink" title="1.2 构造方法"></a>1.2 构造方法</h2><ul><li><code>public File(String pathname) </code> ：通过将给定的<strong>路径名字符串</strong>转换为抽象路径名来创建新的 File实例。  </li><li><code>public File(String parent, String child) </code> ：从<strong>父路径名字符串和子路径名字符串</strong>创建新的 File实例。</li><li><code>public File(File parent, String child)</code> ：从<strong>父抽象路径名和子路径名字符串</strong>创建新的 File实例。  </li></ul><ul><li>构造举例，代码如下：</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 文件路径名</span>String pathname <span class="token operator">=</span> <span class="token string">"D:\\aaa.txt"</span><span class="token punctuation">;</span>File file1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>pathname<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 文件路径名</span>String pathname2 <span class="token operator">=</span> <span class="token string">"D:\\aaa\\bbb.txt"</span><span class="token punctuation">;</span>File file2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>pathname2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 通过父路径和子路径字符串</span> String parent <span class="token operator">=</span> <span class="token string">"d:\\aaa"</span><span class="token punctuation">;</span> String child <span class="token operator">=</span> <span class="token string">"bbb.txt"</span><span class="token punctuation">;</span> File file3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> child<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 通过父级File对象和子路径字符串</span>File parentDir <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"d:\\aaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String child <span class="token operator">=</span> <span class="token string">"bbb.txt"</span><span class="token punctuation">;</span>File file4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>parentDir<span class="token punctuation">,</span> child<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>小贴士：</p><ol><li>一个File对象代表硬盘中实际存在的一个文件或者目录。</li><li>无论该路径下是否存在文件或者目录，都不影响File对象的创建。</li></ol></blockquote><h2 id="1-3-常用方法"><a href="#1-3-常用方法" class="headerlink" title="1.3 常用方法"></a>1.3 常用方法</h2><h3 id="获取功能的方法"><a href="#获取功能的方法" class="headerlink" title="获取功能的方法"></a>获取功能的方法</h3><ul><li><p><code>public String getAbsolutePath() </code> ：返回此File的绝对路径名字符串。</p></li><li><p><code>public String getPath()</code> ：将此File转换为路径名字符串。 </p></li><li><p><code>public String getName()</code>  ：返回由此File表示的文件或目录的名称。  </p></li><li><p><code>public long length()</code>  ：返回由此File表示的文件的长度。 </p><p>方法演示，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileGet</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        File f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"d:/aaa/bbb.java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"文件绝对路径:"</span><span class="token operator">+</span>f<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"文件构造路径:"</span><span class="token operator">+</span>f<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"文件名称:"</span><span class="token operator">+</span>f<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"文件长度:"</span><span class="token operator">+</span>f<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"字节"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        File f2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"d:/aaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"目录绝对路径:"</span><span class="token operator">+</span>f2<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"目录构造路径:"</span><span class="token operator">+</span>f2<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"目录名称:"</span><span class="token operator">+</span>f2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"目录长度:"</span><span class="token operator">+</span>f2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>输出结果：文件绝对路径<span class="token operator">:</span>d<span class="token operator">:</span>\aaa\bbb<span class="token punctuation">.</span>java文件构造路径<span class="token operator">:</span>d<span class="token operator">:</span>\aaa\bbb<span class="token punctuation">.</span>java文件名称<span class="token operator">:</span>bbb<span class="token punctuation">.</span>java文件长度<span class="token operator">:</span><span class="token number">636</span>字节目录绝对路径<span class="token operator">:</span>d<span class="token operator">:</span>\aaa目录构造路径<span class="token operator">:</span>d<span class="token operator">:</span>\aaa目录名称<span class="token operator">:</span>aaa目录长度<span class="token operator">:</span><span class="token number">4096</span></code></pre></li></ul><blockquote><p>API中说明：length()，表示文件的长度。但是File对象表示目录，则返回值未指定。</p></blockquote><h3 id="绝对路径和相对路径"><a href="#绝对路径和相对路径" class="headerlink" title="绝对路径和相对路径"></a>绝对路径和相对路径</h3><ul><li><strong>绝对路径</strong>：从盘符开始的路径，这是一个完整的路径。</li><li><strong>相对路径</strong>：相对于项目目录的路径，这是一个便捷的路径，开发中经常使用。</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FilePath</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// D盘下的bbb.java文件</span>        File f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D:\\bbb.java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">// 项目下的bbb.java文件</span>        File f2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"bbb.java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f2<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>输出结果：D<span class="token operator">:</span>\bbb<span class="token punctuation">.</span>javaD<span class="token operator">:</span>\idea_project_test4\bbb<span class="token punctuation">.</span>java</code></pre><h3 id="判断功能的方法"><a href="#判断功能的方法" class="headerlink" title="判断功能的方法"></a>判断功能的方法</h3><ul><li><code>public boolean exists()</code> ：此File表示的文件或目录是否实际存在。</li><li><code>public boolean isDirectory()</code> ：此File表示的是否为目录。</li><li><code>public boolean isFile()</code> ：此File表示的是否为文件。</li></ul><p>方法演示，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileIs</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        File f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"d:\\aaa\\bbb.java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        File f2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"d:\\aaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 判断是否存在</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"d:\\aaa\\bbb.java 是否存在:"</span><span class="token operator">+</span>f<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"d:\\aaa 是否存在:"</span><span class="token operator">+</span>f2<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 判断是文件还是目录</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"d:\\aaa 文件?:"</span><span class="token operator">+</span>f2<span class="token punctuation">.</span><span class="token function">isFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"d:\\aaa 目录?:"</span><span class="token operator">+</span>f2<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>输出结果：d<span class="token operator">:</span>\aaa\bbb<span class="token punctuation">.</span>java 是否存在<span class="token operator">:</span><span class="token boolean">true</span>d<span class="token operator">:</span>\aaa 是否存在<span class="token operator">:</span><span class="token boolean">true</span>d<span class="token operator">:</span>\aaa 文件<span class="token operator">?</span><span class="token operator">:</span><span class="token boolean">false</span>d<span class="token operator">:</span>\aaa 目录<span class="token operator">?</span><span class="token operator">:</span><span class="token boolean">true</span></code></pre><h3 id="创建删除功能的方法"><a href="#创建删除功能的方法" class="headerlink" title="创建删除功能的方法"></a>创建删除功能的方法</h3><ul><li><code>public boolean createNewFile()</code> ：当且仅当具有该名称的文件尚不存在时，创建一个新的空文件。 </li><li><code>public boolean delete()</code> ：删除由此File表示的文件或目录。  </li><li><code>public boolean mkdir()</code> ：创建由此File表示的目录。</li><li><code>public boolean mkdirs()</code> ：创建由此File表示的目录，包括任何必需但不存在的父目录。</li></ul><p>方法演示，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileCreateDelete</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 文件的创建</span>        File f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"aaa.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"是否存在:"</span><span class="token operator">+</span>f<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"是否创建:"</span><span class="token operator">+</span>f<span class="token punctuation">.</span><span class="token function">createNewFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"是否存在:"</span><span class="token operator">+</span>f<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>                 <span class="token comment" spellcheck="true">// 目录的创建</span>          File f2<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"newDir"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"是否存在:"</span><span class="token operator">+</span>f2<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// false</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"是否创建:"</span><span class="token operator">+</span>f2<span class="token punctuation">.</span><span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// true</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"是否存在:"</span><span class="token operator">+</span>f2<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// true</span>        <span class="token comment" spellcheck="true">// 创建多级目录</span>          File f3<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"newDira\\newDirb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f3<span class="token punctuation">.</span><span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// false</span>        File f4<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"newDira\\newDirb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f4<span class="token punctuation">.</span><span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// true</span>                <span class="token comment" spellcheck="true">// 文件的删除</span>           System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// true</span>                <span class="token comment" spellcheck="true">// 目录的删除</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f2<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// true</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f4<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// false</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>API中说明：delete方法，如果此File表示目录，则目录必须为空才能删除。</p></blockquote><h2 id="1-4-目录的遍历"><a href="#1-4-目录的遍历" class="headerlink" title="1.4 目录的遍历"></a>1.4 目录的遍历</h2><ul><li><code>public String[] list()</code> ：返回一个String数组，表示该File目录中的所有子文件或目录。</li></ul><ul><li><code>public File[] listFiles()</code> ：返回一个File数组，表示该File目录中的所有的子文件或目录。  </li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileFor</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        File dir <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"d:\\java_code"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//获取当前目录下的文件以及文件夹的名称。</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> names <span class="token operator">=</span> dir<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>String name <span class="token operator">:</span> names<span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//获取当前目录下的文件以及文件夹对象，只要拿到了文件对象，那么就可以获取更多信息</span>        File<span class="token punctuation">[</span><span class="token punctuation">]</span> files <span class="token operator">=</span> dir<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>File file <span class="token operator">:</span> files<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>小贴士：</p><p>调用listFiles方法的File对象，表示的必须是实际存在的目录，否则返回null，无法进行遍历。</p></blockquote><h1 id="第二章-递归"><a href="#第二章-递归" class="headerlink" title="第二章 递归"></a>第二章 递归</h1><h2 id="2-1-概述"><a href="#2-1-概述" class="headerlink" title="2.1 概述"></a>2.1 概述</h2><ul><li><p><strong>递归</strong>：指在当前方法内调用自己的这种现象。</p></li><li><p><strong>递归的分类:</strong></p><ul><li>递归分为两种，直接递归和间接递归。</li><li>直接递归称为方法自身调用自己。</li><li>间接递归可以A方法调用B方法，B方法调用C方法，C方法调用A方法。</li></ul></li><li><p><strong>注意事项</strong>：</p><ul><li>递归一定要有条件限定，保证递归能够停止下来，否则会发生栈内存溢出。</li><li>在递归中虽然有限定条件，但是递归次数不能太多。否则也会发生栈内存溢出。</li><li>构造方法,禁止递归</li></ul></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01DiGui</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// a();</span>        <span class="token function">b</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/*     * 3.构造方法,禁止递归     * 编译报错:构造方法是创建对象使用的,不能让对象一直创建下去     */</span>    <span class="token keyword">public</span> <span class="token function">Demo01DiGui</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//Demo01DiGui();</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*     * 2.在递归中虽然有限定条件，但是递归次数不能太多。否则也会发生栈内存溢出。     * 4993     *     Exception in thread "main" java.lang.StackOverflowError     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//添加一个递归结束的条件,i==5000的时候结束</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//结束方法</span>        <span class="token punctuation">}</span>        <span class="token function">b</span><span class="token punctuation">(</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*     * 1.递归一定要有条件限定，保证递归能够停止下来，否则会发生栈内存溢出。 Exception in thread "main"     * java.lang.StackOverflowError     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="2-2-递归累加求和"><a href="#2-2-递归累加求和" class="headerlink" title="2.2 递归累加求和"></a>2.2 递归累加求和</h2><h3 id="计算1-n的和"><a href="#计算1-n的和" class="headerlink" title="计算1 ~ n的和"></a>计算1 ~ n的和</h3><p><strong>分析</strong>：num的累和 = num + (num-1)的累和，所以可以把累和的操作定义成一个方法，递归调用。</p><p><strong>实现代码</strong>：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DiGuiDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//计算1~num的和，使用递归完成</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 调用求和的方法</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token function">getSum</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 输出结果</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">/*        通过递归算法实现.        参数列表:int         返回值类型: int       */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getSum</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">/*              num为1时,方法返回1,             相当于是方法的出口,num总有是1的情况          */</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>num <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>          <span class="token comment" spellcheck="true">/*          num不为1时,方法返回 num +(num-1)的累和          递归调用getSum方法        */</span>        <span class="token keyword">return</span> num <span class="token operator">+</span> <span class="token function">getSum</span><span class="token punctuation">(</span>num<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="代码执行图解"><a href="#代码执行图解" class="headerlink" title="代码执行图解"></a>代码执行图解</h3><p><img src="img/day08_01_%E9%80%92%E5%BD%92%E7%B4%AF%E5%92%8C.jpg"></p><blockquote><p>小贴士：递归一定要有条件限定，保证递归能够停止下来，次数不要太多，否则会发生栈内存溢出。</p></blockquote><h2 id="2-3-递归求阶乘"><a href="#2-3-递归求阶乘" class="headerlink" title="2.3 递归求阶乘"></a>2.3 递归求阶乘</h2><ul><li><strong>阶乘</strong>：所有小于及等于该数的正整数的积。</li></ul><pre class=" language-java"><code class="language-java">n的阶乘：n<span class="token operator">!</span> <span class="token operator">=</span> n <span class="token operator">*</span> <span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>* <span class="token number">3</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">1</span> </code></pre><p><strong>分析</strong>：这与累和类似,只不过换成了乘法运算，学员可以自己练习，需要注意阶乘值符合int类型的范围。</p><pre><code>推理得出：n! = n * (n-1)!</code></pre><p><strong>代码实现</strong>：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DiGuiDemo</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//计算n的阶乘，使用递归完成</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 调用求阶乘的方法</span>        <span class="token keyword">int</span> value <span class="token operator">=</span> <span class="token function">getValue</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 输出结果</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"阶乘为:"</span><span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*        通过递归算法实现.        参数列表:int         返回值类型: int       */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 1的阶乘为1</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>          <span class="token comment" spellcheck="true">/*            n不为1时,方法返回 n! = n*(n-1)!          递归调用getValue方法          */</span>        <span class="token keyword">return</span> n <span class="token operator">*</span> <span class="token function">getValue</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="2-4-递归打印多级目录"><a href="#2-4-递归打印多级目录" class="headerlink" title="2.4 递归打印多级目录"></a>2.4 递归打印多级目录</h2><p><strong>分析</strong>：多级目录的打印，就是当目录的嵌套。遍历之前，无从知道到底有多少级目录，所以我们还是要使用递归实现。</p><p><strong>代码实现</strong>：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DiGuiDemo2</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 创建File对象</span>        File dir  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D:\\aaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 调用打印目录方法</span>        <span class="token function">printDir</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span>  <span class="token function">printDir</span><span class="token punctuation">(</span>File dir<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 获取子文件和目录</span>        File<span class="token punctuation">[</span><span class="token punctuation">]</span> files <span class="token operator">=</span> dir<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 循环打印</span>          <span class="token comment" spellcheck="true">/*            判断:            当是文件时,打印绝对路径.            当是目录时,继续调用打印目录的方法,形成递归调用.          */</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>File file <span class="token operator">:</span> files<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 判断</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">isFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token comment" spellcheck="true">// 是文件,输出文件绝对路径</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"文件名:"</span><span class="token operator">+</span> file<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                  <span class="token comment" spellcheck="true">// 是目录,输出目录绝对路径</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"目录:"</span><span class="token operator">+</span>file<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">// 继续遍历,调用printDir,形成递归</span>                <span class="token function">printDir</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="第三章-综合案例"><a href="#第三章-综合案例" class="headerlink" title="第三章 综合案例"></a>第三章 综合案例</h1><h2 id="3-1-文件搜索"><a href="#3-1-文件搜索" class="headerlink" title="3.1 文件搜索"></a>3.1 文件搜索</h2><p>搜索<code>D:\aaa</code> 目录中的<code>.java</code> 文件。</p><p><strong>分析</strong>：</p><ol><li>目录搜索，无法判断多少级目录，所以使用递归，遍历所有目录。</li><li>遍历目录时，获取的子文件，通过文件名称，判断是否符合条件。</li></ol><p><strong>代码实现</strong>：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DiGuiDemo3</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建File对象</span>        File dir  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D:\\aaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 调用打印目录方法</span>        <span class="token function">printDir</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printDir</span><span class="token punctuation">(</span>File dir<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 获取子文件和目录</span>        File<span class="token punctuation">[</span><span class="token punctuation">]</span> files <span class="token operator">=</span> dir<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 循环打印</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>File file <span class="token operator">:</span> files<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">isFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token comment" spellcheck="true">// 是文件，判断文件名并输出文件绝对路径</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">".java"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"文件名:"</span> <span class="token operator">+</span> file<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 是目录，继续遍历,形成递归</span>                <span class="token function">printDir</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="3-2-文件过滤器优化"><a href="#3-2-文件过滤器优化" class="headerlink" title="3.2 文件过滤器优化"></a>3.2 文件过滤器优化</h2><p><code>java.io.FileFilter</code>是一个接口，是File的过滤器。 该接口的对象可以传递给File类的<code>listFiles(FileFilter)</code> 作为参数， 接口中只有一个方法。</p><p><code>boolean accept(File pathname)  </code> ：测试pathname是否应该包含在当前File目录中，符合则返回true。</p><p><strong>分析</strong>：</p><ol><li>接口作为参数，需要传递子类对象，重写其中方法。我们选择匿名内部类方式，比较简单。</li><li><code>accept</code>方法，参数为File，表示当前File下所有的子文件和子目录。保留住则返回true，过滤掉则返回false。保留规则：<ol><li>要么是.java文件。</li><li>要么是目录，用于继续遍历。</li></ol></li><li>通过过滤器的作用，<code>listFiles(FileFilter)</code>返回的数组元素中，子文件对象都是符合条件的，可以直接打印。</li></ol><p><strong>代码实现：</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DiGuiDemo4</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        File dir <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D:\\aaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printDir2</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printDir2</span><span class="token punctuation">(</span>File dir<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 匿名内部类方式,创建过滤器子类对象</span>        File<span class="token punctuation">[</span><span class="token punctuation">]</span> files <span class="token operator">=</span> dir<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">accept</span><span class="token punctuation">(</span>File pathname<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> pathname<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">".java"</span><span class="token punctuation">)</span><span class="token operator">||</span>pathname<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 循环打印</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>File file <span class="token operator">:</span> files<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">isFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"文件名:"</span> <span class="token operator">+</span> file<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token function">printDir2</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>      </code></pre><h2 id="3-3-Lambda优化"><a href="#3-3-Lambda优化" class="headerlink" title="3.3 Lambda优化"></a>3.3 Lambda优化</h2><p><strong>分析：</strong><code>FileFilter</code>是只有一个方法的接口，因此可以用lambda表达式简写。</p><p>lambda格式：</p><pre class=" language-java"><code class="language-java"><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span> <span class="token punctuation">}</span></code></pre><p><strong>代码实现：</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printDir3</span><span class="token punctuation">(</span>File dir<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// lambda的改写</span>    File<span class="token punctuation">[</span><span class="token punctuation">]</span> files <span class="token operator">=</span> dir<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span>f <span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>           <span class="token keyword">return</span> f<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">".java"</span><span class="token punctuation">)</span> <span class="token operator">||</span> f<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 循环打印</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>File file <span class="token operator">:</span> files<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">isFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"文件名:"</span> <span class="token operator">+</span> file<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token function">printDir3</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="form-www-itcast-com"><a href="#form-www-itcast-com" class="headerlink" title="form  www.itcast.com"></a>form  <a href="http://www.itcast.com/">www.itcast.com</a></h3>]]></content>
      
      
      <categories>
          
          <category> File </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>泛型学习笔记</title>
      <link href="2020/08/03/collection-fan-xing-bi-ji/"/>
      <url>2020/08/03/collection-fan-xing-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="day02【Collection、泛型】"><a href="#day02【Collection、泛型】" class="headerlink" title="day02【Collection、泛型】"></a>day02【Collection、泛型】</h1><h2 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h2><ul><li>Collection集合</li><li>迭代器</li><li>增强for</li><li>泛型</li></ul><a id="more"></a><h2 id="教学目标"><a href="#教学目标" class="headerlink" title="教学目标"></a>教学目标</h2><ul><li><input disabled="" type="checkbox"> 能够说出集合与数组的区别</li><li><input disabled="" type="checkbox"> 说出Collection集合的常用功能</li><li><input disabled="" type="checkbox"> 能够使用迭代器对集合进行取元素</li><li><input disabled="" type="checkbox"> 能够说出集合的使用细节</li><li><input disabled="" type="checkbox"> 能够使用集合存储自定义类型</li><li><input disabled="" type="checkbox"> 能够使用foreach循环遍历集合</li><li><input disabled="" type="checkbox"> 能够使用泛型定义集合对象</li><li><input disabled="" type="checkbox"> 能够理解泛型上下限</li><li><input disabled="" type="checkbox"> 能够阐述泛型通配符的作用</li></ul><h1 id="第一章-Collection集合"><a href="#第一章-Collection集合" class="headerlink" title="第一章 Collection集合"></a>第一章 Collection集合</h1><h2 id="1-1-集合概述"><a href="#1-1-集合概述" class="headerlink" title="1.1 集合概述"></a>1.1 集合概述</h2><p>在前面基础班我们已经学习过并使用过集合ArrayList<e> ,那么集合到底是什么呢?</e></p><ul><li><strong>集合</strong>：集合是java中提供的一种容器，可以用来存储多个数据。</li></ul><p>集合和数组既然都是容器，它们有啥区别呢？</p><ul><li>数组的长度是固定的。集合的长度是可变的。</li><li>数组中存储的是同一类型的元素，可以存储基本数据类型值。集合存储的都是对象。而且对象的类型可以不一致。在开发中一般当对象多的时候，使用集合进行存储。</li></ul><h2 id="1-2-集合框架"><a href="#1-2-集合框架" class="headerlink" title="1.2  集合框架"></a>1.2  集合框架</h2><p>JAVASE提供了满足各种需求的API，在使用这些API前，先了解其继承与接口操作架构，才能了解何时采用哪个类，以及类之间如何彼此合作，从而达到灵活应用。</p><p>集合按照其存储结构可以分为两大类，分别是单列集合<code>java.util.Collection</code>和双列集合<code>java.util.Map</code>，今天我们主要学习<code>Collection</code>集合，在day04时讲解<code>Map</code>集合。</p><ul><li><strong>Collection</strong>：单列集合类的根接口，用于存储一系列符合某种规则的元素，它有两个重要的子接口，分别是<code>java.util.List</code>和<code>java.util.Set</code>。其中，<code>List</code>的特点是元素有序、元素可重复。<code>Set</code>的特点是元素无序，而且不可重复。<code>List</code>接口的主要实现类有<code>java.util.ArrayList</code>和<code>java.util.LinkedList</code>，<code>Set</code>接口的主要实现类有<code>java.util.HashSet</code>和<code>java.util.TreeSet</code>。</li></ul><p>从上面的描述可以看出JDK中提供了丰富的集合类库，为了便于初学者进行系统地学习，接下来通过一张图来描述整个集合类的继承体系。</p><p><img src="img%5CCollection%E9%9B%86%E5%90%88%E4%BD%93%E7%B3%BB%E5%9B%BE.png"></p><p>其中，橙色框里填写的都是接口类型，而蓝色框里填写的都是具体的实现类。这几天将针对图中所列举的集合类进行逐一地讲解。</p><p>集合本身是一个工具，它存放在java.util包中。在<code>Collection</code>接口定义着单列集合框架中最最共性的内容。</p><h2 id="1-3-Collection-常用功能"><a href="#1-3-Collection-常用功能" class="headerlink" title="1.3 Collection 常用功能"></a>1.3 Collection 常用功能</h2><p>Collection是所有单列集合的父接口，因此在Collection中定义了单列集合(List和Set)通用的一些方法，这些方法可用于操作所有的单列集合。方法如下：</p><ul><li><code>public boolean add(E e)</code>：  把给定的对象添加到当前集合中 。</li><li><code>public void clear()</code> :清空集合中所有的元素。</li><li><code>public boolean remove(E e)</code>: 把给定的对象在当前集合中删除。</li><li><code>public boolean contains(E e)</code>: 判断当前集合中是否包含给定的对象。</li><li><code>public boolean isEmpty()</code>: 判断当前集合是否为空。</li><li><code>public int size()</code>: 返回集合中元素的个数。</li><li><code>public Object[] toArray()</code>: 把集合中的元素，存储到数组中。</li></ul><p>方法演示：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Collection<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo1Collection</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建集合对象 </span>        <span class="token comment" spellcheck="true">// 使用多态形式</span>        Collection<span class="token operator">&lt;</span>String<span class="token operator">></span> coll <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 使用方法</span>        <span class="token comment" spellcheck="true">// 添加功能  boolean  add(String s)</span>        coll<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"小李广"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        coll<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"扫地僧"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        coll<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"石破天"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>coll<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// boolean contains(E e) 判断o是否在集合中存在</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"判断  扫地僧 是否在集合中"</span><span class="token operator">+</span>coll<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"扫地僧"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//boolean remove(E e) 删除在集合中的o元素</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除石破天："</span><span class="token operator">+</span>coll<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"石破天"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"操作之后集合中元素:"</span><span class="token operator">+</span>coll<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// size() 集合中有几个元素</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"集合中有"</span><span class="token operator">+</span>coll<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"个元素"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Object[] toArray()转换成一个Object数组</span>        Object<span class="token punctuation">[</span><span class="token punctuation">]</span> objects <span class="token operator">=</span> coll<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 遍历数组</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> objects<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>objects<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// void  clear() 清空集合</span>        coll<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"集合中内容为："</span><span class="token operator">+</span>coll<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// boolean  isEmpty()  判断是否为空</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>coll<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>tips: 有关Collection中的方法可不止上面这些，其他方法可以自行查看API学习。</p></blockquote><h2 id="第二章-Iterator迭代器"><a href="#第二章-Iterator迭代器" class="headerlink" title="第二章 Iterator迭代器"></a>第二章 Iterator迭代器</h2><h2 id="2-1-Iterator接口"><a href="#2-1-Iterator接口" class="headerlink" title="2.1 Iterator接口"></a>2.1 Iterator接口</h2><p>在程序开发中，经常需要遍历集合中的所有元素。针对这种需求，JDK专门提供了一个接口<code>java.util.Iterator</code>。<code>Iterator</code>接口也是Java集合中的一员，但它与<code>Collection</code>、<code>Map</code>接口有所不同，<code>Collection</code>接口与<code>Map</code>接口主要用于存储元素，而<code>Iterator</code>主要用于迭代访问（即遍历）<code>Collection</code>中的元素，因此<code>Iterator</code>对象也被称为迭代器。</p><p>想要遍历Collection集合，那么就要获取该集合迭代器完成迭代操作，下面介绍一下获取迭代器的方法：</p><ul><li><code>public Iterator iterator()</code>: 获取集合对应的迭代器，用来遍历集合中的元素的。</li></ul><p>下面介绍一下迭代的概念：</p><ul><li><strong>迭代</strong>：即Collection集合元素的通用获取方式。在取元素之前先要判断集合中有没有元素，如果有，就把这个元素取出来，继续在判断，如果还有就再取出出来。一直把集合中的所有元素全部取出。这种取出方式专业术语称为迭代。</li></ul><p>Iterator接口的常用方法如下：</p><ul><li><code>public E next()</code>:返回迭代的下一个元素。</li><li><code>public boolean hasNext()</code>:如果仍有元素可以迭代，则返回 true。</li></ul><p>接下来我们通过案例学习如何使用Iterator迭代集合中元素：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IteratorDemo</span> <span class="token punctuation">{</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 使用多态方式 创建对象</span>        Collection<span class="token operator">&lt;</span>String<span class="token operator">></span> coll <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 添加元素到集合</span>        coll<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"串串星人"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        coll<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"吐槽星人"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        coll<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"汪星人"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//遍历</span>        <span class="token comment" spellcheck="true">//使用迭代器 遍历   每个集合对象都有自己的迭代器</span>        Iterator<span class="token operator">&lt;</span>String<span class="token operator">></span> it <span class="token operator">=</span> coll<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//  泛型指的是 迭代出 元素的数据类型</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//判断是否有迭代元素</span>            String s <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取迭代出的元素</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>tips:：在进行集合元素取出时，如果集合中已经没有元素了，还继续使用迭代器的next方法，将会发生java.util.NoSuchElementException没有集合元素的错误。</p></blockquote><h2 id="2-2-迭代器的实现原理"><a href="#2-2-迭代器的实现原理" class="headerlink" title="2.2 迭代器的实现原理"></a>2.2 迭代器的实现原理</h2><p>我们在之前案例已经完成了Iterator遍历集合的整个过程。当遍历集合时，首先通过调用t集合的iterator()方法获得迭代器对象，然后使用hashNext()方法判断集合中是否存在下一个元素，如果存在，则调用next()方法将元素取出，否则说明已到达了集合末尾，停止遍历元素。</p><p>Iterator迭代器对象在遍历集合时，内部采用指针的方式来跟踪集合中的元素，为了让初学者能更好地理解迭代器的工作原理，接下来通过一个图例来演示Iterator对象迭代元素的过程：</p><p><img src="img%5C%E8%BF%AD%E4%BB%A3%E5%99%A8%E5%8E%9F%E7%90%86%E5%9B%BE.bmp"></p><p>在调用Iterator的next方法之前，迭代器的索引位于第一个元素之前，不指向任何元素，当第一次调用迭代器的next方法后，迭代器的索引会向后移动一位，指向第一个元素并将该元素返回，当再次调用next方法时，迭代器的索引会指向第二个元素并将该元素返回，依此类推，直到hasNext方法返回false，表示到达了集合的末尾，终止对元素的遍历。</p><h2 id="2-3-增强for"><a href="#2-3-增强for" class="headerlink" title="2.3 增强for"></a>2.3 增强for</h2><p>增强for循环(也称for each循环)是<strong>JDK1.5</strong>以后出来的一个高级for循环，专门用来遍历数组和集合的。它的内部原理其实是个Iterator迭代器，所以在遍历的过程中，不能对集合中的元素进行增删操作。</p><p>格式：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">for</span><span class="token punctuation">(</span>元素的数据类型  变量 <span class="token operator">:</span> Collection集合or数组<span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">//写操作代码</span><span class="token punctuation">}</span></code></pre><p>它用于遍历Collection和数组。通常只进行遍历元素，不要在遍历的过程中对集合元素进行增删操作。</p><h4 id="练习1：遍历数组"><a href="#练习1：遍历数组" class="headerlink" title="练习1：遍历数组"></a>练习1：遍历数组</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NBForDemo1</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">87</span><span class="token punctuation">}</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//使用增强for遍历数组</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> a <span class="token operator">:</span> arr<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//a代表数组中的每个元素</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="练习2-遍历集合"><a href="#练习2-遍历集合" class="headerlink" title="练习2:遍历集合"></a>练习2:遍历集合</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NBFor</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Collection<span class="token operator">&lt;</span>String<span class="token operator">></span> coll <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        coll<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"小河神"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        coll<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"老河神"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        coll<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"神婆"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//使用增强for遍历</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>String s <span class="token operator">:</span>coll<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//接收变量s代表 代表被遍历到的集合元素</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>tips: 新for循环必须有被遍历的目标。目标只能是Collection或者是数组。新式for仅仅作为遍历操作出现。</p></blockquote><h1 id="第三章-泛型"><a href="#第三章-泛型" class="headerlink" title="第三章 泛型"></a>第三章 泛型</h1><h2 id="3-1-泛型概述"><a href="#3-1-泛型概述" class="headerlink" title="3.1  泛型概述"></a>3.1  泛型概述</h2><p>在前面学习集合时，我们都知道集合中是可以存放任意对象的，只要把对象存储集合后，那么这时他们都会被提升成Object类型。当我们在取出每一个对象，并且进行相应的操作，这时必须采用类型转换。</p><p>大家观察下面代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GenericDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Collection coll <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        coll<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        coll<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"itcast"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        coll<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//由于集合没有做任何限定，任何类型都可以给其中存放</span>        Iterator it <span class="token operator">=</span> coll<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//需要打印每个字符串的长度,就要把迭代出来的对象转成String类型</span>            String str <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>程序在运行时发生了问题<strong>java.lang.ClassCastException</strong>。                                                                                             为什么会发生类型转换异常呢？                                                                                                                                       我们来分析下：由于集合中什么类型的元素都可以存储。导致取出时强转引发运行时 ClassCastException。                                                                                                                                                       怎么来解决这个问题呢？                                                                                                                                                           Collection虽然可以存储各种对象，但实际上通常Collection只存储同一类型对象。例如都是存储字符串对象。因此在JDK5之后，新增了<strong>泛型</strong>(<strong>Generic</strong>)语法，让你在设计API时可以指定类或方法支持泛型，这样我们使用API的时候也变得更为简洁，并得到了编译时期的语法检查。</p><ul><li><strong>泛型</strong>：可以在类或方法中预支地使用未知的类型。</li></ul><blockquote><p>tips:一般在创建对象时，将未知的类型确定具体的类型。当没有指定泛型时，默认类型为Object类型。</p></blockquote><h2 id="3-2-使用泛型的好处"><a href="#3-2-使用泛型的好处" class="headerlink" title="3.2  使用泛型的好处"></a>3.2  使用泛型的好处</h2><p>上一节只是讲解了泛型的引入，那么泛型带来了哪些好处呢？</p><ul><li>将运行时期的ClassCastException，转移到了编译时期变成了编译失败。</li><li>避免了类型强转的麻烦。</li></ul><p>通过我们如下代码体验一下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GenericDemo2</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Collection<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"itcast"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// list.add(5);//当集合明确类型后，存放类型不一致就会编译报错</span>        <span class="token comment" spellcheck="true">// 集合已经明确具体存放的元素类型，那么在使用迭代器的时候，迭代器也同样会知道具体遍历元素类型</span>        Iterator<span class="token operator">&lt;</span>String<span class="token operator">></span> it <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            String str <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//当使用Iterator&lt;String>控制元素类型后，就不需要强转了。获取到的元素直接就是String类型</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>tips:泛型是数据类型的一部分，我们将类名与泛型合并一起看做数据类型。</p></blockquote><h2 id="3-3-泛型的定义与使用"><a href="#3-3-泛型的定义与使用" class="headerlink" title="3.3  泛型的定义与使用"></a>3.3  泛型的定义与使用</h2><p>我们在集合中会大量使用到泛型，这里来完整地学习泛型知识。</p><p>泛型，用来灵活地将数据类型应用到不同的类、方法、接口当中。将数据类型作为参数进行传递。</p><h3 id="定义和使用含有泛型的类"><a href="#定义和使用含有泛型的类" class="headerlink" title="定义和使用含有泛型的类"></a>定义和使用含有泛型的类</h3><p>定义格式：</p><pre><code>修饰符 class 类名&lt;代表泛型的变量&gt; {  }</code></pre><p>例如，API中的ArrayList集合：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token punctuation">}</span>    <span class="token keyword">public</span> E <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token punctuation">}</span>       <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>使用泛型： 即什么时候确定泛型。</p><p><strong>在创建对象的时候确定泛型</strong></p><p> 例如，<code>ArrayList&lt;String&gt; list = new ArrayList&lt;String&gt;();</code></p><p>此时，变量E的值就是String类型,那么我们的类型就可以理解为：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">{</span>      <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span>String e<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token punctuation">}</span>     <span class="token keyword">public</span> String <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token punctuation">}</span>     <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>再例如，<code>ArrayList&lt;Integer&gt; list = new ArrayList&lt;Integer&gt;();</code></p><p>此时，变量E的值就是Integer类型,那么我们的类型就可以理解为：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span>Integer e<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>     <span class="token keyword">public</span> Integer <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span>     <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>举例自定义泛型类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyGenericClass</span><span class="token operator">&lt;</span>MVP<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//没有MVP类型，在这里代表 未知的一种数据类型 未来传递什么就是什么类型</span>    <span class="token keyword">private</span> MVP mvp<span class="token punctuation">;</span>         <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMVP</span><span class="token punctuation">(</span>MVP mvp<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mvp <span class="token operator">=</span> mvp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>         <span class="token keyword">public</span> MVP <span class="token function">getMVP</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> mvp<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>使用:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GenericClassDemo</span> <span class="token punctuation">{</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token comment" spellcheck="true">// 创建一个泛型为String的类</span>         MyGenericClass<span class="token operator">&lt;</span>String<span class="token operator">></span> my <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyGenericClass</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment" spellcheck="true">// 调用setMVP</span>         my<span class="token punctuation">.</span><span class="token function">setMVP</span><span class="token punctuation">(</span><span class="token string">"大胡子登登"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 调用getMVP</span>         String mvp <span class="token operator">=</span> my<span class="token punctuation">.</span><span class="token function">getMVP</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mvp<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//创建一个泛型为Integer的类</span>         MyGenericClass<span class="token operator">&lt;</span>Integer<span class="token operator">></span> my2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyGenericClass</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          my2<span class="token punctuation">.</span><span class="token function">setMVP</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  Integer mvp2 <span class="token operator">=</span> my2<span class="token punctuation">.</span><span class="token function">getMVP</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="含有泛型的方法"><a href="#含有泛型的方法" class="headerlink" title="含有泛型的方法"></a>含有泛型的方法</h3><p>定义格式：</p><pre><code>修饰符 &lt;代表泛型的变量&gt; 返回值类型 方法名(参数){  }</code></pre><p>例如，</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyGenericMethod</span> <span class="token punctuation">{</span>          <span class="token keyword">public</span> <span class="token operator">&lt;</span>MVP<span class="token operator">></span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span>MVP mvp<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mvp<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token operator">&lt;</span>MVP<span class="token operator">></span> MVP <span class="token function">show2</span><span class="token punctuation">(</span>MVP mvp<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> mvp<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>使用格式：<strong>调用方法时，确定泛型的类型</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GenericMethodDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建对象</span>        MyGenericMethod mm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyGenericMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 演示看方法提示</span>        mm<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mm<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mm<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token number">12.45</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="含有泛型的接口"><a href="#含有泛型的接口" class="headerlink" title="含有泛型的接口"></a>含有泛型的接口</h3><p>定义格式：</p><pre><code>修饰符 interface接口名&lt;代表泛型的变量&gt; {  }</code></pre><p>例如，</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MyGenericInterface</span><span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">abstract</span> E <span class="token function">getE</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><p>使用格式：</p><p><strong>1、定义类时确定泛型的类型</strong></p><p>例如</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyImp1</span> <span class="token keyword">implements</span> <span class="token class-name">MyGenericInterface</span><span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>String e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 省略...</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getE</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>此时，泛型E的值就是String类型。</p><p> <strong>2、始终不确定泛型的类型，直到创建对象时，确定泛型的类型</strong></p><p> 例如</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyImp2</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">MyGenericInterface</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 省略...</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> E <span class="token function">getE</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>确定泛型：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/* * 使用 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GenericInterface</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        MyImp2<span class="token operator">&lt;</span>String<span class="token operator">></span>  my <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyImp2</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          my<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"aa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="3-4-泛型通配符"><a href="#3-4-泛型通配符" class="headerlink" title="3.4  泛型通配符"></a>3.4  泛型通配符</h2><p>当使用泛型类或者接口时，传递的数据中，泛型类型不确定，可以通过通配符&lt;?&gt;表示。但是一旦使用泛型的通配符后，只能使用Object类中的共性方法，集合中元素自身方法无法使用。</p><h4 id="通配符基本使用"><a href="#通配符基本使用" class="headerlink" title="通配符基本使用"></a>通配符基本使用</h4><p>泛型的通配符:<strong>不知道使用什么类型来接收的时候,此时可以使用?,?表示未知通配符。</strong></p><p>此时只能接受数据,不能往该集合中存储数据。</p><p>举个例子大家理解使用即可：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Collection<span class="token operator">&lt;</span>Intger<span class="token operator">></span> list1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getElement</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span><span class="token punctuation">;</span>    Collection<span class="token operator">&lt;</span>String<span class="token operator">></span> list2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getElement</span><span class="token punctuation">(</span>list2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">getElement</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> coll<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//？代表可以接收任意类型</span></code></pre><blockquote><p>tips:泛型不存在继承关系 Collection<object> list = new ArrayList<string>();这种是错误的。<p></p><h4 id="通配符高级使用—-受限泛型"><a href="#通配符高级使用—-受限泛型" class="headerlink" title="通配符高级使用—-受限泛型"></a>通配符高级使用—-受限泛型</h4><p>之前设置泛型的时候，实际上是可以任意设置的，只要是类就可以设置。但是在JAVA的泛型中可以指定一个泛型的<strong>上限</strong>和<strong>下限</strong>。</p><p><strong>泛型的上限</strong>：</p><ul><li><strong>格式</strong>： <code>类型名称 &lt;? extends 类 &gt; 对象名称</code></li><li><strong>意义</strong>： <code>只能接收该类型及其子类</code></li></ul><p><strong>泛型的下限</strong>：</p><ul><li><strong>格式</strong>： <code>类型名称 &lt;? super 类 &gt; 对象名称</code></li><li><strong>意义</strong>： <code>只能接收该类型及其父类型</code></li></ul><p>比如：现已知Object类，String 类，Number类，Integer类，其中Number是Integer的父类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Collection<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Collection<span class="token operator">&lt;</span>String<span class="token operator">></span> list2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Collection<span class="token operator">&lt;</span>Number<span class="token operator">></span> list3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Number<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Collection<span class="token operator">&lt;</span>Object<span class="token operator">></span> list4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">getElement</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getElement</span><span class="token punctuation">(</span>list2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//报错</span>    <span class="token function">getElement</span><span class="token punctuation">(</span>list3<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getElement</span><span class="token punctuation">(</span>list4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//报错</span>      <span class="token function">getElement2</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//报错</span>    <span class="token function">getElement2</span><span class="token punctuation">(</span>list2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//报错</span>    <span class="token function">getElement2</span><span class="token punctuation">(</span>list3<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getElement2</span><span class="token punctuation">(</span>list4<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 泛型的上限：此时的泛型?，必须是Number类型或者Number类型的子类</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">getElement1</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Number</span><span class="token operator">></span> coll<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 泛型的下限：此时的泛型?，必须是Number类型或者Number类型的父类</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">getElement2</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> Number<span class="token operator">></span> coll<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><h1 id="第四章-集合综合案例"><a href="#第四章-集合综合案例" class="headerlink" title="第四章 集合综合案例"></a>第四章 集合综合案例</h1><h2 id="4-1-案例介绍"><a href="#4-1-案例介绍" class="headerlink" title="4.1 案例介绍"></a>4.1 案例介绍</h2><p>按照斗地主的规则，完成洗牌发牌的动作。<br>具体规则：</p><p>使用54张牌打乱顺序,三个玩家参与游戏，三人交替摸牌，每人17张牌，最后三张留作底牌。</p><h2 id="4-2-案例分析"><a href="#4-2-案例分析" class="headerlink" title="4.2 案例分析"></a>4.2 案例分析</h2><ul><li><p>准备牌：</p><p>牌可以设计为一个ArrayList<string>,每个字符串为一张牌。<br>每张牌由花色数字两部分组成，我们可以使用花色集合与数字集合嵌套迭代完成每张牌的组装。<br>牌由Collections类的shuffle方法进行随机排序。</string></p></li><li><p>发牌</p><p>将每个人以及底牌设计为ArrayList<string>,将最后3张牌直接存放于底牌，剩余牌通过对3取模依次发牌。</string></p></li></ul><ul><li><p>看牌</p><p>直接打印每个集合。</p></li></ul><h2 id="4-3-代码实现"><a href="#4-3-代码实现" class="headerlink" title="4.3 代码实现"></a>4.3 代码实现</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Collections<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Poker</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/*        * 1: 准备牌操作        */</span>        <span class="token comment" spellcheck="true">//1.1 创建牌盒 将来存储牌面的 </span>        ArrayList<span class="token operator">&lt;</span>String<span class="token operator">></span> pokerBox <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//1.2 创建花色集合</span>        ArrayList<span class="token operator">&lt;</span>String<span class="token operator">></span> colors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//1.3 创建数字集合</span>        ArrayList<span class="token operator">&lt;</span>String<span class="token operator">></span> numbers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//1.4 分别给花色 以及 数字集合添加元素</span>        colors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"♥"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        colors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"♦"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        colors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"♠"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        colors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"♣"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            numbers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        numbers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"J"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        numbers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Q"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        numbers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"K"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        numbers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//1.5 创造牌  拼接牌操作</span>        <span class="token comment" spellcheck="true">// 拿出每一个花色  然后跟每一个数字 进行结合  存储到牌盒中</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String color <span class="token operator">:</span> colors<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//color每一个花色 </span>            <span class="token comment" spellcheck="true">//遍历数字集合</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>String number <span class="token operator">:</span> numbers<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//结合</span>                String card <span class="token operator">=</span> color<span class="token operator">+</span>number<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//存储到牌盒中</span>                pokerBox<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>card<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//1.6大王小王</span>        pokerBox<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"小☺"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pokerBox<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"大☠"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// System.out.println(pokerBox);</span>        <span class="token comment" spellcheck="true">//洗牌 是不是就是将  牌盒中 牌的索引打乱 </span>        <span class="token comment" spellcheck="true">// Collections类  工具类  都是 静态方法</span>        <span class="token comment" spellcheck="true">// shuffer方法   </span>        <span class="token comment" spellcheck="true">/*         * static void shuffle(List&lt;?> list)          *     使用默认随机源对指定列表进行置换。          */</span>        <span class="token comment" spellcheck="true">//2:洗牌</span>        Collections<span class="token punctuation">.</span><span class="token function">shuffle</span><span class="token punctuation">(</span>pokerBox<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3 发牌</span>        <span class="token comment" spellcheck="true">//3.1 创建 三个 玩家集合  创建一个底牌集合</span>        ArrayList<span class="token operator">&lt;</span>String<span class="token operator">></span> player1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ArrayList<span class="token operator">&lt;</span>String<span class="token operator">></span> player2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ArrayList<span class="token operator">&lt;</span>String<span class="token operator">></span> player3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ArrayList<span class="token operator">&lt;</span>String<span class="token operator">></span> dipai <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">//遍历 牌盒  必须知道索引   </span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>pokerBox<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//获取 牌面</span>            String card <span class="token operator">=</span> pokerBox<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//留出三张底牌 存到 底牌集合中</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">>=</span><span class="token number">51</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//存到底牌集合中</span>                dipai<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>card<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//玩家1   %3  ==0</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">3</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                      player1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>card<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">3</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//玩家2</span>                      player2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>card<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//玩家3</span>                      player3<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>card<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//看看</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"令狐冲："</span><span class="token operator">+</span>player1<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"田伯光："</span><span class="token operator">+</span>player2<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"绿竹翁："</span><span class="token operator">+</span>player3<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"底牌："</span><span class="token operator">+</span>dipai<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="form-www-itcast-com"><a href="#form-www-itcast-com" class="headerlink" title="form  www.itcast.com"></a>form  <a href="http://www.itcast.com/">www.itcast.com</a></h3></string></object></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Collection </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>异常、线程学习笔记</title>
      <link href="2020/08/03/yi-chang-xian-cheng/"/>
      <url>2020/08/03/yi-chang-xian-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="【异常、线程】"><a href="#【异常、线程】" class="headerlink" title="【异常、线程】"></a>【异常、线程】</h1><h2 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h2><ul><li>异常、线程</li></ul><h2 id="教学目标"><a href="#教学目标" class="headerlink" title="教学目标"></a>教学目标</h2><ul><li><input disabled="" type="checkbox"> 能够辨别程序中异常和错误的区别</li><li><input disabled="" type="checkbox"> 说出异常的分类</li><li><input disabled="" type="checkbox"> 说出虚拟机处理异常的方式</li><li><input disabled="" type="checkbox"> 列举出常见的三个运行期异常</li><li><input disabled="" type="checkbox"> 能够使用try…catch关键字处理异常</li><li><input disabled="" type="checkbox"> 能够使用throws关键字处理异常</li><li><input disabled="" type="checkbox"> 能够自定义异常类</li><li><input disabled="" type="checkbox"> 能够处理自定义异常类</li><li><input disabled="" type="checkbox"> 说出进程的概念</li><li><input disabled="" type="checkbox"> 说出线程的概念</li><li><input disabled="" type="checkbox"> 能够理解并发与并行的区别</li><li><input disabled="" type="checkbox"> 能够开启新线程</li></ul><a id="more"></a><h1 id="第一章-异常"><a href="#第一章-异常" class="headerlink" title="第一章    异常"></a>第一章    异常</h1><h2 id="1-1-异常概念"><a href="#1-1-异常概念" class="headerlink" title="1.1 异常概念"></a>1.1 异常概念</h2><p>异常，就是不正常的意思。在生活中:医生说,你的身体某个部位有异常,该部位和正常相比有点不同,该部位的功能将受影响.在程序中的意思就是：</p><ul><li><strong>异常</strong> ：指的是程序在执行过程中，出现的非正常的情况，最终会导致JVM的非正常停止。</li></ul><p>在Java等面向对象的编程语言中，异常本身是一个类，产生异常就是创建异常对象并抛出了一个异常对象。Java处理异常的方式是中断处理。</p><blockquote><p>异常指的并不是语法错误,语法错了,编译不通过,不会产生字节码文件,根本不能运行.</p></blockquote><h2 id="1-2-异常体系"><a href="#1-2-异常体系" class="headerlink" title="1.2 异常体系"></a>1.2 异常体系</h2><p>异常机制其实是帮助我们<strong>找到</strong>程序中的问题，异常的根类是<code>java.lang.Throwable</code>，其下有两个子类：<code>java.lang.Error</code>与<code>java.lang.Exception</code>，平常所说的异常指<code>java.lang.Exception</code>。</p><p><img src="img%5C%E5%BC%82%E5%B8%B8%E4%BD%93%E7%B3%BB.png"></p><p><strong>Throwable体系：</strong></p><ul><li><strong>Error</strong>:严重错误Error，无法通过处理的错误，只能事先避免，好比绝症。</li><li><strong>Exception</strong>:表示异常，异常产生后程序员可以通过代码的方式纠正，使程序继续运行，是必须要处理的。好比感冒、阑尾炎。</li></ul><p><strong>Throwable中的常用方法：</strong></p><ul><li><p><code>public void printStackTrace()</code>:打印异常的详细信息。</p><p><em>包含了异常的类型,异常的原因,还包括异常出现的位置,在开发和调试阶段,都得使用printStackTrace。</em></p></li><li><p><code>public String getMessage()</code>:获取发生异常的原因。</p><p><em>提示给用户的时候,就提示错误原因。</em></p></li><li><p><code>public String toString()</code>:获取异常的类型和异常描述信息(不用)。</p></li></ul><p><strong><em>出现异常,不要紧张,把异常的简单类名,拷贝到API中去查。</em></strong></p><p><img src="img%5C%E7%AE%80%E5%8D%95%E7%9A%84%E5%BC%82%E5%B8%B8%E6%9F%A5%E7%9C%8B.bmp"></p><h2 id="1-3-异常分类"><a href="#1-3-异常分类" class="headerlink" title="1.3 异常分类"></a>1.3 异常分类</h2><p>我们平常说的异常就是指Exception，因为这类异常一旦出现，我们就要对代码进行更正，修复程序。</p><p><strong>异常(Exception)的分类</strong>:根据在编译时期还是运行时期去检查异常?</p><ul><li><strong>编译时期异常</strong>:checked异常。在编译时期,就会检查,如果没有处理异常,则编译失败。(如日期格式化异常)</li><li><strong>运行时期异常</strong>:runtime异常。在运行时期,检查异常.在编译时期,运行异常不会编译器检测(不报错)。(如数学异常)</li></ul><p>​    <img src="img%5C%E5%BC%82%E5%B8%B8%E7%9A%84%E5%88%86%E7%B1%BB.png"></p><h2 id="1-4-异常的产生过程解析"><a href="#1-4-异常的产生过程解析" class="headerlink" title="1.4     异常的产生过程解析"></a>1.4     异常的产生过程解析</h2><p>先运行下面的程序，程序会产生一个数组索引越界异常ArrayIndexOfBoundsException。我们通过图解来解析下异常产生的过程。</p><p> 工具类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayTools</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 对给定的数组通过给定的角标获取元素。</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getElement</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> element <span class="token operator">=</span> arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> element<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p> 测试类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExceptionDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">67</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>        intnum <span class="token operator">=</span> ArrayTools<span class="token punctuation">.</span><span class="token function">getElement</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"num="</span> <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"over"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>上述程序执行过程图解：</p><p> <img src="img%5C%E5%BC%82%E5%B8%B8%E4%BA%A7%E7%94%9F%E8%BF%87%E7%A8%8B.png"></p><h1 id="第二章-异常的处理"><a href="#第二章-异常的处理" class="headerlink" title="第二章 异常的处理"></a>第二章 异常的处理</h1><p>Java异常处理的五个关键字：<strong>try、catch、finally、throw、throws</strong></p><h2 id="2-1-抛出异常throw"><a href="#2-1-抛出异常throw" class="headerlink" title="2.1     抛出异常throw"></a>2.1     抛出异常throw</h2><p>在编写程序时，我们必须要考虑程序出现问题的情况。比如，在定义方法时，方法需要接受参数。那么，当调用方法使用接受到的参数时，首先需要先对参数数据进行合法的判断，数据若不合法，就应该告诉调用者，传递合法的数据进来。这时需要使用抛出异常的方式来告诉调用者。</p><p>在java中，提供了一个<strong>throw</strong>关键字，它用来抛出一个指定的异常对象。那么，抛出一个异常具体如何操作呢？</p><ol><li><p>创建一个异常对象。封装一些提示信息(信息可以自己编写)。</p></li><li><p>需要将这个异常对象告知给调用者。怎么告知呢？怎么将这个异常对象传递到调用者处呢？通过关键字throw就可以完成。throw 异常对象。</p><p>throw<strong>用在方法内</strong>，用来抛出一个异常对象，将这个异常对象传递到调用者处，并结束当前方法的执行。</p></li></ol><p><strong>使用格式：</strong></p><pre><code>throw new 异常类名(参数);</code></pre><p> 例如：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token string">"要访问的arr数组不存在"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArrayIndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token string">"该索引在数组中不存在，已超出范围"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>学习完抛出异常的格式后，我们通过下面程序演示下throw的使用。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThrowDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建一个数组 </span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">52</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//根据索引找对应的元素 </span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> element <span class="token operator">=</span> <span class="token function">getElement</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"over"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*     * 根据 索引找到数组中对应的元素     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getElement</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//判断  索引是否越界</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>index<span class="token operator">&lt;</span><span class="token number">0</span> <span class="token operator">||</span> index<span class="token operator">></span>arr<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>             <span class="token comment" spellcheck="true">/*             判断条件如果满足，当执行完throw抛出异常对象后，方法已经无法继续运算。             这时就会结束当前方法的执行，并将异常告知给调用者。这时就需要通过异常来解决。               */</span>             <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArrayIndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token string">"哥们，角标越界了~~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> element <span class="token operator">=</span> arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> element<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>注意：如果产生了问题，我们就会throw将问题描述类即异常进行抛出，也就是将问题返回给该方法的调用者。</p><p>那么对于调用者来说，该怎么处理呢？一种是进行捕获处理，另一种就是继续讲问题声明出去，使用throws声明处理。</p></blockquote><h2 id="2-2-Objects非空判断"><a href="#2-2-Objects非空判断" class="headerlink" title="2.2 Objects非空判断"></a>2.2 Objects非空判断</h2><p>还记得我们学习过一个类Objects吗，曾经提到过它由一些静态的实用方法组成，这些方法是null-save（空指针安全的）或null-tolerant（容忍空指针的），那么在它的源码中，对对象为null的值进行了抛出异常操作。</p><ul><li><code>public static &lt;T&gt; T requireNonNull(T obj)</code>:查看指定引用对象不是null。</li></ul><p>查看源码发现这里对为null的进行了抛出异常操作：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">requireNonNull</span><span class="token punctuation">(</span>T obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">==</span> null<span class="token punctuation">)</span>          <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> obj<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="2-3-声明异常throws"><a href="#2-3-声明异常throws" class="headerlink" title="2.3  声明异常throws"></a>2.3  声明异常throws</h2><p><strong>声明异常</strong>：将问题标识出来，报告给调用者。如果方法内通过throw抛出了编译时异常，而没有捕获处理（稍后讲解该方式），那么必须通过throws进行声明，让调用者去处理。</p><p>关键字<strong>throws</strong>运用于方法声明之上,用于表示当前方法不处理异常,而是提醒该方法的调用者来处理异常(抛出异常).</p><p><strong>声明异常格式：</strong></p><pre><code>修饰符 返回值类型 方法名(参数) throws 异常类名1,异常类名2…{   }    </code></pre><p>声明异常的代码演示：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThrowsDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> FileNotFoundException <span class="token punctuation">{</span>        <span class="token function">read</span><span class="token punctuation">(</span><span class="token string">"a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 如果定义功能时有问题发生需要报告给调用者。可以通过在方法上使用throws关键字进行声明</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">read</span><span class="token punctuation">(</span>String path<span class="token punctuation">)</span> <span class="token keyword">throws</span> FileNotFoundException <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>path<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//如果不是 a.txt这个文件 </span>            <span class="token comment" spellcheck="true">// 我假设  如果不是 a.txt 认为 该文件不存在 是一个错误 也就是异常  throw</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">FileNotFoundException</span><span class="token punctuation">(</span><span class="token string">"文件不存在"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>throws用于进行异常类的声明，若该方法可能有多种异常情况产生，那么在throws后面可以写多个异常类，用逗号隔开。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThrowsDemo2</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token function">read</span><span class="token punctuation">(</span><span class="token string">"a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">read</span><span class="token punctuation">(</span>String path<span class="token punctuation">)</span><span class="token keyword">throws</span> FileNotFoundException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>path<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//如果不是 a.txt这个文件 </span>            <span class="token comment" spellcheck="true">// 我假设  如果不是 a.txt 认为 该文件不存在 是一个错误 也就是异常  throw</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">FileNotFoundException</span><span class="token punctuation">(</span><span class="token string">"文件不存在"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>path<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"b.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IOException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="2-4-捕获异常try…catch"><a href="#2-4-捕获异常try…catch" class="headerlink" title="2.4  捕获异常try…catch"></a>2.4  捕获异常try…catch</h2><p>如果异常出现的话,会立刻终止程序,所以我们得处理异常:</p><ol><li>该方法不处理,而是声明抛出,由该方法的调用者来处理(throws)。</li><li>在方法中使用try-catch的语句块来处理异常。</li></ol><p><strong>try-catch</strong>的方式就是捕获异常。</p><ul><li><strong>捕获异常</strong>：Java中对异常有针对性的语句进行捕获，可以对出现的异常进行指定方式的处理。</li></ul><p>捕获异常语法如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">try</span><span class="token punctuation">{</span>     编写可能会出现异常的代码<span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>异常类型  e<span class="token punctuation">)</span><span class="token punctuation">{</span>     处理异常的代码     <span class="token comment" spellcheck="true">//记录日志/打印异常信息/继续抛出异常</span><span class="token punctuation">}</span></code></pre><p><strong>try：</strong>该代码块中编写可能产生异常的代码。</p><p><strong>catch：</strong>用来进行某种异常的捕获，实现对捕获到的异常进行处理。</p><blockquote><p>注意:try和catch都不能单独使用,必须连用。</p></blockquote><p>演示如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TryCatchDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 当产生异常时，必须有处理方式。要么捕获，要么声明。</span>            <span class="token function">read</span><span class="token punctuation">(</span><span class="token string">"b.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 括号中需要定义什么呢？</span>              <span class="token comment" spellcheck="true">//try中抛出的是什么异常，在括号中就定义什么异常类型</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"over"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*     *     * 我们 当前的这个方法中 有异常  有编译期异常     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">read</span><span class="token punctuation">(</span>String path<span class="token punctuation">)</span> <span class="token keyword">throws</span> FileNotFoundException <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>path<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//如果不是 a.txt这个文件 </span>            <span class="token comment" spellcheck="true">// 我假设  如果不是 a.txt 认为 该文件不存在 是一个错误 也就是异常  throw</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">FileNotFoundException</span><span class="token punctuation">(</span><span class="token string">"文件不存在"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>如何获取异常信息：</p><p>Throwable类中定义了一些查看方法:</p><ul><li><code>public String getMessage()</code>:获取异常的描述信息,原因(提示给用户的时候,就提示错误原因。</li></ul><ul><li><code>public String toString()</code>:获取异常的类型和异常描述信息(不用)。</li><li><code>public void printStackTrace()</code>:打印异常的跟踪栈信息并输出到控制台。</li></ul><p>​            <em>包含了异常的类型,异常的原因,还包括异常出现的位置,在开发和调试阶段,都得使用printStackTrace。</em></p><h2 id="2-4-finally-代码块"><a href="#2-4-finally-代码块" class="headerlink" title="2.4 finally 代码块"></a>2.4 finally 代码块</h2><p><strong>finally</strong>：有一些特定的代码无论异常是否发生，都需要执行。另外，因为异常会引发程序跳转，导致有些语句执行不到。而finally就是解决这个问题的，在finally代码块中存放的代码都是一定会被执行的。</p><p>什么时候的代码必须最终执行？</p><p>当我们在try语句块中打开了一些物理资源(磁盘文件/网络连接/数据库连接等),我们都得在使用完之后,最终关闭打开的资源。</p><p>finally的语法:</p><p> try…catch….finally:自身需要处理异常,最终还得关闭资源。</p><blockquote><p>注意:finally不能单独使用。</p></blockquote><p>比如在我们之后学习的IO流中，当打开了一个关联文件的资源，最后程序不管结果如何，都需要把这个资源关闭掉。</p><p>finally代码参考如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TryCatchDemo4</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token function">read</span><span class="token punctuation">(</span><span class="token string">"a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//抓取到的是编译期异常  抛出去的是运行期 </span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"不管程序怎样，这里都将会被执行。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"over"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*     *     * 我们 当前的这个方法中 有异常  有编译期异常     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">read</span><span class="token punctuation">(</span>String path<span class="token punctuation">)</span> <span class="token keyword">throws</span> FileNotFoundException <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>path<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//如果不是 a.txt这个文件 </span>            <span class="token comment" spellcheck="true">// 我假设  如果不是 a.txt 认为 该文件不存在 是一个错误 也就是异常  throw</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">FileNotFoundException</span><span class="token punctuation">(</span><span class="token string">"文件不存在"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>当只有在try或者catch中调用退出JVM的相关方法,此时finally才不会执行,否则finally永远会执行。</p></blockquote><p><img src="img%5C%E6%AD%BB%E4%BA%86%E9%83%BD%E8%A6%81try.bmp"></p><h2 id="2-5-异常注意事项"><a href="#2-5-异常注意事项" class="headerlink" title="2.5   异常注意事项"></a>2.5   异常注意事项</h2><ul><li><p>多个异常使用捕获又该如何处理呢？</p><ol><li>多个异常分别处理。</li><li>多个异常一次捕获，多次处理。</li><li>多个异常一次捕获一次处理。</li></ol><p>一般我们是使用一次捕获多次处理方式，格式如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">try</span><span class="token punctuation">{</span>     编写可能会出现异常的代码<span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>异常类型A  e<span class="token punctuation">)</span><span class="token punctuation">{</span>  当<span class="token keyword">try</span>中出现A类型异常<span class="token punctuation">,</span>就用该<span class="token keyword">catch</span>来捕获<span class="token punctuation">.</span>     处理异常的代码     <span class="token comment" spellcheck="true">//记录日志/打印异常信息/继续抛出异常</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>异常类型B  e<span class="token punctuation">)</span><span class="token punctuation">{</span>  当<span class="token keyword">try</span>中出现B类型异常<span class="token punctuation">,</span>就用该<span class="token keyword">catch</span>来捕获<span class="token punctuation">.</span>     处理异常的代码     <span class="token comment" spellcheck="true">//记录日志/打印异常信息/继续抛出异常</span><span class="token punctuation">}</span></code></pre><blockquote><p>注意:这种异常处理方式，要求多个catch中的异常不能相同，并且若catch中的多个异常之间有子父类异常的关系，那么子类异常要求在上面的catch处理，父类异常在下面的catch处理。</p></blockquote></li><li><p>运行时异常被抛出可以不处理。即不捕获也不声明抛出。</p></li><li><p>如果finally有return语句,永远返回finally中的结果,避免该情况. </p></li><li><p>如果父类抛出了多个异常,子类重写父类方法时,抛出和父类相同的异常或者是父类异常的子类或者不抛出异常。</p></li><li><p>父类方法没有抛出异常，子类重写父类该方法时也不可抛出异常。此时子类产生该异常，只能捕获处理，不能声明抛出</p></li></ul><h1 id="第三章-自定义异常"><a href="#第三章-自定义异常" class="headerlink" title="第三章 自定义异常"></a>第三章 自定义异常</h1><h2 id="3-1-概述"><a href="#3-1-概述" class="headerlink" title="3.1 概述"></a>3.1 概述</h2><p><strong>为什么需要自定义异常类:</strong></p><p>我们说了Java中不同的异常类,分别表示着某一种具体的异常情况,那么在开发中总是有些异常情况是SUN没有定义好的,此时我们根据自己业务的异常情况来定义异常类。例如年龄负数问题,考试成绩负数问题等等。</p><p>在上述代码中，发现这些异常都是JDK内部定义好的，但是实际开发中也会出现很多异常,这些异常很可能在JDK中没有定义过,例如年龄负数问题,考试成绩负数问题.那么能不能自己定义异常呢？</p><p><strong>什么是自定义异常类:</strong></p><p>在开发中根据自己业务的异常情况来定义异常类.</p><p>自定义一个业务逻辑异常: <strong>RegisterException</strong>。一个注册异常类。</p><p><strong>异常类如何定义:</strong></p><ol><li>自定义一个编译期异常: 自定义类 并继承于<code>java.lang.Exception</code>。</li><li>自定义一个运行时期的异常类:自定义类 并继承于<code>java.lang.RuntimeException</code>。</li></ol><h2 id="3-2-自定义异常的练习"><a href="#3-2-自定义异常的练习" class="headerlink" title="3.2 自定义异常的练习"></a>3.2 自定义异常的练习</h2><p>要求：我们模拟注册操作，如果用户名已存在，则抛出异常并提示：亲，该用户名已经被注册。</p><p>首先定义一个登陆异常类RegisterException：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 业务逻辑异常</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RegisterException</span> <span class="token keyword">extends</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 空参构造     */</span>    <span class="token keyword">public</span> <span class="token function">RegisterException</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     *     * @param message 表示异常提示     */</span>    <span class="token keyword">public</span> <span class="token function">RegisterException</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>模拟登陆操作，使用数组模拟数据库中存储的数据，并提供当前注册账号是否存在方法用于判断。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 模拟数据库中已存在账号</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> names <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"bill"</span><span class="token punctuation">,</span><span class="token string">"hill"</span><span class="token punctuation">,</span><span class="token string">"jill"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>       <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token comment" spellcheck="true">//调用方法</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">// 可能出现异常的代码</span>            <span class="token function">checkUsername</span><span class="token punctuation">(</span><span class="token string">"nill"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"注册成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果没有异常就是注册成功</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>RegisterException e<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//处理异常</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//判断当前注册账号是否存在</span>    <span class="token comment" spellcheck="true">//因为是编译期异常，又想调用者去处理 所以声明该异常</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">checkUsername</span><span class="token punctuation">(</span>String uname<span class="token punctuation">)</span> <span class="token keyword">throws</span> LoginException<span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String name <span class="token operator">:</span> names<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>uname<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//如果名字在这里面 就抛出登陆异常</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RegisterException</span><span class="token punctuation">(</span><span class="token string">"亲"</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">"已经被注册了！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="第四章-多线程"><a href="#第四章-多线程" class="headerlink" title="第四章 多线程"></a>第四章 多线程</h1><p>我们在之前，学习的程序在没有跳转语句的前提下，都是由上至下依次执行，那现在想要设计一个程序，边打游戏边听歌，怎么设计？</p><p>要解决上述问题,咱们得使用多进程或者多线程来解决.</p><h2 id="4-1-并发与并行"><a href="#4-1-并发与并行" class="headerlink" title="4.1 并发与并行"></a>4.1 并发与并行</h2><ul><li><strong>并发</strong>：指两个或多个事件在<strong>同一个时间段内</strong>发生。</li><li><strong>并行</strong>：指两个或多个事件在<strong>同一时刻</strong>发生（同时发生）。</li></ul><p><img src="img%5C%E5%B9%B6%E8%A1%8C%E4%B8%8E%E5%B9%B6%E5%8F%91.bmp"></p><p>在操作系统中，安装了多个程序，并发指的是在一段时间内宏观上有多个程序同时运行，这在单 CPU 系统中，每一时刻只能有一道程序执行，即微观上这些程序是分时的交替运行，只不过是给人的感觉是同时运行，那是因为分时交替运行的时间是非常短的。</p><p>而在多个 CPU 系统中，则这些可以并发执行的程序便可以分配到多个处理器上（CPU），实现多任务并行执行，即利用每个处理器来处理一个可以并发执行的程序，这样多个程序便可以同时执行。目前电脑市场上说的多核 CPU，便是多核处理器，核 越多，并行处理的程序越多，能大大的提高电脑运行的效率。</p><blockquote><p>注意：单核处理器的计算机肯定是不能并行的处理多个任务的，只能是多个任务在单个CPU上并发运行。同理,线程也是一样的，从宏观角度上理解线程是并行运行的，但是从微观角度上分析却是串行运行的，即一个线程一个线程的去运行，当系统只有一个CPU时，线程会以某种顺序执行多个线程，我们把这种情况称之为线程调度。</p></blockquote><h2 id="4-2-线程与进程"><a href="#4-2-线程与进程" class="headerlink" title="4.2 线程与进程"></a>4.2 线程与进程</h2><ul><li><p><strong>进程</strong>：是指一个内存中运行的应用程序，每个进程都有一个独立的内存空间，一个应用程序可以同时运行多个进程；进程也是程序的一次执行过程，是系统运行程序的基本单位；系统运行一个程序即是一个进程从创建、运行到消亡的过程。</p></li><li><p><strong>线程</strong>：线程是进程中的一个执行单元，负责当前进程中程序的执行，一个进程中至少有一个线程。一个进程中是可以有多个线程的，这个应用程序也可以称之为多线程程序。 </p><p>简而言之：一个程序运行后至少有一个进程，一个进程中可以包含多个线程 </p></li></ul><p>我们可以再电脑底部任务栏，右键—–&gt;打开任务管理器,可以查看当前任务的进程：</p><p><strong>进程</strong></p><p><img src="img%5C%E8%BF%9B%E7%A8%8B%E6%A6%82%E5%BF%B5.png"></p><p><strong>线程</strong></p><p><img src="img%5C%E7%BA%BF%E7%A8%8B%E6%A6%82%E5%BF%B5.png"></p><p><strong>线程调度:</strong></p><ul><li><p>分时调度</p><p>所有线程轮流使用 CPU 的使用权，平均分配每个线程占用 CPU 的时间。</p></li><li><p>抢占式调度</p><p>优先让优先级高的线程使用 CPU，如果线程的优先级相同，那么会随机选择一个(线程随机性)，Java使用的为抢占式调度。</p><ul><li>设置线程的优先级</li></ul><p><img src="img/%E8%AE%BE%E7%BD%AE%E7%BA%BF%E7%A8%8B%E4%BC%98%E5%85%88%E7%BA%A7.bmp" alt="设置线程优先级"></p><ul><li><p>抢占式调度详解</p><p>大部分操作系统都支持多进程并发运行，现在的操作系统几乎都支持同时运行多个程序。比如：现在我们上课一边使用编辑器，一边使用录屏软件，同时还开着画图板，dos窗口等软件。此时，这些程序是在同时运行，”感觉这些软件好像在同一时刻运行着“。</p><p>实际上，CPU(中央处理器)使用抢占式调度模式在多个线程间进行着高速的切换。对于CPU的一个核而言，某个时刻，只能执行一个线程，而 CPU的在多个线程间切换速度相对我们的感觉要快，看上去就是在同一时刻运行。<br>其实，多线程程序并不能提高程序的运行速度，但能够提高程序运行效率，让CPU的使用率更高。</p><p><img src="img/%E6%8A%A2%E5%8D%A0%E5%BC%8F%E8%B0%83%E5%BA%A6.bmp" alt="抢占式调度"></p></li></ul></li></ul><h2 id="4-3-创建线程类"><a href="#4-3-创建线程类" class="headerlink" title="4.3 创建线程类"></a>4.3 创建线程类</h2><p>Java使用<code>java.lang.Thread</code>类代表<strong>线程</strong>，所有的线程对象都必须是Thread类或其子类的实例。每个线程的作用是完成一定的任务，实际上就是执行一段程序流即一段顺序执行的代码。Java使用线程执行体来代表这段程序流。Java中通过继承Thread类来<strong>创建</strong>并<strong>启动多线程</strong>的步骤如下：</p><ol><li>定义Thread类的子类，并重写该类的run()方法，该run()方法的方法体就代表了线程需要完成的任务,因此把run()方法称为线程执行体。</li><li>创建Thread子类的实例，即创建了线程对象</li><li>调用线程对象的start()方法来启动该线程</li></ol><p>代码如下：</p><p>测试类：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建自定义线程对象</span>        MyThread mt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token string">"新的线程！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//开启新线程</span>        mt<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//在主方法中执行for循环</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"main线程！"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>自定义线程类：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//定义指定线程名称的构造方法</span>    <span class="token keyword">public</span> <span class="token function">MyThread</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//调用父类的String参数的构造方法，指定线程的名称</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 重写run方法，完成该线程执行的逻辑     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"：正在执行！"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="form-www-itcast-com"><a href="#form-www-itcast-com" class="headerlink" title="form  www.itcast.com"></a>form  <a href="http://www.itcast.com/">www.itcast.com</a></h3>]]></content>
      
      
      <categories>
          
          <category> 异常、线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向对象之多态性概述</title>
      <link href="2020/08/02/mian-xiang-dui-xiang-zhi-duo-tai-xing-gai-shu/"/>
      <url>2020/08/02/mian-xiang-dui-xiang-zhi-duo-tai-xing-gai-shu/</url>
      
        <content type="html"><![CDATA[<h2 id="面向对象三大特征-封装性、继承性、多态性。"><a href="#面向对象三大特征-封装性、继承性、多态性。" class="headerlink" title="面向对象三大特征:封装性、继承性、多态性。"></a>面向对象三大特征:封装性、继承性、多态性。</h2><ul><li>extends继承或者implements实现，是多态性的前提。</li></ul><a id="more"></a><p>举例：</p><ul><li><p>小明是一个学生，但同时也是一个人</p><ul><li>学生：学生形态</li><li>人： 人类形态</li></ul></li></ul><p>小明是一个对象，<br>这个对象既有学生形态，也有人类形态。<br>一个对象拥有多种形态，这就是:<br>对象的多态性。</p><p>代码当中体现多态性。其实就是一句话: 父类引用指向子类对象。</p><ul><li><p>格式:</p><ul><li> <code>父类名称对象名= new 子类名称();</code></li></ul></li><li><p>或者:</p><ul><li><code>接口名称对象名= new 实现类名称();</code></li></ul></li></ul><p>访问成员变量的两种方式:</p><ul><li>1.直接通过对象名称访问成员变量:看等号左边是谁，优先用谁，没有则向上找</li><li>2.间接通过成员方法访问成员变量:看该方法属于谁，优先用谁，没有则向上找。</li></ul><ul><li>口诀:<ul><li>编译看左边，运行看右边。</li></ul></li><li>对比:<ul><li>成员变量:编译看左边，运行还看左边。</li><li>成员方法。编译看左边，运行看右边。</li></ul></li></ul><p>如何才能知道一个父类引用的对象。 本来是什么子类?</p><ul><li>格式:</li><li><code>对象 instanceof 类名称</code></li><li>这将会得到一个bool ean值结果，也就是判断前面的对象能不能当做后面类型的实例。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 多态性 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL学习笔记</title>
      <link href="2020/08/01/mysql-xue-xi-bi-ji/"/>
      <url>2020/08/01/mysql-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL学习笔记"><a href="#MySQL学习笔记" class="headerlink" title="MySQL学习笔记"></a>MySQL学习笔记</h1><h2 id="登录和退出MySQL服务器"><a href="#登录和退出MySQL服务器" class="headerlink" title="登录和退出MySQL服务器"></a>登录和退出MySQL服务器</h2><pre class=" language-shell"><code class="language-shell"># 登录MySQL$ mysql -u root -p12345612# 退出MySQL数据库服务器exit;</code></pre><a id="more"></a><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><pre class=" language-mysql"><code class="language-mysql">-- 显示所有数据库show databases;-- 创建数据库CREATE DATABASE test;-- 切换数据库use test;-- 显示数据库中的所有表show tables;-- 创建数据表CREATE TABLE pet (    name VARCHAR(20),    owner VARCHAR(20),    species VARCHAR(20),    sex CHAR(1),    birth DATE,    death DATE);-- 查看数据表结构-- describe pet;desc pet;-- 查询表SELECT * from pet;-- 插入数据INSERT INTO pet VALUES ('puffball', 'Diane', 'hamster', 'f', '1990-03-30', NULL);-- 修改数据UPDATE pet SET name = 'squirrel' where owner = 'Diane';-- 删除数据DELETE FROM pet where name = 'squirrel';-- 删除表DROP TABLE myorder;</code></pre><h2 id="建表约束"><a href="#建表约束" class="headerlink" title="建表约束"></a>建表约束</h2><h3 id="主键约束"><a href="#主键约束" class="headerlink" title="主键约束"></a>主键约束</h3><pre class=" language-mysql"><code class="language-mysql">-- 主键约束-- 使某个字段不重复且不得为空，确保表内所有数据的唯一性。CREATE TABLE user (    id INT PRIMARY KEY,    name VARCHAR(20));-- 联合主键-- 联合主键中的每个字段都不能为空，并且加起来不能和已设置的联合主键重复。CREATE TABLE user (    id INT,    name VARCHAR(20),    password VARCHAR(20),    PRIMARY KEY(id, name));-- 自增约束-- 自增约束的主键由系统自动递增分配。CREATE TABLE user (    id INT PRIMARY KEY AUTO_INCREMENT,    name VARCHAR(20));-- 添加主键约束-- 如果忘记设置主键，还可以通过SQL语句设置（两种方式）：ALTER TABLE user ADD PRIMARY KEY(id);ALTER TABLE user MODIFY id INT PRIMARY KEY;-- 删除主键ALTER TABLE user drop PRIMARY KEY;</code></pre><h3 id="唯一主键"><a href="#唯一主键" class="headerlink" title="唯一主键"></a>唯一主键</h3><pre class=" language-mysql"><code class="language-mysql">-- 建表时创建唯一主键CREATE TABLE user (    id INT,    name VARCHAR(20),    UNIQUE(name));-- 添加唯一主键-- 如果建表时没有设置唯一建，还可以通过SQL语句设置（两种方式）：ALTER TABLE user ADD UNIQUE(name);ALTER TABLE user MODIFY name VARCHAR(20) UNIQUE;-- 删除唯一主键ALTER TABLE user DROP INDEX name;</code></pre><h3 id="非空约束"><a href="#非空约束" class="headerlink" title="非空约束"></a>非空约束</h3><pre class=" language-mysql"><code class="language-mysql">-- 建表时添加非空约束-- 约束某个字段不能为空CREATE TABLE user (    id INT,    name VARCHAR(20) NOT NULL);-- 移除非空约束ALTER TABLE user MODIFY name VARCHAR(20);</code></pre><h3 id="默认约束"><a href="#默认约束" class="headerlink" title="默认约束"></a>默认约束</h3><pre class=" language-mysql"><code class="language-mysql">-- 建表时添加默认约束-- 约束某个字段的默认值CREATE TABLE user2 (    id INT,    name VARCHAR(20),    age INT DEFAULT 10);-- 移除非空约束ALTER TABLE user MODIFY age INT;</code></pre><h3 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h3><pre class=" language-mysql"><code class="language-mysql">-- 班级CREATE TABLE classes (    id INT PRIMARY KEY,    name VARCHAR(20));-- 学生表CREATE TABLE students (    id INT PRIMARY KEY,    name VARCHAR(20),    -- 这里的 class_id 要和 classes 中的 id 字段相关联    class_id INT,    -- 表示 class_id 的值必须来自于 classes 中的 id 字段值    FOREIGN KEY(class_id) REFERENCES classes(id));-- 1. 主表（父表）classes 中没有的数据值，在副表（子表）students 中，是不可以使用的；-- 2. 主表中的记录被副表引用时，主表不可以被删除。</code></pre><h2 id="数据库的三大设计范式"><a href="#数据库的三大设计范式" class="headerlink" title="数据库的三大设计范式"></a>数据库的三大设计范式</h2><h3 id="1NF"><a href="#1NF" class="headerlink" title="1NF"></a>1NF</h3><p>只要字段值还可以继续拆分，就不满足第一范式。</p><p>范式设计得越详细，对某些实际操作可能会更好，但并非都有好处，需要对项目的实际情况进行设定。</p><h3 id="2NF"><a href="#2NF" class="headerlink" title="2NF"></a>2NF</h3><p>在满足第一范式的前提下，其他列都必须完全依赖于主键列。如果出现不完全依赖，只可能发生在联合主键的情况下：</p><pre class=" language-mysql"><code class="language-mysql">-- 订单表CREATE TABLE myorder (    product_id INT,    customer_id INT,    product_name VARCHAR(20),    customer_name VARCHAR(20),    PRIMARY KEY (product_id, customer_id));</code></pre><p>实际上，在这张订单表中，<code>product_name</code> 只依赖于 <code>product_id</code> ，<code>customer_name</code> 只依赖于 <code>customer_id</code> 。也就是说，<code>product_name</code> 和 <code>customer_id</code> 是没用关系的，<code>customer_name</code> 和 <code>product_id</code> 也是没有关系的。</p><p>这就不满足第二范式：其他列都必须完全依赖于主键列！</p><pre class=" language-mysql"><code class="language-mysql">CREATE TABLE myorder (    order_id INT PRIMARY KEY,    product_id INT,    customer_id INT);CREATE TABLE product (    id INT PRIMARY KEY,    name VARCHAR(20));CREATE TABLE customer (    id INT PRIMARY KEY,    name VARCHAR(20));</code></pre><p>拆分之后，<code>myorder</code> 表中的 <code>product_id</code> 和 <code>customer_id</code> 完全依赖于 <code>order_id</code> 主键，而 <code>product</code> 和 <code>customer</code> 表中的其他字段又完全依赖于主键。满足了第二范式的设计！</p><h3 id="3NF"><a href="#3NF" class="headerlink" title="3NF"></a>3NF</h3><p>在满足第二范式的前提下，除了主键列之外，其他列之间不能有传递依赖关系。</p><pre class=" language-mysql"><code class="language-mysql">CREATE TABLE myorder (    order_id INT PRIMARY KEY,    product_id INT,    customer_id INT,    customer_phone VARCHAR(15));</code></pre><p>表中的 <code>customer_phone</code> 有可能依赖于 <code>order_id</code> 、 <code>customer_id</code> 两列，也就不满足了第三范式的设计：其他列之间不能有传递依赖关系。</p><pre class=" language-mysql"><code class="language-mysql">CREATE TABLE myorder (    order_id INT PRIMARY KEY,    product_id INT,    customer_id INT);CREATE TABLE customer (    id INT PRIMARY KEY,    name VARCHAR(20),    phone VARCHAR(15));</code></pre><p>修改后就不存在其他列之间的传递依赖关系，其他列都只依赖于主键列，满足了第三范式的设计！</p><h2 id="查询练习"><a href="#查询练习" class="headerlink" title="查询练习"></a>查询练习</h2><h3 id="准备数据"><a href="#准备数据" class="headerlink" title="准备数据"></a>准备数据</h3><pre class=" language-mysql"><code class="language-mysql">-- 创建数据库CREATE DATABASE select_test;-- 切换数据库USE select_test;-- 创建学生表CREATE TABLE student (    no VARCHAR(20) PRIMARY KEY,    name VARCHAR(20) NOT NULL,    sex VARCHAR(10) NOT NULL,    birthday DATE, -- 生日    class VARCHAR(20) -- 所在班级);-- 创建教师表CREATE TABLE teacher (    no VARCHAR(20) PRIMARY KEY,    name VARCHAR(20) NOT NULL,    sex VARCHAR(10) NOT NULL,    birthday DATE,    profession VARCHAR(20) NOT NULL, -- 职称    department VARCHAR(20) NOT NULL -- 部门);-- 创建课程表CREATE TABLE course (    no VARCHAR(20) PRIMARY KEY,    name VARCHAR(20) NOT NULL,    t_no VARCHAR(20) NOT NULL, -- 教师编号    -- 表示该 tno 来自于 teacher 表中的 no 字段值    FOREIGN KEY(t_no) REFERENCES teacher(no) );-- 成绩表CREATE TABLE score (    s_no VARCHAR(20) NOT NULL, -- 学生编号    c_no VARCHAR(20) NOT NULL, -- 课程号    degree DECIMAL,    -- 成绩    -- 表示该 s_no, c_no 分别来自于 student, course 表中的 no 字段值    FOREIGN KEY(s_no) REFERENCES student(no),        FOREIGN KEY(c_no) REFERENCES course(no),    -- 设置 s_no, c_no 为联合主键    PRIMARY KEY(s_no, c_no));-- 查看所有表SHOW TABLES;-- 添加学生表数据INSERT INTO student VALUES('101', '曾华', '男', '1977-09-01', '95033');INSERT INTO student VALUES('102', '匡明', '男', '1975-10-02', '95031');INSERT INTO student VALUES('103', '王丽', '女', '1976-01-23', '95033');INSERT INTO student VALUES('104', '李军', '男', '1976-02-20', '95033');INSERT INTO student VALUES('105', '王芳', '女', '1975-02-10', '95031');INSERT INTO student VALUES('106', '陆军', '男', '1974-06-03', '95031');INSERT INTO student VALUES('107', '王尼玛', '男', '1976-02-20', '95033');INSERT INTO student VALUES('108', '张全蛋', '男', '1975-02-10', '95031');INSERT INTO student VALUES('109', '赵铁柱', '男', '1974-06-03', '95031');-- 添加教师表数据INSERT INTO teacher VALUES('804', '李诚', '男', '1958-12-02', '副教授', '计算机系');INSERT INTO teacher VALUES('856', '张旭', '男', '1969-03-12', '讲师', '电子工程系');INSERT INTO teacher VALUES('825', '王萍', '女', '1972-05-05', '助教', '计算机系');INSERT INTO teacher VALUES('831', '刘冰', '女', '1977-08-14', '助教', '电子工程系');-- 添加课程表数据INSERT INTO course VALUES('3-105', '计算机导论', '825');INSERT INTO course VALUES('3-245', '操作系统', '804');INSERT INTO course VALUES('6-166', '数字电路', '856');INSERT INTO course VALUES('9-888', '高等数学', '831');-- 添加添加成绩表数据INSERT INTO score VALUES('103', '3-105', '92');INSERT INTO score VALUES('103', '3-245', '86');INSERT INTO score VALUES('103', '6-166', '85');INSERT INTO score VALUES('105', '3-105', '88');INSERT INTO score VALUES('105', '3-245', '75');INSERT INTO score VALUES('105', '6-166', '79');INSERT INTO score VALUES('109', '3-105', '76');INSERT INTO score VALUES('109', '3-245', '68');INSERT INTO score VALUES('109', '6-166', '81');-- 查看表结构SELECT * FROM course;SELECT * FROM score;SELECT * FROM student;SELECT * FROM teacher;</code></pre><h3 id="1-到-10"><a href="#1-到-10" class="headerlink" title="1 到 10"></a>1 到 10</h3><pre class=" language-mysql"><code class="language-mysql">-- 查询 student 表的所有行SELECT * FROM student;-- 查询 student 表中的 name、sex 和 class 字段的所有行SELECT name, sex, class FROM student;-- 查询 teacher 表中不重复的 department 列-- department: 去重查询SELECT DISTINCT department FROM teacher;-- 查询 score 表中成绩在60-80之间的所有行（区间查询和运算符查询）-- BETWEEN xx AND xx: 查询区间, AND 表示 "并且"SELECT * FROM score WHERE degree BETWEEN 60 AND 80;SELECT * FROM score WHERE degree > 60 AND degree < 80;-- 查询 score 表中成绩为 85, 86 或 88 的行-- IN: 查询规定中的多个值SELECT * FROM score WHERE degree IN (85, 86, 88);-- 查询 student 表中 '95031' 班或性别为 '女' 的所有行-- or: 表示或者关系SELECT * FROM student WHERE class = '95031' or sex = '女';-- 以 class 降序的方式查询 student 表的所有行-- DESC: 降序，从高到低-- ASC（默认）: 升序，从低到高SELECT * FROM student ORDER BY class DESC;SELECT * FROM student ORDER BY class ASC;-- 以 c_no 升序、degree 降序查询 score 表的所有行SELECT * FROM score ORDER BY c_no ASC, degree DESC;-- 查询 "95031" 班的学生人数-- COUNT: 统计SELECT COUNT(*) FROM student WHERE class = '95031';-- 查询 score 表中的最高分的学生学号和课程编号（子查询或排序查询）。-- (SELECT MAX(degree) FROM score): 子查询，算出最高分SELECT s_no, c_no FROM score WHERE degree = (SELECT MAX(degree) FROM score);--  排序查询-- LIMIT r, n: 表示从第r行开始，查询n条数据SELECT s_no, c_no, degree FROM score ORDER BY degree DESC LIMIT 0, 1;</code></pre><h3 id="分组计算平均成绩"><a href="#分组计算平均成绩" class="headerlink" title="分组计算平均成绩"></a>分组计算平均成绩</h3><p><strong>查询每门课的平均成绩。</strong></p><pre class=" language-mysql"><code class="language-mysql">-- AVG: 平均值SELECT AVG(degree) FROM score WHERE c_no = '3-105';SELECT AVG(degree) FROM score WHERE c_no = '3-245';SELECT AVG(degree) FROM score WHERE c_no = '6-166';-- GROUP BY: 分组查询SELECT c_no, AVG(degree) FROM score GROUP BY c_no;</code></pre><h3 id="分组条件与模糊查询"><a href="#分组条件与模糊查询" class="headerlink" title="分组条件与模糊查询"></a>分组条件与模糊查询</h3><p><strong>查询 <code>score</code> 表中至少有 2 名学生选修，并以 3 开头的课程的平均分数。</strong></p><pre class=" language-mysql"><code class="language-mysql">SELECT * FROM score;-- c_no 课程编号+------+-------+--------+| s_no | c_no  | degree |+------+-------+--------+| 103  | 3-105 |     92 || 103  | 3-245 |     86 || 103  | 6-166 |     85 || 105  | 3-105 |     88 || 105  | 3-245 |     75 || 105  | 6-166 |     79 || 109  | 3-105 |     76 || 109  | 3-245 |     68 || 109  | 6-166 |     81 |+------+-------+--------+</code></pre><p>分析表发现，至少有 2 名学生选修的课程是 <code>3-105</code> 、<code>3-245</code> 、<code>6-166</code> ，以 3 开头的课程是 <code>3-105</code> 、<code>3-245</code> 。也就是说，我们要查询所有 <code>3-105</code> 和 <code>3-245</code> 的 <code>degree</code> 平均分。</p><pre class=" language-mysql"><code class="language-mysql">-- 首先把 c_no, AVG(degree) 通过分组查询出来SELECT c_no, AVG(degree) FROM score GROUP BY c_no+-------+-------------+| c_no  | AVG(degree) |+-------+-------------+| 3-105 |     85.3333 || 3-245 |     76.3333 || 6-166 |     81.6667 |+-------+-------------+-- 再查询出至少有 2 名学生选修的课程-- HAVING: 表示持有HAVING COUNT(c_no) >= 2-- 并且是以 3 开头的课程-- LIKE 表示模糊查询，"%" 是一个通配符，匹配 "3" 后面的任意字符。AND c_no LIKE '3%';-- 把前面的SQL语句拼接起来，-- 后面加上一个 COUNT(*)，表示将每个分组的个数也查询出来。SELECT c_no, AVG(degree), COUNT(*) FROM score GROUP BY c_noHAVING COUNT(c_no) >= 2 AND c_no LIKE '3%';+-------+-------------+----------+| c_no  | AVG(degree) | COUNT(*) |+-------+-------------+----------+| 3-105 |     85.3333 |        3 || 3-245 |     76.3333 |        3 |+-------+-------------+----------+</code></pre><h3 id="多表查询-1"><a href="#多表查询-1" class="headerlink" title="多表查询 - 1"></a>多表查询 - 1</h3><p><strong>查询所有学生的 <code>name</code>，以及该学生在 <code>score</code> 表中对应的 <code>c_no</code> 和 <code>degree</code> 。</strong></p><pre class=" language-mysql"><code class="language-mysql">SELECT no, name FROM student;+-----+-----------+| no  | name      |+-----+-----------+| 101 | 曾华      || 102 | 匡明      || 103 | 王丽      || 104 | 李军      || 105 | 王芳      || 106 | 陆军      || 107 | 王尼玛    || 108 | 张全蛋    || 109 | 赵铁柱    |+-----+-----------+SELECT s_no, c_no, degree FROM score;+------+-------+--------+| s_no | c_no  | degree |+------+-------+--------+| 103  | 3-105 |     92 || 103  | 3-245 |     86 || 103  | 6-166 |     85 || 105  | 3-105 |     88 || 105  | 3-245 |     75 || 105  | 6-166 |     79 || 109  | 3-105 |     76 || 109  | 3-245 |     68 || 109  | 6-166 |     81 |+------+-------+--------+</code></pre><p>通过分析可以发现，只要把 <code>score</code> 表中的 <code>s_no</code> 字段值替换成 <code>student</code> 表中对应的 <code>name</code> 字段值就可以了，如何做呢？</p><pre class=" language-mysql"><code class="language-mysql">-- FROM...: 表示从 student, score 表中查询-- WHERE 的条件表示为，只有在 student.no 和 score.s_no 相等时才显示出来。SELECT name, c_no, degree FROM student, score WHERE student.no = score.s_no;+-----------+-------+--------+| name      | c_no  | degree |+-----------+-------+--------+| 王丽      | 3-105 |     92 || 王丽      | 3-245 |     86 || 王丽      | 6-166 |     85 || 王芳      | 3-105 |     88 || 王芳      | 3-245 |     75 || 王芳      | 6-166 |     79 || 赵铁柱    | 3-105 |     76 || 赵铁柱    | 3-245 |     68 || 赵铁柱    | 6-166 |     81 |+-----------+-------+--------+</code></pre><h3 id="多表查询-2"><a href="#多表查询-2" class="headerlink" title="多表查询 - 2"></a>多表查询 - 2</h3><p><strong>查询所有学生的 <code>no</code> 、课程名称 ( <code>course</code> 表中的 <code>name</code> ) 和成绩 ( <code>score</code> 表中的 <code>degree</code> ) 列。</strong></p><p>只有 <code>score</code> 关联学生的 <code>no</code> ，因此只要查询 <code>score</code> 表，就能找出所有和学生相关的 <code>no</code> 和 <code>degree</code> ：</p><pre class=" language-mysql"><code class="language-mysql">SELECT s_no, c_no, degree FROM score;+------+-------+--------+| s_no | c_no  | degree |+------+-------+--------+| 103  | 3-105 |     92 || 103  | 3-245 |     86 || 103  | 6-166 |     85 || 105  | 3-105 |     88 || 105  | 3-245 |     75 || 105  | 6-166 |     79 || 109  | 3-105 |     76 || 109  | 3-245 |     68 || 109  | 6-166 |     81 |+------+-------+--------+</code></pre><p>然后查询 <code>course</code> 表：</p><pre class=" language-mysql"><code class="language-mysql">+-------+-----------------+| no    | name            |+-------+-----------------+| 3-105 | 计算机导论      || 3-245 | 操作系统        || 6-166 | 数字电路        || 9-888 | 高等数学        |+-------+-----------------+</code></pre><p>只要把 <code>score</code> 表中的 <code>c_no</code> 替换成 <code>course</code> 表中对应的 <code>name</code> 字段值就可以了。</p><pre class=" language-mysql"><code class="language-mysql">-- 增加一个查询字段 name，分别从 score、course 这两个表中查询。-- as 表示取一个该字段的别名。SELECT s_no, name as c_name, degree FROM score, courseWHERE score.c_no = course.no;+------+-----------------+--------+| s_no | c_name          | degree |+------+-----------------+--------+| 103  | 计算机导论      |     92 || 105  | 计算机导论      |     88 || 109  | 计算机导论      |     76 || 103  | 操作系统        |     86 || 105  | 操作系统        |     75 || 109  | 操作系统        |     68 || 103  | 数字电路        |     85 || 105  | 数字电路        |     79 || 109  | 数字电路        |     81 |+------+-----------------+--------+</code></pre><h3 id="三表关联查询"><a href="#三表关联查询" class="headerlink" title="三表关联查询"></a>三表关联查询</h3><p><strong>查询所有学生的 <code>name</code> 、课程名 ( <code>course</code> 表中的 <code>name</code> ) 和 <code>degree</code> 。</strong></p><p>只有 <code>score</code> 表中关联学生的学号和课堂号，我们只要围绕着 <code>score</code> 这张表查询就好了。</p><pre class=" language-mysql"><code class="language-mysql">SELECT * FROM score;+------+-------+--------+| s_no | c_no  | degree |+------+-------+--------+| 103  | 3-105 |     92 || 103  | 3-245 |     86 || 103  | 6-166 |     85 || 105  | 3-105 |     88 || 105  | 3-245 |     75 || 105  | 6-166 |     79 || 109  | 3-105 |     76 || 109  | 3-245 |     68 || 109  | 6-166 |     81 |+------+-------+--------+</code></pre><p>只要把 <code>s_no</code> 和 <code>c_no</code> 替换成 <code>student</code> 和 <code>srouse</code> 表中对应的 <code>name</code> 字段值就好了。</p><p>首先把 <code>s_no</code> 替换成 <code>student</code> 表中的 <code>name</code> 字段：</p><pre class=" language-mysql"><code class="language-mysql">SELECT name, c_no, degree FROM student, score WHERE student.no = score.s_no;+-----------+-------+--------+| name      | c_no  | degree |+-----------+-------+--------+| 王丽      | 3-105 |     92 || 王丽      | 3-245 |     86 || 王丽      | 6-166 |     85 || 王芳      | 3-105 |     88 || 王芳      | 3-245 |     75 || 王芳      | 6-166 |     79 || 赵铁柱    | 3-105 |     76 || 赵铁柱    | 3-245 |     68 || 赵铁柱    | 6-166 |     81 |+-----------+-------+--------+</code></pre><p>再把 <code>c_no</code> 替换成 <code>course</code> 表中的 <code>name</code> 字段：</p><pre class=" language-mysql"><code class="language-mysql">-- 课程表SELECT no, name FROM course;+-------+-----------------+| no    | name            |+-------+-----------------+| 3-105 | 计算机导论      || 3-245 | 操作系统        || 6-166 | 数字电路        || 9-888 | 高等数学        |+-------+-----------------+-- 由于字段名存在重复，使用 "表名.字段名 as 别名" 代替。SELECT student.name as s_name, course.name as c_name, degree FROM student, score, courseWHERE student.NO = score.s_noAND score.c_no = course.no;</code></pre><h3 id="子查询加分组求平均分"><a href="#子查询加分组求平均分" class="headerlink" title="子查询加分组求平均分"></a>子查询加分组求平均分</h3><p><strong>查询 <code>95031</code> 班学生每门课程的平均成绩。</strong></p><p>在 <code>score</code> 表中根据 <code>student</code>  表的学生编号筛选出学生的课堂号和成绩：</p><pre class=" language-mysql"><code class="language-mysql">-- IN (..): 将筛选出的学生号当做 s_no 的条件查询SELECT s_no, c_no, degree FROM scoreWHERE s_no IN (SELECT no FROM student WHERE class = '95031');+------+-------+--------+| s_no | c_no  | degree |+------+-------+--------+| 105  | 3-105 |     88 || 105  | 3-245 |     75 || 105  | 6-166 |     79 || 109  | 3-105 |     76 || 109  | 3-245 |     68 || 109  | 6-166 |     81 |+------+-------+--------+</code></pre><p>这时只要将 <code>c_no</code> 分组一下就能得出 <code>95031</code> 班学生每门课的平均成绩：</p><pre class=" language-mysql"><code class="language-mysql">SELECT c_no, AVG(degree) FROM scoreWHERE s_no IN (SELECT no FROM student WHERE class = '95031')GROUP BY c_no;+-------+-------------+| c_no  | AVG(degree) |+-------+-------------+| 3-105 |     82.0000 || 3-245 |     71.5000 || 6-166 |     80.0000 |+-------+-------------+</code></pre><h3 id="子查询-1"><a href="#子查询-1" class="headerlink" title="子查询 - 1"></a>子查询 - 1</h3><p><strong>查询在 <code>3-105</code> 课程中，所有成绩高于 <code>109</code> 号同学的记录。</strong></p><p>首先筛选出课堂号为 <code>3-105</code> ，在找出所有成绩高于 <code>109</code> 号同学的的行。</p><pre class=" language-mysql"><code class="language-mysql">SELECT * FROM score WHERE c_no = '3-105'AND degree > (SELECT degree FROM score WHERE s_no = '109' AND c_no = '3-105');</code></pre><h3 id="子查询-2"><a href="#子查询-2" class="headerlink" title="子查询 - 2"></a>子查询 - 2</h3><p><strong>查询所有成绩高于 <code>109</code> 号同学的 <code>3-105</code> 课程成绩记录。</strong></p><pre class=" language-mysql"><code class="language-mysql">-- 不限制课程号，只要成绩大于109号同学的3-105课程成绩就可以。SELECT * FROM scoreWHERE degree > (SELECT degree FROM score WHERE s_no = '109' AND c_no = '3-105');</code></pre><h3 id="YEAR-函数与带-IN-关键字查询"><a href="#YEAR-函数与带-IN-关键字查询" class="headerlink" title="YEAR 函数与带 IN 关键字查询"></a>YEAR 函数与带 IN 关键字查询</h3><p><strong>查询所有和 <code>101</code> 、<code>108</code> 号学生同年出生的 <code>no</code> 、<code>name</code> 、<code>birthday</code> 列。</strong></p><pre class=" language-mysql"><code class="language-mysql">-- YEAR(..): 取出日期中的年份SELECT no, name, birthday FROM studentWHERE YEAR(birthday) IN (SELECT YEAR(birthday) FROM student WHERE no IN (101, 108));</code></pre><h3 id="多层嵌套子查询"><a href="#多层嵌套子查询" class="headerlink" title="多层嵌套子查询"></a>多层嵌套子查询</h3><p><strong>查询 <code>'张旭'</code> 教师任课的学生成绩表。</strong></p><p>首先找到教师编号：</p><pre class=" language-mysql"><code class="language-mysql">SELECT NO FROM teacher WHERE NAME = '张旭'</code></pre><p>通过 <code>sourse</code> 表找到该教师课程号：</p><pre class=" language-mysql"><code class="language-mysql">SELECT NO FROM course WHERE t_no = ( SELECT NO FROM teacher WHERE NAME = '张旭' );</code></pre><p>通过筛选出的课程号查询成绩表：</p><pre class=" language-mysql"><code class="language-mysql">SELECT * FROM score WHERE c_no = (    SELECT no FROM course WHERE t_no = (         SELECT no FROM teacher WHERE NAME = '张旭'     ));</code></pre><h3 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h3><p><strong>查询某选修课程多于5个同学的教师姓名。</strong></p><p>首先在 <code>teacher</code> 表中，根据 <code>no</code> 字段来判断该教师的同一门课程是否有至少5名学员选修：</p><pre class=" language-mysql"><code class="language-mysql">-- 查询 teacher 表SELECT no, name FROM teacher;+-----+--------+| no  | name   |+-----+--------+| 804 | 李诚   || 825 | 王萍   || 831 | 刘冰   || 856 | 张旭   |+-----+--------+SELECT name FROM teacher WHERE no IN (    -- 在这里找到对应的条件);</code></pre><p>查看和教师编号有有关的表的信息：</p><pre class=" language-mysql"><code class="language-mysql">SELECT * FROM course;-- t_no: 教师编号+-------+-----------------+------+| no    | name            | t_no |+-------+-----------------+------+| 3-105 | 计算机导论      | 825  || 3-245 | 操作系统        | 804  || 6-166 | 数字电路        | 856  || 9-888 | 高等数学        | 831  |+-------+-----------------+------+</code></pre><p>我们已经找到和教师编号有关的字段就在 <code>course</code> 表中，但是还无法知道哪门课程至少有5名学生选修，所以还需要根据 <code>score</code> 表来查询：</p><pre class=" language-mysql"><code class="language-mysql">-- 在此之前向 score 插入一些数据，以便丰富查询条件。INSERT INTO score VALUES ('101', '3-105', '90');INSERT INTO score VALUES ('102', '3-105', '91');INSERT INTO score VALUES ('104', '3-105', '89');-- 查询 score 表SELECT * FROM score;+------+-------+--------+| s_no | c_no  | degree |+------+-------+--------+| 101  | 3-105 |     90 || 102  | 3-105 |     91 || 103  | 3-105 |     92 || 103  | 3-245 |     86 || 103  | 6-166 |     85 || 104  | 3-105 |     89 || 105  | 3-105 |     88 || 105  | 3-245 |     75 || 105  | 6-166 |     79 || 109  | 3-105 |     76 || 109  | 3-245 |     68 || 109  | 6-166 |     81 |+------+-------+--------+-- 在 score 表中将 c_no 作为分组，并且限制 c_no 持有至少 5 条数据。SELECT c_no FROM score GROUP BY c_no HAVING COUNT(*) > 5;+-------+| c_no  |+-------+| 3-105 |+-------+</code></pre><p>根据筛选出来的课程号，找出在某课程中，拥有至少5名学员的教师编号：</p><pre class=" language-mysql"><code class="language-mysql">SELECT t_no FROM course WHERE no IN (    SELECT c_no FROM score GROUP BY c_no HAVING COUNT(*) > 5);+------+| t_no |+------+| 825  |+------+</code></pre><p>在 <code>teacher</code> 表中，根据筛选出来的教师编号找到教师姓名：</p><pre class=" language-mysql"><code class="language-mysql">SELECT name FROM teacher WHERE no IN (    -- 最终条件    SELECT t_no FROM course WHERE no IN (        SELECT c_no FROM score GROUP BY c_no HAVING COUNT(*) > 5    ));</code></pre><h3 id="子查询-3"><a href="#子查询-3" class="headerlink" title="子查询 - 3"></a>子查询 - 3</h3><p><strong>查询 “计算机系” 课程的成绩表。</strong></p><p>思路是，先找出 <code>course</code> 表中所有 <code>计算机系</code> 课程的编号，然后根据这个编号查询 <code>score</code> 表。</p><pre class=" language-mysql"><code class="language-mysql">-- 通过 teacher 表查询所有 `计算机系` 的教师编号SELECT no, name, department FROM teacher WHERE department = '计算机系'+-----+--------+--------------+| no  | name   | department   |+-----+--------+--------------+| 804 | 李诚   | 计算机系     || 825 | 王萍   | 计算机系     |+-----+--------+--------------+-- 通过 course 表查询该教师的课程编号SELECT no FROM course WHERE t_no IN (    SELECT no FROM teacher WHERE department = '计算机系');+-------+| no    |+-------+| 3-245 || 3-105 |+-------+-- 根据筛选出来的课程号查询成绩表SELECT * FROM score WHERE c_no IN (    SELECT no FROM course WHERE t_no IN (        SELECT no FROM teacher WHERE department = '计算机系'    ));+------+-------+--------+| s_no | c_no  | degree |+------+-------+--------+| 103  | 3-245 |     86 || 105  | 3-245 |     75 || 109  | 3-245 |     68 || 101  | 3-105 |     90 || 102  | 3-105 |     91 || 103  | 3-105 |     92 || 104  | 3-105 |     89 || 105  | 3-105 |     88 || 109  | 3-105 |     76 |+------+-------+--------+</code></pre><h3 id="UNION-和-NOTIN-的使用"><a href="#UNION-和-NOTIN-的使用" class="headerlink" title="UNION 和 NOTIN 的使用"></a>UNION 和 NOTIN 的使用</h3><p><strong>查询 <code>计算机系</code> 与 <code>电子工程系</code> 中的不同职称的教师。</strong></p><pre class=" language-mysql"><code class="language-mysql">-- NOT: 代表逻辑非SELECT * FROM teacher WHERE department = '计算机系' AND profession NOT IN (    SELECT profession FROM teacher WHERE department = '电子工程系')-- 合并两个集UNIONSELECT * FROM teacher WHERE department = '电子工程系' AND profession NOT IN (    SELECT profession FROM teacher WHERE department = '计算机系');</code></pre><h3 id="ANY-表示至少一个-DESC-降序"><a href="#ANY-表示至少一个-DESC-降序" class="headerlink" title="ANY 表示至少一个 - DESC ( 降序 )"></a>ANY 表示至少一个 - DESC ( 降序 )</h3><p><strong>查询课程 <code>3-105</code> 且成绩 <u>至少</u> 高于 <code>3-245</code> 的 <code>score</code> 表。</strong></p><pre class=" language-mysql"><code class="language-mysql">SELECT * FROM score WHERE c_no = '3-105';+------+-------+--------+| s_no | c_no  | degree |+------+-------+--------+| 101  | 3-105 |     90 || 102  | 3-105 |     91 || 103  | 3-105 |     92 || 104  | 3-105 |     89 || 105  | 3-105 |     88 || 109  | 3-105 |     76 |+------+-------+--------+SELECT * FROM score WHERE c_no = '3-245';+------+-------+--------+| s_no | c_no  | degree |+------+-------+--------+| 103  | 3-245 |     86 || 105  | 3-245 |     75 || 109  | 3-245 |     68 |+------+-------+--------+-- ANY: 符合SQL语句中的任意条件。-- 也就是说，在 3-105 成绩中，只要有一个大于从 3-245 筛选出来的任意行就符合条件，-- 最后根据降序查询结果。SELECT * FROM score WHERE c_no = '3-105' AND degree > ANY(    SELECT degree FROM score WHERE c_no = '3-245') ORDER BY degree DESC;+------+-------+--------+| s_no | c_no  | degree |+------+-------+--------+| 103  | 3-105 |     92 || 102  | 3-105 |     91 || 101  | 3-105 |     90 || 104  | 3-105 |     89 || 105  | 3-105 |     88 || 109  | 3-105 |     76 |+------+-------+--------+</code></pre><h3 id="表示所有的-ALL"><a href="#表示所有的-ALL" class="headerlink" title="表示所有的 ALL"></a>表示所有的 ALL</h3><p><strong>查询课程 <code>3-105</code> 且成绩高于 <code>3-245</code> 的 <code>score</code> 表。</strong></p><pre class=" language-mysql"><code class="language-mysql">-- 只需对上一道题稍作修改。-- ALL: 符合SQL语句中的所有条件。-- 也就是说，在 3-105 每一行成绩中，都要大于从 3-245 筛选出来全部行才算符合条件。SELECT * FROM score WHERE c_no = '3-105' AND degree > ALL(    SELECT degree FROM score WHERE c_no = '3-245');+------+-------+--------+| s_no | c_no  | degree |+------+-------+--------+| 101  | 3-105 |     90 || 102  | 3-105 |     91 || 103  | 3-105 |     92 || 104  | 3-105 |     89 || 105  | 3-105 |     88 |+------+-------+--------+</code></pre><h3 id="复制表的数据作为条件查询"><a href="#复制表的数据作为条件查询" class="headerlink" title="复制表的数据作为条件查询"></a>复制表的数据作为条件查询</h3><p><strong>查询某课程成绩比该课程平均成绩低的 <code>score</code> 表。</strong></p><pre class=" language-mysql"><code class="language-mysql">-- 查询平均分SELECT c_no, AVG(degree) FROM score GROUP BY c_no;+-------+-------------+| c_no  | AVG(degree) |+-------+-------------+| 3-105 |     87.6667 || 3-245 |     76.3333 || 6-166 |     81.6667 |+-------+-------------+-- 查询 score 表SELECT degree FROM score;+--------+| degree |+--------+|     90 ||     91 ||     92 ||     86 ||     85 ||     89 ||     88 ||     75 ||     79 ||     76 ||     68 ||     81 |+--------+-- 将表 b 作用于表 a 中查询数据-- score a (b): 将表声明为 a (b)，-- 如此就能用 a.c_no = b.c_no 作为条件执行查询了。SELECT * FROM score a WHERE degree < (    (SELECT AVG(degree) FROM score b WHERE a.c_no = b.c_no));+------+-------+--------+| s_no | c_no  | degree |+------+-------+--------+| 105  | 3-245 |     75 || 105  | 6-166 |     79 || 109  | 3-105 |     76 || 109  | 3-245 |     68 || 109  | 6-166 |     81 |+------+-------+--------+</code></pre><h3 id="子查询-4"><a href="#子查询-4" class="headerlink" title="子查询 - 4"></a>子查询 - 4</h3><p><strong>查询所有任课 ( 在 <code>course</code> 表里有课程 ) 教师的 <code>name</code> 和 <code>department</code></strong> 。</p><pre class=" language-mysql"><code class="language-mysql">SELECT name, department FROM teacher WHERE no IN (SELECT t_no FROM course);+--------+-----------------+| name   | department      |+--------+-----------------+| 李诚   | 计算机系        || 王萍   | 计算机系        || 刘冰   | 电子工程系      || 张旭   | 电子工程系      |+--------+-----------------+</code></pre><h3 id="条件加组筛选"><a href="#条件加组筛选" class="headerlink" title="条件加组筛选"></a>条件加组筛选</h3><p><strong>查询 <code>student</code> 表中至少有 2 名男生的 <code>class</code> 。</strong></p><pre class=" language-mysql"><code class="language-mysql">-- 查看学生表信息SELECT * FROM student;+-----+-----------+-----+------------+-------+| no  | name      | sex | birthday   | class |+-----+-----------+-----+------------+-------+| 101 | 曾华      | 男  | 1977-09-01 | 95033 || 102 | 匡明      | 男  | 1975-10-02 | 95031 || 103 | 王丽      | 女  | 1976-01-23 | 95033 || 104 | 李军      | 男  | 1976-02-20 | 95033 || 105 | 王芳      | 女  | 1975-02-10 | 95031 || 106 | 陆军      | 男  | 1974-06-03 | 95031 || 107 | 王尼玛    | 男  | 1976-02-20 | 95033 || 108 | 张全蛋    | 男  | 1975-02-10 | 95031 || 109 | 赵铁柱    | 男  | 1974-06-03 | 95031 || 110 | 张飞      | 男  | 1974-06-03 | 95038 |+-----+-----------+-----+------------+-------+-- 只查询性别为男，然后按 class 分组，并限制 class 行大于 1。SELECT class FROM student WHERE sex = '男' GROUP BY class HAVING COUNT(*) > 1;+-------+| class |+-------+| 95033 || 95031 |+-------+</code></pre><h3 id="NOTLIKE-模糊查询取反"><a href="#NOTLIKE-模糊查询取反" class="headerlink" title="NOTLIKE 模糊查询取反"></a>NOTLIKE 模糊查询取反</h3><p><strong>查询 <code>student</code> 表中不姓 “王” 的同学记录。</strong></p><pre class=" language-mysql"><code class="language-mysql">-- NOT: 取反-- LIKE: 模糊查询mysql> SELECT * FROM student WHERE name NOT LIKE '王%';+-----+-----------+-----+------------+-------+| no  | name      | sex | birthday   | class |+-----+-----------+-----+------------+-------+| 101 | 曾华      | 男  | 1977-09-01 | 95033 || 102 | 匡明      | 男  | 1975-10-02 | 95031 || 104 | 李军      | 男  | 1976-02-20 | 95033 || 106 | 陆军      | 男  | 1974-06-03 | 95031 || 108 | 张全蛋    | 男  | 1975-02-10 | 95031 || 109 | 赵铁柱    | 男  | 1974-06-03 | 95031 || 110 | 张飞      | 男  | 1974-06-03 | 95038 |+-----+-----------+-----+------------+-------+</code></pre><h3 id="YEAR-与-NOW-函数"><a href="#YEAR-与-NOW-函数" class="headerlink" title="YEAR 与 NOW 函数"></a>YEAR 与 NOW 函数</h3><p><strong>查询 <code>student</code> 表中每个学生的姓名和年龄。</strong></p><pre class=" language-mysql"><code class="language-mysql">-- 使用函数 YEAR(NOW()) 计算出当前年份，减去出生年份后得出年龄。SELECT name, YEAR(NOW()) - YEAR(birthday) as age FROM student;+-----------+------+| name      | age  |+-----------+------+| 曾华      |   42 || 匡明      |   44 || 王丽      |   43 || 李军      |   43 || 王芳      |   44 || 陆军      |   45 || 王尼玛    |   43 || 张全蛋    |   44 || 赵铁柱    |   45 || 张飞      |   45 |+-----------+------+</code></pre><h3 id="MAX-与-MIN-函数"><a href="#MAX-与-MIN-函数" class="headerlink" title="MAX 与 MIN 函数"></a>MAX 与 MIN 函数</h3><p><strong>查询 <code>student</code> 表中最大和最小的 <code>birthday</code> 值。</strong></p><pre class=" language-mysql"><code class="language-mysql">SELECT MAX(birthday), MIN(birthday) FROM student;+---------------+---------------+| MAX(birthday) | MIN(birthday) |+---------------+---------------+| 1977-09-01    | 1974-06-03    |+---------------+---------------+</code></pre><h3 id="多段排序"><a href="#多段排序" class="headerlink" title="多段排序"></a>多段排序</h3><p><strong>以 <code>class</code> 和 <code>birthday</code> 从大到小的顺序查询 <code>student</code> 表。</strong></p><pre class=" language-mysql"><code class="language-mysql">SELECT * FROM student ORDER BY class DESC, birthday;+-----+-----------+-----+------------+-------+| no  | name      | sex | birthday   | class |+-----+-----------+-----+------------+-------+| 110 | 张飞      | 男  | 1974-06-03 | 95038 || 103 | 王丽      | 女  | 1976-01-23 | 95033 || 104 | 李军      | 男  | 1976-02-20 | 95033 || 107 | 王尼玛    | 男  | 1976-02-20 | 95033 || 101 | 曾华      | 男  | 1977-09-01 | 95033 || 106 | 陆军      | 男  | 1974-06-03 | 95031 || 109 | 赵铁柱    | 男  | 1974-06-03 | 95031 || 105 | 王芳      | 女  | 1975-02-10 | 95031 || 108 | 张全蛋    | 男  | 1975-02-10 | 95031 || 102 | 匡明      | 男  | 1975-10-02 | 95031 |+-----+-----------+-----+------------+-------+</code></pre><h3 id="子查询-5"><a href="#子查询-5" class="headerlink" title="子查询 - 5"></a>子查询 - 5</h3><p><strong>查询 “男” 教师及其所上的课程。</strong></p><pre class=" language-mysql"><code class="language-mysql">SELECT * FROM course WHERE t_no in (SELECT no FROM teacher WHERE sex = '男');+-------+--------------+------+| no    | name         | t_no |+-------+--------------+------+| 3-245 | 操作系统     | 804  || 6-166 | 数字电路     | 856  |+-------+--------------+------+</code></pre><h3 id="MAX-函数与子查询"><a href="#MAX-函数与子查询" class="headerlink" title="MAX 函数与子查询"></a>MAX 函数与子查询</h3><p><strong>查询最高分同学的 <code>score</code> 表。</strong></p><pre class=" language-mysql"><code class="language-mysql">-- 找出最高成绩（该查询只能有一个结果）SELECT MAX(degree) FROM score;-- 根据上面的条件筛选出所有最高成绩表，-- 该查询可能有多个结果，假设 degree 值多次符合条件。SELECT * FROM score WHERE degree = (SELECT MAX(degree) FROM score);+------+-------+--------+| s_no | c_no  | degree |+------+-------+--------+| 103  | 3-105 |     92 |+------+-------+--------+</code></pre><h3 id="子查询-6"><a href="#子查询-6" class="headerlink" title="子查询 - 6"></a>子查询 - 6</h3><p><strong>查询和 “李军” 同性别的所有同学 <code>name</code> 。</strong></p><pre class=" language-mysql"><code class="language-mysql">-- 首先将李军的性别作为条件取出来SELECT sex FROM student WHERE name = '李军';+-----+| sex |+-----+| 男  |+-----+-- 根据性别查询 name 和 sexSELECT name, sex FROM student WHERE sex = (    SELECT sex FROM student WHERE name = '李军');+-----------+-----+| name      | sex |+-----------+-----+| 曾华      | 男  || 匡明      | 男  || 李军      | 男  || 陆军      | 男  || 王尼玛    | 男  || 张全蛋    | 男  || 赵铁柱    | 男  || 张飞      | 男  |+-----------+-----+</code></pre><h3 id="子查询-7"><a href="#子查询-7" class="headerlink" title="子查询 - 7"></a>子查询 - 7</h3><p><strong>查询和 “李军” 同性别且同班的同学 <code>name</code> 。</strong></p><pre class=" language-mysql"><code class="language-mysql">SELECT name, sex, class FROM student WHERE sex = (    SELECT sex FROM student WHERE name = '李军') AND class = (    SELECT class FROM student WHERE name = '李军');+-----------+-----+-------+| name      | sex | class |+-----------+-----+-------+| 曾华      | 男  | 95033 || 李军      | 男  | 95033 || 王尼玛    | 男  | 95033 |+-----------+-----+-------+</code></pre><h3 id="子查询-8"><a href="#子查询-8" class="headerlink" title="子查询 - 8"></a>子查询 - 8</h3><p><strong>查询所有选修 “计算机导论” 课程的 “男” 同学成绩表。</strong></p><p>需要的 “计算机导论” 和性别为 “男” 的编号可以在 <code>course</code> 和 <code>student</code> 表中找到。</p><pre class=" language-mysql"><code class="language-mysql">SELECT * FROM score WHERE c_no = (    SELECT no FROM course WHERE name = '计算机导论') AND s_no IN (    SELECT no FROM student WHERE sex = '男');+------+-------+--------+| s_no | c_no  | degree |+------+-------+--------+| 101  | 3-105 |     90 || 102  | 3-105 |     91 || 104  | 3-105 |     89 || 109  | 3-105 |     76 |+------+-------+--------+</code></pre><h3 id="按等级查询"><a href="#按等级查询" class="headerlink" title="按等级查询"></a>按等级查询</h3><p>建立一个 <code>grade</code> 表代表学生的成绩等级，并插入数据：</p><pre class=" language-mysql"><code class="language-mysql">CREATE TABLE grade (    low INT(3),    upp INT(3),    grade char(1));INSERT INTO grade VALUES (90, 100, 'A');INSERT INTO grade VALUES (80, 89, 'B');INSERT INTO grade VALUES (70, 79, 'C');INSERT INTO grade VALUES (60, 69, 'D');INSERT INTO grade VALUES (0, 59, 'E');SELECT * FROM grade;+------+------+-------+| low  | upp  | grade |+------+------+-------+|   90 |  100 | A     ||   80 |   89 | B     ||   70 |   79 | C     ||   60 |   69 | D     ||    0 |   59 | E     |+------+------+-------+</code></pre><p><strong>查询所有学生的 <code>s_no</code> 、<code>c_no</code> 和 <code>grade</code> 列。</strong></p><p>思路是，使用区间 ( <code>BETWEEN</code> ) 查询，判断学生的成绩 ( <code>degree</code> )  在 <code>grade</code> 表的 <code>low</code> 和 <code>upp</code> 之间。</p><pre class=" language-mysql"><code class="language-mysql">SELECT s_no, c_no, grade FROM score, grade WHERE degree BETWEEN low AND upp;+------+-------+-------+| s_no | c_no  | grade |+------+-------+-------+| 101  | 3-105 | A     || 102  | 3-105 | A     || 103  | 3-105 | A     || 103  | 3-245 | B     || 103  | 6-166 | B     || 104  | 3-105 | B     || 105  | 3-105 | B     || 105  | 3-245 | C     || 105  | 6-166 | C     || 109  | 3-105 | C     || 109  | 3-245 | D     || 109  | 6-166 | B     |+------+-------+-------+</code></pre><h3 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h3><p>准备用于测试连接查询的数据：</p><pre class=" language-mysql"><code class="language-mysql">CREATE DATABASE testJoin;CREATE TABLE person (    id INT,    name VARCHAR(20),    cardId INT);CREATE TABLE card (    id INT,    name VARCHAR(20));INSERT INTO card VALUES (1, '饭卡'), (2, '建行卡'), (3, '农行卡'), (4, '工商卡'), (5, '邮政卡');SELECT * FROM card;+------+-----------+| id   | name      |+------+-----------+|    1 | 饭卡      ||    2 | 建行卡    ||    3 | 农行卡    ||    4 | 工商卡    ||    5 | 邮政卡    |+------+-----------+INSERT INTO person VALUES (1, '张三', 1), (2, '李四', 3), (3, '王五', 6);SELECT * FROM person;+------+--------+--------+| id   | name   | cardId |+------+--------+--------+|    1 | 张三   |      1 ||    2 | 李四   |      3 ||    3 | 王五   |      6 |+------+--------+--------+</code></pre><p>分析两张表发现，<code>person</code> 表并没有为 <code>cardId</code> 字段设置一个在 <code>card</code> 表中对应的 <code>id</code> 外键。如果设置了的话，<code>person</code> 中 <code>cardId</code> 字段值为 <code>6</code> 的行就插不进去，因为该 <code>cardId</code> 值在 <code>card</code> 表中并没有。</p><h4 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h4><p>要查询这两张表中有关系的数据，可以使用 <code>INNER JOIN</code> ( 内连接 ) 将它们连接在一起。</p><pre class=" language-mysql"><code class="language-mysql">-- INNER JOIN: 表示为内连接，将两张表拼接在一起。-- on: 表示要执行某个条件。SELECT * FROM person INNER JOIN card on person.cardId = card.id;+------+--------+--------+------+-----------+| id   | name   | cardId | id   | name      |+------+--------+--------+------+-----------+|    1 | 张三   |      1 |    1 | 饭卡      ||    2 | 李四   |      3 |    3 | 农行卡    |+------+--------+--------+------+-----------+-- 将 INNER 关键字省略掉，结果也是一样的。-- SELECT * FROM person JOIN card on person.cardId = card.id;</code></pre><blockquote><p>注意：<code>card</code> 的整张表被连接到了右边。</p></blockquote><h4 id="左外连接"><a href="#左外连接" class="headerlink" title="左外连接"></a>左外连接</h4><p>完整显示左边的表 ( <code>person</code> ) ，右边的表如果符合条件就显示，不符合则补 <code>NULL</code> 。</p><pre class=" language-mysql"><code class="language-mysql">-- LEFT JOIN 也叫做 LEFT OUTER JOIN，用这两种方式的查询结果是一样的。SELECT * FROM person LEFT JOIN card on person.cardId = card.id;+------+--------+--------+------+-----------+| id   | name   | cardId | id   | name      |+------+--------+--------+------+-----------+|    1 | 张三   |      1 |    1 | 饭卡      ||    2 | 李四   |      3 |    3 | 农行卡    ||    3 | 王五   |      6 | NULL | NULL      |+------+--------+--------+------+-----------+</code></pre><h4 id="右外链接"><a href="#右外链接" class="headerlink" title="右外链接"></a>右外链接</h4><p>完整显示右边的表 ( <code>card</code> ) ，左边的表如果符合条件就显示，不符合则补 <code>NULL</code> 。</p><pre class=" language-mysql"><code class="language-mysql">SELECT * FROM person RIGHT JOIN card on person.cardId = card.id;+------+--------+--------+------+-----------+| id   | name   | cardId | id   | name      |+------+--------+--------+------+-----------+|    1 | 张三   |      1 |    1 | 饭卡      ||    2 | 李四   |      3 |    3 | 农行卡    || NULL | NULL   |   NULL |    2 | 建行卡    || NULL | NULL   |   NULL |    4 | 工商卡    || NULL | NULL   |   NULL |    5 | 邮政卡    |+------+--------+--------+------+-----------+</code></pre><h4 id="全外链接"><a href="#全外链接" class="headerlink" title="全外链接"></a>全外链接</h4><p>完整显示两张表的全部数据。</p><pre class=" language-mysql"><code class="language-mysql">-- MySQL 不支持这种语法的全外连接-- SELECT * FROM person FULL JOIN card on person.cardId = card.id;-- 出现错误：-- ERROR 1054 (42S22): Unknown column 'person.cardId' in 'on clause'-- MySQL全连接语法，使用 UNION 将两张表合并在一起。SELECT * FROM person LEFT JOIN card on person.cardId = card.idUNIONSELECT * FROM person RIGHT JOIN card on person.cardId = card.id;+------+--------+--------+------+-----------+| id   | name   | cardId | id   | name      |+------+--------+--------+------+-----------+|    1 | 张三   |      1 |    1 | 饭卡      ||    2 | 李四   |      3 |    3 | 农行卡    ||    3 | 王五   |      6 | NULL | NULL      || NULL | NULL   |   NULL |    2 | 建行卡    || NULL | NULL   |   NULL |    4 | 工商卡    || NULL | NULL   |   NULL |    5 | 邮政卡    |+------+--------+--------+------+-----------+</code></pre><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p>在 MySQL 中，事务其实是一个最小的不可分割的工作单元。事务能够<strong>保证一个业务的完整性</strong>。</p><p>比如我们的银行转账：</p><pre class=" language-mysql"><code class="language-mysql">-- a -> -100UPDATE user set money = money - 100 WHERE name = 'a';-- b -> +100UPDATE user set money = money + 100 WHERE name = 'b';</code></pre><p>在实际项目中，假设只有一条 SQL 语句执行成功，而另外一条执行失败了，就会出现数据前后不一致。</p><p>因此，在执行多条有关联 SQL 语句时，<strong>事务</strong>可能会要求这些 SQL 语句要么同时执行成功，要么就都执行失败。</p><h3 id="如何控制事务-COMMIT-ROLLBACK"><a href="#如何控制事务-COMMIT-ROLLBACK" class="headerlink" title="如何控制事务 - COMMIT / ROLLBACK"></a>如何控制事务 - COMMIT / ROLLBACK</h3><p>在 MySQL 中，事务的<strong>自动提交</strong>状态默认是开启的。</p><pre class=" language-mysql"><code class="language-mysql">-- 查询事务的自动提交状态SELECT @@AUTOCOMMIT;+--------------+| @@AUTOCOMMIT |+--------------+|            1 |+--------------+</code></pre><p><strong>自动提交的作用</strong>：当我们执行一条 SQL 语句的时候，其产生的效果就会立即体现出来，且不能<strong>回滚</strong>。</p><p>什么是回滚？举个例子：</p><pre class=" language-mysql"><code class="language-mysql">CREATE DATABASE bank;USE bank;CREATE TABLE user (    id INT PRIMARY KEY,    name VARCHAR(20),    money INT);INSERT INTO user VALUES (1, 'a', 1000);SELECT * FROM user;+----+------+-------+| id | name | money |+----+------+-------+|  1 | a    |  1000 |+----+------+-------+</code></pre><p>可以看到，在执行插入语句后数据立刻生效，原因是 MySQL 中的事务自动将它<strong>提交</strong>到了数据库中。那么所谓<strong>回滚</strong>的意思就是，撤销执行过的所有 SQL 语句，使其回滚到<strong>最后一次提交</strong>数据时的状态。</p><p>在 MySQL 中使用 <code>ROLLBACK</code> 执行回滚：</p><pre class=" language-mysql"><code class="language-mysql">-- 回滚到最后一次提交ROLLBACK;SELECT * FROM user;+----+------+-------+| id | name | money |+----+------+-------+|  1 | a    |  1000 |+----+------+-------+</code></pre><p>由于所有执行过的 SQL 语句都已经被提交过了，所以数据并没有发生回滚。那如何让数据可以发生回滚？</p><pre class=" language-mysql"><code class="language-mysql">-- 关闭自动提交SET AUTOCOMMIT = 0;-- 查询自动提交状态SELECT @@AUTOCOMMIT;+--------------+| @@AUTOCOMMIT |+--------------+|            0 |+--------------+</code></pre><p>将自动提交关闭后，测试数据回滚：</p><pre class=" language-mysql"><code class="language-mysql">INSERT INTO user VALUES (2, 'b', 1000);-- 关闭 AUTOCOMMIT 后，数据的变化是在一张虚拟的临时数据表中展示，-- 发生变化的数据并没有真正插入到数据表中。SELECT * FROM user;+----+------+-------+| id | name | money |+----+------+-------+|  1 | a    |  1000 ||  2 | b    |  1000 |+----+------+-------+-- 数据表中的真实数据其实还是：+----+------+-------+| id | name | money |+----+------+-------+|  1 | a    |  1000 |+----+------+-------+-- 由于数据还没有真正提交，可以使用回滚ROLLBACK;-- 再次查询SELECT * FROM user;+----+------+-------+| id | name | money |+----+------+-------+|  1 | a    |  1000 |+----+------+-------+</code></pre><p>那如何将虚拟的数据真正提交到数据库中？使用 <code>COMMIT</code> : </p><pre class=" language-mysql"><code class="language-mysql">INSERT INTO user VALUES (2, 'b', 1000);-- 手动提交数据（持久性），-- 将数据真正提交到数据库中，执行后不能再回滚提交过的数据。COMMIT;-- 提交后测试回滚ROLLBACK;-- 再次查询（回滚无效了）SELECT * FROM user;+----+------+-------+| id | name | money |+----+------+-------+|  1 | a    |  1000 ||  2 | b    |  1000 |+----+------+-------+</code></pre><blockquote><p><strong>总结</strong></p><ol><li><p><strong>自动提交</strong></p><ul><li><p>查看自动提交状态：<code>SELECT @@AUTOCOMMIT</code> ；</p></li><li><p>设置自动提交状态：<code>SET AUTOCOMMIT = 0</code> 。</p></li></ul></li><li><p><strong>手动提交</strong></p><p><code>@@AUTOCOMMIT = 0</code> 时，使用 <code>COMMIT</code> 命令提交事务。</p></li><li><p><strong>事务回滚</strong></p><p><code>@@AUTOCOMMIT = 0</code> 时，使用 <code>ROLLBACK</code> 命令回滚事务。</p></li></ol></blockquote><p><strong>事务的实际应用</strong>，让我们再回到银行转账项目：</p><pre class=" language-mysql"><code class="language-mysql">-- 转账UPDATE user set money = money - 100 WHERE name = 'a';-- 到账UPDATE user set money = money + 100 WHERE name = 'b';SELECT * FROM user;+----+------+-------+| id | name | money |+----+------+-------+|  1 | a    |   900 ||  2 | b    |  1100 |+----+------+-------+</code></pre><p>这时假设在转账时发生了意外，就可以使用 <code>ROLLBACK</code> 回滚到最后一次提交的状态：</p><pre class=" language-mysql"><code class="language-mysql">-- 假设转账发生了意外，需要回滚。ROLLBACK;SELECT * FROM user;+----+------+-------+| id | name | money |+----+------+-------+|  1 | a    |  1000 ||  2 | b    |  1000 |+----+------+-------+</code></pre><p>这时我们又回到了发生意外之前的状态，也就是说，事务给我们提供了一个可以反悔的机会。假设数据没有发生意外，这时可以手动将数据真正提交到数据表中：<code>COMMIT</code> 。</p><h3 id="手动开启事务-BEGIN-START-TRANSACTION"><a href="#手动开启事务-BEGIN-START-TRANSACTION" class="headerlink" title="手动开启事务 - BEGIN / START TRANSACTION"></a>手动开启事务 - BEGIN / START TRANSACTION</h3><p>事务的默认提交被开启 ( <code>@@AUTOCOMMIT = 1</code> ) 后，此时就不能使用事务回滚了。但是我们还可以手动开启一个事务处理事件，使其可以发生回滚：</p><pre class=" language-mysql"><code class="language-mysql">-- 使用 BEGIN 或者 START TRANSACTION 手动开启一个事务-- START TRANSACTION;BEGIN;UPDATE user set money = money - 100 WHERE name = 'a';UPDATE user set money = money + 100 WHERE name = 'b';-- 由于手动开启的事务没有开启自动提交，-- 此时发生变化的数据仍然是被保存在一张临时表中。SELECT * FROM user;+----+------+-------+| id | name | money |+----+------+-------+|  1 | a    |   900 ||  2 | b    |  1100 |+----+------+-------+-- 测试回滚ROLLBACK;SELECT * FROM user;+----+------+-------+| id | name | money |+----+------+-------+|  1 | a    |  1000 ||  2 | b    |  1000 |+----+------+-------+</code></pre><p>仍然使用 <code>COMMIT</code> 提交数据，提交后无法再发生本次事务的回滚。</p><pre class=" language-mysql"><code class="language-mysql">BEGIN;UPDATE user set money = money - 100 WHERE name = 'a';UPDATE user set money = money + 100 WHERE name = 'b';SELECT * FROM user;+----+------+-------+| id | name | money |+----+------+-------+|  1 | a    |   900 ||  2 | b    |  1100 |+----+------+-------+-- 提交数据COMMIT;-- 测试回滚（无效，因为表的数据已经被提交）ROLLBACK;</code></pre><h3 id="事务的-ACID-特征与使用"><a href="#事务的-ACID-特征与使用" class="headerlink" title="事务的 ACID 特征与使用"></a>事务的 ACID 特征与使用</h3><p><strong>事务的四大特征：</strong></p><ul><li><strong>A 原子性</strong>：事务是最小的单位，不可以再分割；</li><li><strong>C 一致性</strong>：要求同一事务中的 SQL 语句，必须保证同时成功或者失败；</li><li><strong>I 隔离性</strong>：事务1 和 事务2 之间是具有隔离性的；</li><li><strong>D 持久性</strong>：事务一旦结束 ( <code>COMMIT</code> ) ，就不可以再返回了 ( <code>ROLLBACK</code> ) 。</li></ul><h3 id="事务的隔离性"><a href="#事务的隔离性" class="headerlink" title="事务的隔离性"></a>事务的隔离性</h3><p><strong>事务的隔离性可分为四种 ( 性能从低到高 )</strong> ：</p><ol><li><p><strong>READ UNCOMMITTED ( 读取未提交 )</strong></p><p>如果有多个事务，那么任意事务都可以看见其他事务的<strong>未提交数据</strong>。</p></li><li><p><strong>READ COMMITTED ( 读取已提交 )</strong></p><p>只能读取到其他事务<strong>已经提交的数据</strong>。</p></li><li><p><strong>REPEATABLE READ ( 可被重复读 )</strong></p><p>如果有多个连接都开启了事务，那么事务之间不能共享数据记录，否则只能共享已提交的记录。</p></li><li><p><strong>SERIALIZABLE ( 串行化 )</strong></p><p>所有的事务都会按照<strong>固定顺序执行</strong>，执行完一个事务后再继续执行下一个事务的<strong>写入操作</strong>。</p></li></ol><p>查看当前数据库的默认隔离级别：</p><pre class=" language-mysql"><code class="language-mysql">-- MySQL 8.x, GLOBAL 表示系统级别，不加表示会话级别。SELECT @@GLOBAL.TRANSACTION_ISOLATION;SELECT @@TRANSACTION_ISOLATION;+--------------------------------+| @@GLOBAL.TRANSACTION_ISOLATION |+--------------------------------+| REPEATABLE-READ                | -- MySQL的默认隔离级别，可以重复读。+--------------------------------+-- MySQL 5.xSELECT @@GLOBAL.TX_ISOLATION;SELECT @@TX_ISOLATION;</code></pre><p>修改隔离级别：</p><pre class=" language-mysql"><code class="language-mysql">-- 设置系统隔离级别，LEVEL 后面表示要设置的隔离级别 (READ UNCOMMITTED)。SET GLOBAL TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;-- 查询系统隔离级别，发现已经被修改。SELECT @@GLOBAL.TRANSACTION_ISOLATION;+--------------------------------+| @@GLOBAL.TRANSACTION_ISOLATION |+--------------------------------+| READ-UNCOMMITTED               |+--------------------------------+</code></pre><h4 id="脏读"><a href="#脏读" class="headerlink" title="脏读"></a>脏读</h4><p>测试 <strong>READ UNCOMMITTED ( 读取未提交 )</strong> 的隔离性：</p><pre class=" language-mysql"><code class="language-mysql">INSERT INTO user VALUES (3, '小明', 1000);INSERT INTO user VALUES (4, '淘宝店', 1000);SELECT * FROM user;+----+-----------+-------+| id | name      | money |+----+-----------+-------+|  1 | a         |   900 ||  2 | b         |  1100 ||  3 | 小明      |  1000 ||  4 | 淘宝店    |  1000 |+----+-----------+-------+-- 开启一个事务操作数据-- 假设小明在淘宝店买了一双800块钱的鞋子：START TRANSACTION;UPDATE user SET money = money - 800 WHERE name = '小明';UPDATE user SET money = money + 800 WHERE name = '淘宝店';-- 然后淘宝店在另一方查询结果，发现钱已到账。SELECT * FROM user;+----+-----------+-------+| id | name      | money |+----+-----------+-------+|  1 | a         |   900 ||  2 | b         |  1100 ||  3 | 小明      |   200 ||  4 | 淘宝店    |  1800 |+----+-----------+-------+</code></pre><p>由于小明的转账是在新开启的事务上进行操作的，而该操作的结果是可以被其他事务（另一方的淘宝店）看见的，因此淘宝店的查询结果是正确的，淘宝店确认到账。但就在这时，如果小明在它所处的事务上又执行了 <code>ROLLBACK</code> 命令，会发生什么？</p><pre class=" language-mysql"><code class="language-mysql">-- 小明所处的事务ROLLBACK;-- 此时无论对方是谁，如果再去查询结果就会发现：SELECT * FROM user;+----+-----------+-------+| id | name      | money |+----+-----------+-------+|  1 | a         |   900 ||  2 | b         |  1100 ||  3 | 小明      |  1000 ||  4 | 淘宝店    |  1000 |+----+-----------+-------+</code></pre><p>这就是所谓的<strong>脏读</strong>，一个事务读取到另外一个事务还未提交的数据。这在实际开发中是不允许出现的。</p><h4 id="读取已提交"><a href="#读取已提交" class="headerlink" title="读取已提交"></a>读取已提交</h4><p>把隔离级别设置为 <strong>READ COMMITTED</strong> ：</p><pre class=" language-mysql"><code class="language-mysql">SET GLOBAL TRANSACTION ISOLATION LEVEL READ COMMITTED;SELECT @@GLOBAL.TRANSACTION_ISOLATION;+--------------------------------+| @@GLOBAL.TRANSACTION_ISOLATION |+--------------------------------+| READ-COMMITTED                 |+--------------------------------+</code></pre><p>这样，再有新的事务连接进来时，它们就只能查询到已经提交过的事务数据了。但是对于当前事务来说，它们看到的还是未提交的数据，例如：</p><pre class=" language-mysql"><code class="language-mysql">-- 正在操作数据事务（当前事务）START TRANSACTION;UPDATE user SET money = money - 800 WHERE name = '小明';UPDATE user SET money = money + 800 WHERE name = '淘宝店';-- 虽然隔离级别被设置为了 READ COMMITTED，但在当前事务中，-- 它看到的仍然是数据表中临时改变数据，而不是真正提交过的数据。SELECT * FROM user;+----+-----------+-------+| id | name      | money |+----+-----------+-------+|  1 | a         |   900 ||  2 | b         |  1100 ||  3 | 小明      |   200 ||  4 | 淘宝店    |  1800 |+----+-----------+-------+-- 假设此时在远程开启了一个新事务，连接到数据库。$ mysql -u root -p12345612-- 此时远程连接查询到的数据只能是已经提交过的SELECT * FROM user;+----+-----------+-------+| id | name      | money |+----+-----------+-------+|  1 | a         |   900 ||  2 | b         |  1100 ||  3 | 小明      |  1000 ||  4 | 淘宝店    |  1000 |+----+-----------+-------+</code></pre><p>但是这样还有问题，那就是假设一个事务在操作数据时，其他事务干扰了这个事务的数据。例如：</p><pre class=" language-mysql"><code class="language-mysql">-- 小张在查询数据的时候发现：SELECT * FROM user;+----+-----------+-------+| id | name      | money |+----+-----------+-------+|  1 | a         |   900 ||  2 | b         |  1100 ||  3 | 小明      |   200 ||  4 | 淘宝店    |  1800 |+----+-----------+-------+-- 在小张求表的 money 平均值之前，小王做了一个操作：START TRANSACTION;INSERT INTO user VALUES (5, 'c', 100);COMMIT;-- 此时表的真实数据是：SELECT * FROM user;+----+-----------+-------+| id | name      | money |+----+-----------+-------+|  1 | a         |   900 ||  2 | b         |  1100 ||  3 | 小明      |  1000 ||  4 | 淘宝店    |  1000 ||  5 | c         |   100 |+----+-----------+-------+-- 这时小张再求平均值的时候，就会出现计算不相符合的情况：SELECT AVG(money) FROM user;+------------+| AVG(money) |+------------+|  820.0000  |+------------+</code></pre><p>虽然 <strong>READ COMMITTED</strong> 让我们只能读取到其他事务已经提交的数据，但还是会出现问题，就是<strong>在读取同一个表的数据时，可能会发生前后不一致的情况。</strong>这被称为<strong>不可重复读现象 ( READ COMMITTED )</strong> 。</p><h4 id="幻读"><a href="#幻读" class="headerlink" title="幻读"></a>幻读</h4><p>将隔离级别设置为 <strong>REPEATABLE READ ( 可被重复读取 )</strong> :</p><pre class=" language-mysql"><code class="language-mysql">SET GLOBAL TRANSACTION ISOLATION LEVEL REPEATABLE READ;SELECT @@GLOBAL.TRANSACTION_ISOLATION;+--------------------------------+| @@GLOBAL.TRANSACTION_ISOLATION |+--------------------------------+| REPEATABLE-READ                |+--------------------------------+</code></pre><p>测试 <strong>REPEATABLE READ</strong> ，假设在两个不同的连接上分别执行 <code>START TRANSACTION</code> :</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 小张 - 成都</span><span class="token keyword">START</span> <span class="token keyword">TRANSACTION</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token keyword">user</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 小王 - 北京</span><span class="token keyword">START</span> <span class="token keyword">TRANSACTION</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 小张 - 成都</span><span class="token keyword">COMMIT</span><span class="token punctuation">;</span></code></pre><p>当前事务开启后，没提交之前，查询不到，提交后可以被查询到。但是，在提交之前其他事务被开启了，那么在这条事务线上，就不会查询到当前有操作事务的连接。相当于开辟出一条单独的线程。</p><p>无论小张是否执行过 <code>COMMIT</code> ，在小王这边，都不会查询到小张的事务记录，而是只会查询到自己所处事务的记录：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token keyword">user</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-----------+-------+</span><span class="token operator">|</span> id <span class="token operator">|</span> name      <span class="token operator">|</span> money <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-----------+-------+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">a</span>         <span class="token operator">|</span>   <span class="token number">900</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">2</span> <span class="token operator">|</span> <span class="token number">b</span>         <span class="token operator">|</span>  <span class="token number">1100</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">3</span> <span class="token operator">|</span> 小明      <span class="token operator">|</span>  <span class="token number">1000</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">4</span> <span class="token operator">|</span> 淘宝店    <span class="token operator">|</span>  <span class="token number">1000</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">5</span> <span class="token operator">|</span> <span class="token number">c</span>         <span class="token operator">|</span>   <span class="token number">100</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-----------+-------+</span></code></pre><p>这是<strong>因为小王在此之前开启了一个新的事务 ( <code>START TRANSACTION</code> ) **，那么</strong>在他的这条新事务的线上，跟其他事务是没有联系的**，也就是说，此时如果其他事务正在操作数据，它是不知道的。</p><p>然而事实是，在真实的数据表中，小张已经插入了一条数据。但是小王此时并不知道，也插入了同一条数据，会发生什么呢？</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token keyword">user</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- ERROR 1062 (23000): Duplicate entry '6' for key 'PRIMARY'</span></code></pre><p>报错了，操作被告知已存在主键为 <code>6</code> 的字段。这种现象也被称为<strong>幻读，一个事务提交的数据，不能被其他事务读取到</strong>。</p><h4 id="串行化"><a href="#串行化" class="headerlink" title="串行化"></a>串行化</h4><p>顾名思义，就是所有事务的<strong>写入操作</strong>全都是串行化的。什么意思？把隔离级别修改成 <strong>SERIALIZABLE</strong> :</p><pre class=" language-mysql"><code class="language-mysql">SET GLOBAL TRANSACTION ISOLATION LEVEL SERIALIZABLE;SELECT @@GLOBAL.TRANSACTION_ISOLATION;+--------------------------------+| @@GLOBAL.TRANSACTION_ISOLATION |+--------------------------------+| SERIALIZABLE                   |+--------------------------------+</code></pre><p>还是拿小张和小王来举例：</p><pre class=" language-mysql"><code class="language-mysql">-- 小张 - 成都START TRANSACTION;-- 小王 - 北京START TRANSACTION;-- 开启事务之前先查询表，准备操作数据。SELECT * FROM user;+----+-----------+-------+| id | name      | money |+----+-----------+-------+|  1 | a         |   900 ||  2 | b         |  1100 ||  3 | 小明      |  1000 ||  4 | 淘宝店    |  1000 ||  5 | c         |   100 ||  6 | d         |  1000 |+----+-----------+-------+-- 发现没有 7 号王小花，于是插入一条数据：INSERT INTO user VALUES (7, '王小花', 1000);</code></pre><p>此时会发生什么呢？由于现在的隔离级别是 <strong>SERIALIZABLE ( 串行化 )</strong> ，串行化的意思就是：假设把所有的事务都放在一个串行的队列中，那么所有的事务都会按照<strong>固定顺序执行</strong>，执行完一个事务后再继续执行下一个事务的<strong>写入操作</strong> ( <strong>这意味着队列中同时只能执行一个事务的写入操作</strong> ) 。</p><p>根据这个解释，小王在插入数据时，会出现等待状态，直到小张执行 <code>COMMIT</code> 结束它所处的事务，或者出现等待超时。</p><h1 id="来自一代咩神同学"><a href="#来自一代咩神同学" class="headerlink" title="来自一代咩神同学"></a>来自一代咩神同学</h1>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>接口内容小结</title>
      <link href="2020/08/01/jie-kou-nei-rong-xiao-jie/"/>
      <url>2020/08/01/jie-kou-nei-rong-xiao-jie/</url>
      
        <content type="html"><![CDATA[<h3 id="在Java-9-版本中，接口的内容可以有"><a href="#在Java-9-版本中，接口的内容可以有" class="headerlink" title="在Java 9+版本中，接口的内容可以有:"></a>在Java 9+版本中，接口的内容可以有:</h3><ol><li>成员变量其实是常量，</li></ol><ul><li>格式:<br>[public] [static] [final] 数据类型常量名称=数据值;</li><li>注意:<ol><li>常量必须进行赋值，而且一旦赋值不能改变</li><li>常量名称完全大写，用下划线进行分隔</li></ol></li></ul><a id="more"></a><ol start="2"><li>接口中最重要的就是抽象方法，</li></ol><ul><li>格式:<br>[public] [abstract] 返回值类型方法名称(参数列表);</li><li>注意:实现类必须覆盖重写接口所有的抽象方法，除非实现类是抽象类。</li></ul><p>3.从Java 8开始，接口里允许定义默认方法，</p><ul><li>格式:</li><li>[public] default返回值类型方法名称(参数列表) {方法体}</li><li>注意:默认方法也可以被覆盖重写</li></ul><ol start="4"><li>从Java 8开始，接口里允许定义静态方法，</li></ol><ul><li>格式:<br>[public] static 返回值类型方法名称(参数列表) {方法体}</li><li>注意:应该通过接口名称进行调用，不能通过实现类对象调用接口静态方法</li></ul><ol start="5"><li>从Java 9开始，接口里允许定义私有很乏，</li></ol><ul><li>格式:</li></ul><ol><li>普通私有方法: private 返回值类型方法名称(参数列表) {方法体}</li><li>静态私有方法: private static 返回值类型方法名称(参数列表) {方法体}</li></ol><ul><li>注意: private的方法只有接口自己才能调用，不能被实现类或别人使用。</li></ul><h2 id="对象向下转型"><a href="#对象向下转型" class="headerlink" title="对象向下转型"></a>对象向下转型</h2><p><img src="https://i.loli.net/2020/08/02/tcDkQhxSqdr2Mua.png" alt="对象向下转型.png"></p>]]></content>
      
      
      <categories>
          
          <category> 接口小结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 接口 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Servlet&amp;Request&amp;HTTP笔记</title>
      <link href="2020/07/28/servlet-request-http-bi-ji/"/>
      <url>2020/07/28/servlet-request-http-bi-ji/</url>
      
        <content type="html"><![CDATA[<ol><li>Servlet</li><li>HTTP协议</li><li>Request</li></ol><a id="more"></a><h2 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet :"></a>Servlet :</h2><ol><li><p> 概念</p></li><li><p> 步骤</p></li><li><p> 执行原理</p></li><li><p> 生命周期</p></li><li><p> Servlet3.0 注解配道</p></li><li><p>Servlet的体系结构<br> Servlet –接口</p><p> GenericServlet –抽象类</p><p> HttpServlet – 抽像类</p></li></ol><ul><li><p>GenericServlet :将Servlet接口中其他的方法做了默认空实现,只将service( )方法作为抽象</p></li><li><p>将来定义Servlet类时，可以继承Genericservlet, 实现service( )方法即可</p><h3 id="Httpservlet-对http协议的-种封装，简化操作"><a href="#Httpservlet-对http协议的-种封装，简化操作" class="headerlink" title="Httpservlet :对http协议的- -种封装，简化操作"></a>Httpservlet :对http协议的- -种封装，简化操作</h3></li></ul><ol><li><p>定义类继承HttpServlet</p></li><li><p>复写doGet/ dopost方法</p></li><li><p>Servlet相关配置</p></li><li><p>urlpartten: Servlet访问路径</p><ol><li>一个servlet可以定义多个访问路径: @vebservlet({“ /d4” , “/dd4” , “/ddd4”})</li><li>路径定义规则:<ol><li>/xxx：路径匹配</li><li>/xxx/xxx:多层路径，目录结构</li><li>*.do：扩展名匹配</li></ol></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> Servlet&amp;HTTP&amp;Request </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Servlet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo博客部署到阿里云踩坑记录</title>
      <link href="2020/07/27/hexo-bo-ke-bu-shu-dao-a-li-yun-cai-keng-ji-lu/"/>
      <url>2020/07/27/hexo-bo-ke-bu-shu-dao-a-li-yun-cai-keng-ji-lu/</url>
      
        <content type="html"><![CDATA[<h2 id="安装gcc-gcc-c"><a href="#安装gcc-gcc-c" class="headerlink" title="安装gcc gcc-c++"></a>安装gcc gcc-c++</h2><p><code>yum install -y gcc gcc-c++  </code></p><h2 id="安装PCRE库"><a href="#安装PCRE库" class="headerlink" title="安装PCRE库"></a>安装PCRE库</h2><h3 id="进入local文件夹"><a href="#进入local文件夹" class="headerlink" title="进入local文件夹"></a>进入local文件夹</h3><p><code>cd /usr/local/</code></p><a id="more"></a><h3 id="下载PCER库"><a href="#下载PCER库" class="headerlink" title="下载PCER库"></a>下载PCER库</h3><p><code>wget http://downloads.sourceforge.net/project/pcre/pcre/8.37/pcre-8.37.tar.gz  </code></p><h3 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h3><p><code>tar -xvf pcre-8.37.tar.gz</code></p><h3 id="进入pcre-8-37文件夹"><a href="#进入pcre-8-37文件夹" class="headerlink" title="进入pcre-8.37文件夹"></a>进入pcre-8.37文件夹</h3><p><code>cd pcre-8.37 </code></p><h3 id="进行源码安装"><a href="#进行源码安装" class="headerlink" title="进行源码安装"></a>进行源码安装</h3><p><code>./configure</code></p><h3 id="建立依赖关系，编译它们"><a href="#建立依赖关系，编译它们" class="headerlink" title="建立依赖关系，编译它们"></a>建立依赖关系，编译它们</h3><p><code>make &amp;&amp; make install</code></p><h3 id="查看版本号"><a href="#查看版本号" class="headerlink" title="查看版本号"></a>查看版本号</h3><p><code>pcre-config --version</code></p><h3 id="安装-openssl-、zlib-、-gcc-依赖"><a href="#安装-openssl-、zlib-、-gcc-依赖" class="headerlink" title="安装 openssl 、zlib 、 gcc 依赖"></a>安装 openssl 、zlib 、 gcc 依赖</h3><p><code>yum -y install make zlib zlib-devel gcc-c++ libtool openssl openssl-devel</code></p><h2 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h2><ul><li><p>进入local文件夹<br><code> cd /usr/local/</code></p></li><li><p>下载nginx<br><code> wget http://nginx.org/download/nginx-1.17.9.tar.gz</code></p></li><li><p>解压nginx<br><code> tar -xvf nginx-1.17.9.tar.gz</code></p></li><li><p>进入nginx-1.17.9文件夹<br><code>cd nginx-1.17.9 </code></p></li><li><p>进行源码安装<br><code>./configure</code></p></li><li><p>建立依赖关系，编译它们<br><code>make &amp;&amp; make install</code></p></li></ul><h3 id="启动nginx-usr-local-sbin-nginx"><a href="#启动nginx-usr-local-sbin-nginx" class="headerlink" title="启动nginx   /usr/local/sbin/nginx"></a>启动nginx   <code>/usr/local/sbin/nginx</code></h3><ul><li><p>没有任何返回证明启动成功</p></li><li><p>在浏览器输入服务器的公网IP就可以看到nginx欢迎页面</p></li></ul><h2 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h2><pre><code>curl -sL https://rpm.nodesource.com/setup_10.x | bash -yum install -y nodejs</code></pre><h3 id="查看是否成功"><a href="#查看是否成功" class="headerlink" title="查看是否成功"></a>查看是否成功</h3><pre><code>node -vnpm -v</code></pre><ul><li>显示版本号即为成功</li></ul><h2 id="安装Git及配置git仓库"><a href="#安装Git及配置git仓库" class="headerlink" title="安装Git及配置git仓库"></a>安装Git及配置git仓库</h2><ul><li><p>安装git<br><code>yum install git </code></p></li><li><p>新建git管理员账户<br><code> adduser git</code></p></li><li><p>修改sudoers文件<br><code> vi /etc/sudoers</code></p></li></ul><h3 id="注：在root-ALL-ALL-ALL-添加"><a href="#注：在root-ALL-ALL-ALL-添加" class="headerlink" title="注：在root ALL=(ALL) ALL 添加"></a>注：在root ALL=(ALL) ALL 添加</h3><p> git ALL=(ALL) ALL</p><ul><li><p>vi/vim使用<br>按i进入输入模式，输入完成后按“sc + shift + ：”，出现一个“ ：”，输入wq保存退出</p></li><li><p>双引号不要复制！！！！</p></li></ul><ul><li><p>更改文件夹权限<br><code> chmod 400 /etc/sudoers</code></p></li><li><p>设置git管理员密码<br><code>sudo passwd git</code></p></li><li><p>输入新密码</p></li><li><p>确定密码</p></li></ul><h2 id="切换git用户"><a href="#切换git用户" class="headerlink" title="切换git用户"></a>切换git用户</h2><ul><li><p>切换<br><code> su git</code></p></li><li><p>返回最上层目录<br><code>cd ~ </code></p></li><li><p>新建.ssh文件夹<br><code>mkdir .ssh</code></p></li><li><p>进入.ssh文件夹<br><code>cd .ssh </code></p></li><li><p>新建密钥文件<br><code> vi authorized_keys</code></p></li><li><p>本地计算机进入.shh文件夹查找密钥<br><code> C:\Users\刘展\.ssh\id_rsa.pub</code></p></li><li><p>没有.ssh文件夹请自行查找教程</p></li><li><p>把本地id_rsa.pub文件里的密钥内容复制到authorized_keys文件中，保存退出</p></li><li><p>修改文件权限</p><pre><code>chmod 600 ~/.ssh/authorized_keys</code></pre></li></ul><p>chmod 700 ~/.ssh</p><pre><code>## 创建git仓库- 返回最上层目录`cd ~ `- 新建git仓库`git init --bare blog.git `- 新建文件post-receive`vi ~/blog.git/hooks/post-receive ` - 文件内容 `git --work-tree=/home/www/website --git-dir=/home/git/blog.git checkout -f `- 保存退出`chmod +x ~/blog.git/hooks/post-receive`## 新建/home/www/website文件夹- 切换root` su root`输入密码- 新建www和website文件夹</code></pre><p>cd /home</p><p>mkdir www</p><p>cd www</p><p>mkdir website</p><pre><code>- 修改website文件夹权限</code></pre><p>chmod 777 /home/www/website</p><p>chmod 777 /home/www</p><pre><code>- 在本地电脑输入` ssh -v git@服务器的公网ip`## 修改nginx指向目录- 打开文件`vim /usr/local/nginx/conf/nginx.conf `- 修改新建的博客目录</code></pre><p>location / {<br>            root   /home/www/website;<br>            index  index.html index.htm;<br>        }</p><pre><code></code></pre><p>location = /50x.html {<br>            root   /home/www/website;<br>        }</p><pre><code>### 修改本地博客_config.yml文件</code></pre><p>repo: git@这里改为服务器公网IP:/home/git/blog.git</p><p>例如：<br>repo: <a href="mailto:git@codeliuzhan.cn">git@codeliuzhan.cn</a>:/home/git/blog.git</p><pre><code>#### 以前部署过博客的同学需要把.deploy_git删除### 使用git推到远端</code></pre><p>hexo clean</p><p>hexo g</p><p>hexo n</p><pre><code>## 可能出现的问题：报错：fatal: cannot create directory at '2020': Permission deni解决办法：</code></pre><p>解决方法：输入命令 sudo chmod -R 777 &nbsp;/工作目录，</p><p>例如：sudo chmode -R 777 /home/www/website</p><p>sudo：是linux系统管理指令，是允许系统管理员让普通用户执行一些或者全部的root命令的一个工具。</p><p>-R：是指几连医用到目录里所有子目录和文件；</p><p>777：是指所有用户都拥有的最高权限。</p><pre><code>错误2：推向远端不成功- 安装阿里云部署插件（cmd下安装）`npm install hexo-deployer-aliyun --save `[hexo官方解决方案](https://hexo.io/plugins/)</code></pre>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo部署阿里云 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Servlet初识</title>
      <link href="2020/07/26/servlet-chu-shi/"/>
      <url>2020/07/26/servlet-chu-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="概念-运行在服务器端的小程序"><a href="#概念-运行在服务器端的小程序" class="headerlink" title="概念:运行在服务器端的小程序"></a>概念:运行在服务器端的小程序</h2><ul><li><p>Servlet就是一个接口， 定义了Java类被浏览器访问到( tomcat识别)的规则。</p></li><li><p>将来我们自定义一个类，实现Servlet接口， 复写方法。</p></li></ul><a id="more"></a><h2 id="Servlet执行原理"><a href="#Servlet执行原理" class="headerlink" title="Servlet执行原理"></a>Servlet执行原理</h2><ul><li>1.当服务器接受到客户端浏览器的请求后，会解析请求URL路径,获取访问的Servlet的资源路径</li><li>2.查找web. xml文件，是否有对应的<ur1- pattern="">标签体内容。</ur1-></li><li>3.如果有，则在找到对应的<servlet-class>全类名</servlet-class></li><li>4.tomcat会将字节码文件加载进内存，并且创建其对象</li><li>5.调用其方法</li></ul><h2 id="定义一个类，实现Servlet接口"><a href="#定义一个类，实现Servlet接口" class="headerlink" title="定义一个类，实现Servlet接口"></a>定义一个类，实现Servlet接口</h2><p><code>public class ServletDemo implements Servlet</code></p><h2 id="配置Servlet"><a href="#配置Servlet" class="headerlink" title="配置Servlet"></a>配置Servlet</h2><ul><li><p>在web.xml中配置：</p><pre><code>&lt;!-- 配置Servlet --&gt;  &lt;servlet&gt;      &lt;servlet-name&gt;demo1&lt;/servlet-name&gt;      &lt;servlet-class&gt;cn.codeliuzhan.web.servlet.ServletDemo&lt;/servlet-class&gt;  &lt;/servlet&gt;  &lt;servlet-mapping&gt;      &lt;servlet-name&gt;demo1&lt;/servlet-name&gt;      &lt;url-pattern&gt;/demo&lt;/url-pattern&gt;  &lt;/servlet-mapping&gt;</code></pre></li></ul><h3 id="Servlet中的生命周期"><a href="#Servlet中的生命周期" class="headerlink" title="Servlet中的生命周期:"></a>Servlet中的生命周期:</h3><ol><li><p>被创建:执行init方法，只执行一次</p><ol><li>Servlet什么时候被创建?<ul><li>默认情况下，第一次被访问时，5ervlet被创建</li><li>可以配置执行Servlet的创建时机。<ul><li>在&lt; servlet &gt; 标签下配置</li></ul><ol><li>第一次被访问时，创建<ul><li>&lt;load -on- startup&gt;的值为负数</li></ul></li><li>在服务器启动时，创建<ul><li><load-on-startup>的值为0或正整数</load-on-startup></li></ul></li></ol></li></ul></li></ol></li><li><p>Servlet的init方法，只执行一次，说明一个servlet在内存中只存在一个对象， Servlet是单例的</p><ul><li>多个用户同时访问时，可能存在线程安全问题。</li><li>解决:尽量不要在servlet中定义成员变量。即使定义了成员变量，也不要对修改值</li></ul></li><li><p>提供服务:执行service方法，执行多次</p><ul><li>每次访问Servlet时，Service方法都会被调用一 次。</li></ul></li><li><p>被销毁:执行destroy方法，只执行一次</p><ul><li><p>Servlet被销毁时执行。服务器关闭时，Servlet被销毁</p></li><li><p>只有服务器正常关闭时，才会执行destroy方法</p></li><li><p>destroy方法在Servlet被销毁之前执行，一般用于释放资源</p></li></ul></li></ol><h3 id="Servlet3-0"><a href="#Servlet3-0" class="headerlink" title="Servlet3.0 :"></a>Servlet3.0 :</h3><ul><li>好处:<ul><li>支持注解配”i。可以不法:要web . xml了。</li></ul></li><li>步骤:<ol><li>创建JavaEE项目， 选择Servlet的版本3 . o以上,可以不创建web. xml</li><li>定义一个类，实现servlet接口</li><li>复写方法</li><li>在类上使用@webservlet注解，进行配*<ul><li>@WebServlet(”资源路径”)</li></ul></li></ol></li></ul><h2 id="IDEA与tomcat的相关配置"><a href="#IDEA与tomcat的相关配置" class="headerlink" title="IDEA与tomcat的相关配置"></a>IDEA与tomcat的相关配置</h2><ol><li>IDEA会为每-个tomcat部署的项目单独建立-份配置文件<ul><li>查看控制台的1og : Using CATALINA BASE:<br>“C : \Users \fqy. IntelliIdea2018. 1\system\tomcat_ itcast”</li></ul></li><li>工作空间项目和tomcat部署的web项目<ul><li>tomcat真正访问的是”tomcat部署的web项目”,”tomcat部署的web项目”对应着”工作空间项目”的web目录下的所有资源</li><li>WEB- INF目录下的资源不能被浏览器直接访问。</li></ul></li><li>断点调试:使用”小虫子”启动dubug 启动</li></ol>]]></content>
      
      
      <categories>
          
          <category> Servlet </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 认识Servlet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL安装踩坑文档</title>
      <link href="2020/07/19/mysql-an-zhuang-cai-keng-wen-dang/"/>
      <url>2020/07/19/mysql-an-zhuang-cai-keng-wen-dang/</url>
      
        <content type="html"><![CDATA[<h2 id="MySQL5-7安装踩坑大集合"><a href="#MySQL5-7安装踩坑大集合" class="headerlink" title="MySQL5.7安装踩坑大集合"></a>MySQL5.7安装踩坑大集合</h2><h3 id="MySQL下载地址"><a href="#MySQL下载地址" class="headerlink" title="MySQL下载地址"></a><a href="https://www.mysql.com/">MySQL下载地址</a></h3><ul><li>解压路径最好保证简单，例如：D:\</li></ul><h4 id="在my-ini文件夹配置相关设置"><a href="#在my-ini文件夹配置相关设置" class="headerlink" title="在my.ini文件夹配置相关设置"></a>在my.ini文件夹配置相关设置</h4><pre><code>[mysqld]port    = 3306  //端口号basedir    = E:\mysql57  //路径需要保证与解压路径一致datadir    = E:\mysql57\datamax_connections = 512log-error = E:\mysql57\error.loginnodb_buffer_pool_size = 256Mcharacter-set-server=utf8mb4</code></pre><h4 id="添加环境变量"><a href="#添加环境变量" class="headerlink" title="添加环境变量"></a>添加环境变量</h4><ul><li>计算机 — 属性 — 高级系统设置 — 环境变量</li></ul><a id="more"></a><h4 id="在Path环境变量下添加："><a href="#在Path环境变量下添加：" class="headerlink" title="在Path环境变量下添加："></a>在Path环境变量下添加：</h4><pre><code>D:\解压文件夹名\bin D:\mysql57\bin  //举例// 不需要加分号</code></pre><h4 id="cmd以管理员身份运行"><a href="#cmd以管理员身份运行" class="headerlink" title="cmd以管理员身份运行"></a>cmd以管理员身份运行</h4><ul><li>进入bin目录<pre><code>D:cd mysql57cd bin</code></pre></li></ul><h3 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h3><p><code>mysqld --initialize-insecure --user=mysql</code></p><h3 id="安装MySQL进程"><a href="#安装MySQL进程" class="headerlink" title="安装MySQL进程"></a>安装MySQL进程</h3><p><code>mysqld install</code></p><h3 id="启动MySQL"><a href="#启动MySQL" class="headerlink" title="启动MySQL"></a>启动MySQL</h3><p><code>net start mysql</code></p><h3 id="进入MySQL"><a href="#进入MySQL" class="headerlink" title="进入MySQL"></a>进入MySQL</h3><p><code>mysql -uroot -p</code></p><ul><li>直接回车两次<h3 id="设置MySQL密码"><a href="#设置MySQL密码" class="headerlink" title="设置MySQL密码"></a>设置MySQL密码</h3><code>alter user 'root'@'localhost' identified by '111';</code></li></ul><h3 id="设置MySQL账号"><a href="#设置MySQL账号" class="headerlink" title="设置MySQL账号"></a>设置MySQL账号</h3><p><code>update mysql.user set host='%' where user='root';</code> </p><h3 id="设置生效"><a href="#设置生效" class="headerlink" title="设置生效"></a>设置生效</h3><p><code>flush privileges;</code></p><h3 id="选择user表，查看"><a href="#选择user表，查看" class="headerlink" title="选择user表，查看"></a>选择user表，查看</h3><p><code>select user,host from mysql.user;</code></p><h3 id="测试MySQL登录"><a href="#测试MySQL登录" class="headerlink" title="测试MySQL登录"></a>测试MySQL登录</h3><p><code>mysql -uroot -p111</code></p><h2 id="这样MySQL数据库就配置完成啦，账号密码分别是”root”-和-“111”，端口号为3306；"><a href="#这样MySQL数据库就配置完成啦，账号密码分别是”root”-和-“111”，端口号为3306；" class="headerlink" title="这样MySQL数据库就配置完成啦，账号密码分别是”root” 和 “111”，端口号为3306；"></a>这样MySQL数据库就配置完成啦，账号密码分别是”root” 和 “111”，端口号为3306；</h2><h1 id="cmd窗口下输入命令时要保证全部为英文状态！！！！！！"><a href="#cmd窗口下输入命令时要保证全部为英文状态！！！！！！" class="headerlink" title="cmd窗口下输入命令时要保证全部为英文状态！！！！！！"></a>cmd窗口下输入命令时要保证全部为英文状态！！！！！！</h1>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo博客搭建流程</title>
      <link href="2020/07/16/hexo-bo-ke-da-jian-liu-cheng/"/>
      <url>2020/07/16/hexo-bo-ke-da-jian-liu-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo博客的搭建流程及步骤并部署到GitHub"><a href="#Hexo博客的搭建流程及步骤并部署到GitHub" class="headerlink" title="Hexo博客的搭建流程及步骤并部署到GitHub"></a>Hexo博客的搭建流程及步骤并部署到GitHub</h1><h3 id="下载并安装Node-js"><a href="#下载并安装Node-js" class="headerlink" title="下载并安装Node.js"></a>下载并安装<a href="nodejs.org">Node.js</a></h3><p> Win + R 输入cmd查看Node.js版本</p><p><code>node -v</code></p><h3 id="使用国内淘宝镜像源安（github较慢）"><a href="#使用国内淘宝镜像源安（github较慢）" class="headerlink" title="使用国内淘宝镜像源安（github较慢）"></a>使用国内淘宝镜像源安（github较慢）</h3><p><code> rpm install -g -cnpm --registry=http://registry.rpm.taobao.org</code></p><h3 id="安装hexo博客框架"><a href="#安装hexo博客框架" class="headerlink" title="安装hexo博客框架"></a>安装hexo博客框架</h3><p><code>cnpm install -g hexo-cli</code></p><a id="more"></a><h3 id="验证hexo是否下载成功"><a href="#验证hexo是否下载成功" class="headerlink" title="验证hexo是否下载成功"></a>验证hexo是否下载成功</h3><p><code>hexo -v </code></p><h3 id="在本地新建blog文件夹（也可以在图形化界面新建）"><a href="#在本地新建blog文件夹（也可以在图形化界面新建）" class="headerlink" title="在本地新建blog文件夹（也可以在图形化界面新建）"></a>在本地新建blog文件夹（也可以在图形化界面新建）</h3><p><code>mkdir blog</code></p><h3 id="win用户如果想在E盘下新建请执行："><a href="#win用户如果想在E盘下新建请执行：" class="headerlink" title="win用户如果想在E盘下新建请执行："></a>win用户如果想在E盘下新建请执行：</h3><p><code>mkdir E:\blog</code></p><hr><h3 id="下载Git，用Git代替cmd界面"><a href="#下载Git，用Git代替cmd界面" class="headerlink" title="下载Git，用Git代替cmd界面"></a>下载Git，用Git代替cmd界面</h3><p><a href="https://git-scm.com/">Git下载地址</a></p><h3 id="安装完成后配置Git环境变量"><a href="#安装完成后配置Git环境变量" class="headerlink" title="安装完成后配置Git环境变量"></a>安装完成后配置Git环境变量</h3><ul><li>找到安装文件夹的路径，复制路径</li><li>找到系统的环境变量–将复制的路径加到path上面</li></ul><h3 id="验证Git环境变量配置成功"><a href="#验证Git环境变量配置成功" class="headerlink" title="验证Git环境变量配置成功"></a>验证Git环境变量配置成功</h3><p><code>git --version</code></p><hr><h3 id="生成hexo博客（使用git，进入blog文件夹）"><a href="#生成hexo博客（使用git，进入blog文件夹）" class="headerlink" title="生成hexo博客（使用git，进入blog文件夹）"></a>生成hexo博客（使用git，进入blog文件夹）</h3><p><code>hexo init</code></p><h3 id="启动hexo博客并使用本地地址打开"><a href="#启动hexo博客并使用本地地址打开" class="headerlink" title="启动hexo博客并使用本地地址打开"></a>启动hexo博客并使用本地地址打开</h3><pre><code>hexo shttp://localhost:4000</code></pre><ul><li>ctrl + c 断开连接</li></ul><h3 id="新建一个博客"><a href="#新建一个博客" class="headerlink" title="新建一个博客"></a>新建一个博客</h3><p><code>hexo n "文章名"</code></p><h3 id="博客清理、生成、启动"><a href="#博客清理、生成、启动" class="headerlink" title="博客清理、生成、启动"></a>博客清理、生成、启动</h3><pre><code>hexo cleanhexo ghexo s</code></pre><ul><li>刷新就可以看到刚才新建的博客</li></ul><hr><h2 id="将hexo博客部署到GitHub"><a href="#将hexo博客部署到GitHub" class="headerlink" title="将hexo博客部署到GitHub"></a>将hexo博客部署到GitHub</h2><h3 id="新建GitHub仓库"><a href="#新建GitHub仓库" class="headerlink" title="新建GitHub仓库"></a>新建GitHub仓库</h3><ul><li>命名规则如下：</li></ul><h4 id="GitHub用户名-github-io"><a href="#GitHub用户名-github-io" class="headerlink" title="GitHub用户名.github.io"></a>GitHub用户名.github.io</h4><ul><li>例如：codeliuzhan.github.io</li><li>添加描述后直接新建</li></ul><h3 id="安装Git部署插件"><a href="#安装Git部署插件" class="headerlink" title="安装Git部署插件"></a>安装Git部署插件</h3><p><code>cnpm install --save hexo-deployer-git</code></p><h3 id="设置blog-config-yml"><a href="#设置blog-config-yml" class="headerlink" title="设置blog/_config.yml"></a>设置blog/_config.yml</h3><p><code>vim _config.yml</code></p><h2 id="使用命令行修改文件的操作"><a href="#使用命令行修改文件的操作" class="headerlink" title="使用命令行修改文件的操作"></a>使用命令行修改文件的操作</h2><ul><li>i    插入</li><li>esc + shift + ； 出现输入框</li><li>wq  保存退出</li></ul><h3 id="配置Deployment"><a href="#配置Deployment" class="headerlink" title="配置Deployment"></a>配置Deployment</h3><pre><code>deploy:  type: git  repo: https://github.com/codeliuzhan/codeliuzhan.github.io.git  branch: master</code></pre><ul><li>repo为刚才新建仓库的地址</li><li>：后面加空格</li></ul><h3 id="使用命令部署到GitHub"><a href="#使用命令部署到GitHub" class="headerlink" title="使用命令部署到GitHub"></a>使用命令部署到GitHub</h3><p><code>hexo d</code></p><ul><li>win用户在弹出的对话框中输入GitHub的账号密码</li></ul><h3 id="使用仓库名就可以访问你的博客啦"><a href="#使用仓库名就可以访问你的博客啦" class="headerlink" title="使用仓库名就可以访问你的博客啦"></a>使用仓库名就可以访问你的博客啦</h3><ul><li>例如：codeliuzhan.github.io</li></ul>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
